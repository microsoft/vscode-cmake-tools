/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/modules.json.AddFileDependencies": "新增相依性至來源檔案。",
	"assets/modules.json.AndroidTestUtilities": "建立自動將指定資料載入 Android 裝置的測試。",
	"assets/modules.json.BundleUtilities": "可協助組合獨立 套件組合應用程式的函式。",
	"assets/modules.json.CheckCCompilerFlag": "檢查 C 編譯器是否支援指定旗標。",
	"assets/modules.json.CheckCompilerFlag": "檢查編譯器是否支援指定旗標。",
	"assets/modules.json.CheckCSourceCompiles": "檢查所提供 C 來源是否編譯並連結至可執行檔。",
	"assets/modules.json.CheckCSourceRuns": "檢查所提供 C 來源是否編譯並連結至可執行檔，並可在接下來執行。",
	"assets/modules.json.CheckCXXCompilerFlag": "檢查 CXX 編譯器是否支援指定旗標。",
	"assets/modules.json.CheckCXXSourceCompiles": "檢查所提供 C++ 來源是否編譯並連結至可執行檔。",
	"assets/modules.json.CheckCXXSourceRuns": "檢查所提供 C++ 來源是否編譯並連結至可執行檔，並可在接下來執行。",
	"assets/modules.json.CheckCXXSymbolExists": "檢查符號是否存在於函式、變數或巨集 C++。",
	"assets/modules.json.CheckFortranCompilerFlag": "檢查 Fortran 編譯器是否支援指定旗標。",
	"assets/modules.json.CheckFortranFunctionExists": "檢查 Fortran 函式是否存在。",
	"assets/modules.json.CheckFortranSourceCompiles": "檢查所提供 Fortran 來源是否編譯並連結至可執行檔。",
	"assets/modules.json.CheckFortranSourceRuns": "檢查所提供 Fortran 來源是否編譯並連結至可執行檔，並可在接下來執行。",
	"assets/modules.json.CheckFunctionExists": "檢查 C 函式是否可連結",
	"assets/modules.json.CheckIncludeFile": "提供巨集來檢查標頭檔案是否可包含在 C 中。",
	"assets/modules.json.CheckIncludeFileCXX": "提供巨集來檢查標頭檔案是否可包含在 CXX 中。",
	"assets/modules.json.CheckIncludeFiles": "提供巨集來檢查一或多個標頭檔案的清單是否可一併包含。",
	"assets/modules.json.CheckIPOSupported": "檢查編譯器是否支援跨程序式最佳化 (IPO/LTO)。在啟用 INTERPROCEDURAL_OPTIMIZATION 目標屬性之前，請使用此功能。",
	"assets/modules.json.CheckLanguage": "檢查語言是否可以透過 enable_language 或專案命令啟用: ",
	"assets/modules.json.CheckLibraryExists": "檢查函式是否存在。",
	"assets/modules.json.CheckLinkerFlag": "檢查編譯器是否支援指定連結旗標。",
	"assets/modules.json.CheckOBJCCompilerFlag": "檢查 Objective-C 編譯器是否支援指定旗標。",
	"assets/modules.json.CheckOBJCSourceCompiles": "檢查所提供 Objective-C 來源是否編譯並連結至可執行檔。",
	"assets/modules.json.CheckOBJCSourceRuns": "檢查所提供 Objective-C 來源是否編譯並連結至可執行檔，並可在接下來執行。",
	"assets/modules.json.CheckOBJCXXCompilerFlag": "檢查 Objective-C 編譯器是否支援指定旗標。",
	"assets/modules.json.CheckOBJCXXSourceCompiles": "檢查所提供 Objective-C++ 來源是否編譯並連結至可執行檔。",
	"assets/modules.json.CheckOBJCXXSourceRuns": "檢查所提供 Objective-C++ 來源是否編譯並連結至可執行檔，並可在接下來執行。",
	"assets/modules.json.CheckPIESupported": "檢查連結器是否支援可執行檔的位置獨立程式碼 (PIE) 或無位置NO_PIE 程式碼 (NO_PIE)。使用此功能來確保可執行檔的 POSITION_INDEPENDENT_CODE 目標屬性在連結時間會採用。",
	"assets/modules.json.CheckPrototypeDefinition": "檢查我們預期原型是否正確。",
	"assets/modules.json.CheckSourceCompiles": "檢查所提供來源是否編譯並連結至可執行檔。",
	"assets/modules.json.CheckSourceRuns": "檢查所提供來源是否編譯並連結至可執行檔，並可在接下來執行。",
	"assets/modules.json.CheckStructHasMember": "檢查指定的結構或類別是否具有指定的成員變數",
	"assets/modules.json.CheckSymbolExists": "提供巨集來檢查符號是否存在於 C 中的函式、變數或巨集。",
	"assets/modules.json.CheckTypeSize": "檢查類型的大小",
	"assets/modules.json.CheckVariableExists": "檢查變數是否存在。",
	"assets/modules.json.CMakeAddFortranSubdirectory": "新增僅 fortran 的子目錄、尋找 fortran 編譯器及組建。",
	"assets/modules.json.CMakeBackwardCompatibilityCXX": "定義多個回溯相容性變數",
	"assets/modules.json.CMakeDependentOption": "提供依存於其他選項之選項的巨集。",
	"assets/modules.json.CMakeDetermineVSServicePack": "包含編譯器版本號碼的 CMAKE_<LANG>_COMPILER_VERSION 變數已取代此模組的功能。",
	"assets/modules.json.CMakeExpandImportedTargets": "一旦需要此模組，才能將已匯出的目標擴充到它們在磁碟上參考的基礎程式庫，以用於 try_compile 和 try_run 命令。這些命令現在支援其 LINK_LIBRARIES 選項中的已匯出程式庫 (自 cMake 2.8.11 for try_compile 和 CMake 3.2 for try_run)。",
	"assets/modules.json.CMakeFindDependencyMacro": "``find_dependency()`` 巨集會包裝套件相依性 :command:`find_package` call 呼叫。",
	"assets/modules.json.CMakeFindFrameworks": "尋找 OSX 架構的協助程式模組",
	"assets/modules.json.CMakeFindPackageMode": "使用 --find-package <Find-Package Tool Mode> 時，Cmake 會執行此檔案。預期會使用 -D 設定下列變數: ",
	"assets/modules.json.CMakeForceCompiler": "當 CMake 無法自動偵測編譯器識別時，此模組提供的巨集曾是供跨編譯工具鏈檔案使用。自此模組推出以來，CMake 的編譯器識別功能已改善，現在可以開始進行辨識任何編譯器。此外，CMake 從編譯器偵測到的資訊套件現在已過於廣泛，無法由使用這些巨集的工具鏈檔案提供。",
	"assets/modules.json.CMakeGraphVizOptions": "CMake 的內建 Graphviz 支援。",
	"assets/modules.json.CMakePackageConfigHelpers": "協助程式功能，用於建立其他專案可包含的設定檔，以尋找並使用套件。",
	"assets/modules.json.CMakeParseArguments": "此模組一旦實作 CMake 現已原生執行的 cmake_parse_arguments 命令。現在，這是一個空的預留位置，用於與包含它的專案相容，以從 CMake 3.4 及更早版本取得命令。",
	"assets/modules.json.CMakePrintHelpers": "列印屬性和變數的便利函式，在針對如偵錯時非常實用。",
	"assets/modules.json.CMakePrintSystemInformation": "列印系統資訊。",
	"assets/modules.json.CMakePushCheckState": "此模組定義三個巨集: CMAKE_PUSH_CHECK_STATE() CMAKE_POP_CHECK_STATE() 和 CMAKE_RESET_CHECK_STATE() 這些巨集可用來儲存、還原和重設 (即清除內容) 變數的狀態 CMAKE_REQUIRED_FLAGS，CMAKE_REQUIRED_DEFINITIONS，CMAKE_REQUIRED_LINK_OPTIONS，CMAKE_REQUIRED_LIBRARIES，CMAKE_REQUIRED_INCLUDES 和 CMAKE_EXTRA_INCLUDE_FILES，由 CMake 提供的各種檢查檔案使用，例如 check_function_exists() 等。變數內容會推送到堆疊上，支援多次推送。這非常實用，例如，在 Find-module 中執行這類測試時，必須設定它們，但在 Find-module 執行之後，它們的值應該與先前的值相同。",
	"assets/modules.json.CMakeVerifyManifest": "CMakeVerifyManifest.cmake",
	"assets/modules.json.CPack": "設定二進位安裝程式和來源套件的產生器。",
	"assets/modules.json.CPackArchive": "CPack Archive 產生器的文件已移動至此處: CPack Archive 產生器",
	"assets/modules.json.CPackBundle": "CPack Bundle 產生器的文件已移動至此處: CPack Bundle 產生器",
	"assets/modules.json.CPackComponent": "設定二進位安裝程式和來源套件的元件。",
	"assets/modules.json.CPackCygwin": "CPack Cygwin 產生器的文件已移動至此處: CPack Cygwin 產生器",
	"assets/modules.json.CPackDeb": "CPack DEB 產生器的文件已移動至此處: CPack DEB 產生器",
	"assets/modules.json.CPackDMG": "CPack DragNDrop 產生器的文件已移動至此處: CPack DragNDrop 產生器",
	"assets/modules.json.CPackFreeBSD": "CPack FreeBSD 產生器的文件已移動至此處: CPack FreeBSD 產生器",
	"assets/modules.json.CPackIFW": "此模組會尋找 Qt Installer Framework (QtIFW) 提供的命令行公用程式位置。",
	"assets/modules.json.CPackIFWConfigureFile": "此模組定義 configure_file 類似的命令，以設定以 QtIFW/SDK/Creator 樣式準備的檔案範本。",
	"assets/modules.json.CPackNSIS": "CPack NSIS 產生器的文件已移動至此處: CPack NSIS 產生器",
	"assets/modules.json.CPackNuGet": "CPack NuGet 產生器的文件已移動至此處: CPack NuGet 產生器",
	"assets/modules.json.CPackProductBuild": "CPack productbuild 產生器的文件已移動至此處: CPack productbuild 產生器",
	"assets/modules.json.CPackRPM": "CPack RPM 產生器的文件已移動至此處: CPack RPM 產生器",
	"assets/modules.json.CPackWIX": "CPack WIX 產生器的文件已移動至此處: CPack WIX 產生器",
	"assets/modules.json.CSharpUtilities": "讓 CSharp/.NET 目標設定更容易的函式。",
	"assets/modules.json.CTest": "設定專案以使用 CTest/CDash 進行測試",
	"assets/modules.json.CTestCoverageCollectGCOV": "此模組提供 ctest_coverage_collect_gcov 函式。",
	"assets/modules.json.CTestScriptMode": "此檔案是由 ctest 在指令碼模式 (-S) 中讀取",
	"assets/modules.json.CTestUseLaunchers": "在開啟 CTEST_USE_LAUNCHERS 時，設定 RULE_LAUNCH_* 全域屬性。",
	"assets/modules.json.Dart": "設定專案以使用 CTest 或舊的 Dart Tcl 用戶端進行測試",
	"assets/modules.json.DeployQt4": "可協助組合獨立 Qt4 可執行檔的函式。",
	"assets/modules.json.Documentation": "此模組提供 VTK 檔案架構的支援。它倚靠數個工具 (Doxygen、Perl 等)。",
	"assets/modules.json.ExternalData": "管理儲存在來源樹狀目錄外部的資料檔案",
	"assets/modules.json.ExternalProject": "ExternalProject_Add() 函式會建立自訂目標，以驅動外部專案的下載、更新/修補、設定、組建、安裝和測試步驟",
	"assets/modules.json.FeatureSummary": "產生已啟用/已停用功能摘要的函式。",
	"assets/modules.json.FetchContent": "此模組可透過 ExternalProject 模組支援的任何方法，在設定時間填入內容。雖然 EExternalProject_Add() 在組建時間時下載，但 FetchContent 模組會立即提供內容，允許設定步驟使用命令中的內容，例如 add_subdirectory()，include() 或 file() 作業。",
	"assets/modules.json.FindALSA": "尋找進階 Linux 音效架構 (ALSA)",
	"assets/modules.json.FindArmadillo": "尋找 Armad C++ 程式庫。Armadillo 時是線性代數和科學運算的程式庫。",
	"assets/modules.json.FindASPELL": "嘗試尋找 ASPELL",
	"assets/modules.json.FindAVIFile": "找出 AVIFILE 程式庫並包含路徑",
	"assets/modules.json.FindBacktrace": "尋找反向追蹤 (3) 的提供者。",
	"assets/modules.json.FindBISON": "尋找 bison 可執行檔，並提供巨集以產生自訂的組建規則。",
	"assets/modules.json.FindBLAS": "尋找基本線性代數子程式 (BLAS) 程式庫",
	"assets/modules.json.FindBoost": "尋找 Boost，包括 dirs 和程式庫",
	"assets/modules.json.FindBullet": "嘗試尋找項目符號物理引擎",
	"assets/modules.json.FindBZip2": "嘗試尋找 BZip2",
	"assets/modules.json.FindCABLE": "尋找 CABLE",
	"assets/modules.json.FindCoin3D": "尋找 Coin3D (Open Inventor)",
	"assets/modules.json.FindCUDA": "不再需要使用此模組或呼叫 find_package (CUDA) 來編譯 CUDA 程式碼。相反地，在專案命令的上層呼叫指定的語言中，列出 CUDA，或是使用 CUDA 呼叫 enable_language 命令。接著，您可以直接將 CUDA (.cu) 來源新增到類似其他語言的目標。",
	"assets/modules.json.FindCUDAToolkit": "此指令碼會尋找 NVIDIA CUDA 工具組和相關聯的程式庫，但不需要為特定專案啟用 CUDA 語言。此模組不會搜尋 NVIDIA CUDA 範例。",
	"assets/modules.json.FindCups": "尋找 Common UNIX 列印系統 (CUPS)。",
	"assets/modules.json.FindCURL": "尋找原生的 CURL 標頭和程式庫。",
	"assets/modules.json.FindCurses": "尋找 curses 或 ncurses，包括檔案和程式庫。",
	"assets/modules.json.FindCVS": "尋找協作版本系統 (CVS)。",
	"assets/modules.json.FindCxxTest": "尋找 CxxTest 單元測試架構。",
	"assets/modules.json.FindCygwin": "尋找 Cygwin，這是一個與 POSIX 相容的環境，在 Microsoft Windows 上執行",
	"assets/modules.json.FindDart": "尋找 DART",
	"assets/modules.json.FindDCMTK": "尋找 DICOM ToolKit】 (DCMTK) 程式庫和應用程式",
	"assets/modules.json.FindDevIL": "此模組會尋找開發人員的影像庫。https://openil.sourceforge.net/",
	"assets/modules.json.FindDoxygen": "Doxygen 是文件產生工具 (請參閱 https://www.doxygen.nl)。此模組會尋找 Doxygen 及其支援的一些選擇性工具: ",
	"assets/modules.json.FindEnvModules": "找出環境模組實作，讓 CMake 指令碼可以使用命令。這與 Lua 型 Lmod 和 TCL 型 EnvironmentModules 相容。",
	"assets/modules.json.FindEXPAT": "尋找原生的 Expat 標頭和程式庫。Expat 是以 C 撰寫的資料流導向 XML 剖析器庫。",
	"assets/modules.json.FindFLEX": "尋找快速詞彙分析程式 (Flex) 可執行檔，並提供巨集以產生自訂組建規則",
	"assets/modules.json.FindFLTK": "尋找 Fast Light Toolkit (FLTK) 程式庫",
	"assets/modules.json.FindFLTK2": "尋找原生 FLTK 2.0 內容和程式庫",
	"assets/modules.json.FindFontconfig": "尋找 Fontconfig 標頭和程式庫。",
	"assets/modules.json.FindFreetype": "尋找 FreeType 字型轉譯器內容和程式庫。",
	"assets/modules.json.FindGCCXML": "尋找 GCC-XML 前端可執行檔。",
	"assets/modules.json.FindGDAL": "尋找地理空間資料抽象庫 (GDAL)。",
	"assets/modules.json.FindGettext": "尋找 GNU gettext 工具",
	"assets/modules.json.FindGIF": "這會尋找圖形交換格式 (GIF) 程式庫 (giflib)",
	"assets/modules.json.FindGit": "模組定義下列變數:",
	"assets/modules.json.FindGLEW": "尋找 OpenGL Extension Wrangler Library (GLEW)",
	"assets/modules.json.FindGLUT": "尋找 OpenGL Utility Toolkit (TOOLKIT) 程式庫並包含檔案。",
	"assets/modules.json.FindGnuplot": "此模組會尋找 gnuplot",
	"assets/modules.json.FindGnuTLS": "尋找 GNU 傳輸層安全性程式庫 (gnutls)",
	"assets/modules.json.FindGSL": "尋找原生科學研究用函式庫 (GSL) 包含內容和連結庫。",
	"assets/modules.json.FindGTest": "找出 Google C++ 測試架構。",
	"assets/modules.json.FindGTK": "尋找 GTK、glib 和 GTKGLArea",
	"assets/modules.json.FindGTK2": "尋找 GTK2 小工具庫及其幾個其他選擇性元件，例如 gtkmm、glade 和 glademm。",
	"assets/modules.json.FindHDF5": "尋找階層式資料格式 (HDF5)，這是一個可讀取和寫入自我描述陣列程式庫。",
	"assets/modules.json.FindHg": "從 mercurial 工作複本中解壓縮資訊。",
	"assets/modules.json.FindHSPELL": "嘗試尋找希伯來文拼字檢查 (Hspell) 和字型引擎。",
	"assets/modules.json.FindHTMLHelp": "此模組會尋找 Microsoft HTML 幫助集編譯器",
	"assets/modules.json.FindIce": "尋找 ZeroC 網路通訊引擎 (ICE) 程式、程式庫和資料檔。",
	"assets/modules.json.FindIconv": "此模組會尋找系統上的 iconv() POSIX.1 函式。這些函式可能以一般 C 程式庫的形式提供，或以其他程式庫的形式在外部提供。",
	"assets/modules.json.FindIcotool": "尋找 icotool",
	"assets/modules.json.FindICU": "尋找 Unicode (ICU) 程式庫和程式的國際元件。",
	"assets/modules.json.FindImageMagick": "尋找 ImageMagick，這是顯示、轉換及操作光柵影像的軟體套件。",
	"assets/modules.json.FindIntl": "尋找 Gettext libintl 標頭和程式庫。",
	"assets/modules.json.FindITK": "此模組已不存在。",
	"assets/modules.json.FindJasper": "尋找 Jasper JPEG2000 程式庫。",
	"assets/modules.json.FindJava": "尋找 Java",
	"assets/modules.json.FindJNI": "尋找 Java 原生介面 (JNI) 標頭和程式庫。",
	"assets/modules.json.FindJPEG": "尋找聯合影像專家小組 (JPEG) 程式庫 (libjpeg)",
	"assets/modules.json.FindKDE3": "尋找 KDE3 內容和程式庫 dirs、KDE 前置處理器，並定義一些巨集",
	"assets/modules.json.FindKDE4": "尋找 KDE4 並提供所有必要的變數和巨集，以編譯其軟體。它會以指定的順序在下列目錄中尋找 KDE 4: ",
	"assets/modules.json.FindLAPACK": "尋找線性代數 PACKage (LAPACK) 程式庫",
	"assets/modules.json.FindLATEX": "尋找 LaTeX",
	"assets/modules.json.FindLibArchive": "尋找程式庫和標頭。Libarchive 是多重格式的封存層和壓縮程式庫。",
	"assets/modules.json.FindLibinput": "尋找 libinput 標頭和程式庫。",
	"assets/modules.json.FindLibLZMA": "尋找 LZMA 壓縮演算法標頭和程式庫。",
	"assets/modules.json.FindLibXml2": "尋找 XML 處理庫 (libxml2)。",
	"assets/modules.json.FindLibXslt": "尋找 XSL 轉換、可延伸樣式表語言 (XSLT) 程式庫 (LibXslt)",
	"assets/modules.json.FindLTTngUST": "尋找 Trace Toolkit Next Generation (LTTng-UST) 程式庫。",
	"assets/modules.json.FindLua": "找出 Lua 程式庫。",
	"assets/modules.json.FindLua50": "找出 Lua 程式庫。",
	"assets/modules.json.FindLua51": "找出 Lua 程式庫。此模組定義: ",
	"assets/modules.json.FindMatlab": "尋找 Matlab 或 Matlab Compiler Runtime (MCR)，並向 CMake 提供 Matlab 工具、程式庫和編譯器。",
	"assets/modules.json.FindMFC": "在 Windows 上尋找 Microsoft Foundation Classes (MFC)。",
	"assets/modules.json.FindMotif": "嘗試尋找 Motif (或 lesstif)",
	"assets/modules.json.FindMPEG": "尋找原生 MPEG 內容和程式庫",
	"assets/modules.json.FindMPEG2": "尋找原生 MPEG2 內容和程式庫",
	"assets/modules.json.FindMPI": "尋找訊息傳遞介面 (MPI) 實作。",
	"assets/modules.json.FindMsys": "尋找 MSYS，這是一個與 POSIX 相容的環境，在 Microsoft Windows 上執行",
	"assets/modules.json.FindODBC": "尋找開放式資料庫連接 (ODBC) 包括目錄和程式庫。",
	"assets/modules.json.FindOpenACC": "偵測編譯器支援的 OpenACC。",
	"assets/modules.json.FindOpenAL": "尋找 Open Audio Library (OpenAL).。",
	"assets/modules.json.FindOpenCL": "尋找 Open Computing Language (OpenCL)",
	"assets/modules.json.FindOpenGL": "適用於 OpenGL 和 OpenGL 公用程式庫 (GLU) 的 FindModule。",
	"assets/modules.json.FindOpenMP": "尋找 Open Multi-Processing (OpenMP) 支援。",
	"assets/modules.json.FindOpenSceneGraph": "尋找 OpenSceneGraph (3D 圖形應用程式開發介面)",
	"assets/modules.json.FindOpenSP": "嘗試尋找 OpenSP 程式庫。",
	"assets/modules.json.FindOpenSSL": "尋找 OpenSSL 加密程式庫。",
	"assets/modules.json.FindOpenThreads": "OpenThreads 是 C++ 型線程程式庫。其最大的使用者群似乎為 OpenSceneGraph，因此您可能會注意到我接受 OSGDIR 作為環境路徑。我將其視為 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。",
	"assets/modules.json.Findosg": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgAnimation": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgDB": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgFX": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgGA": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgIntrospection": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgManipulator": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgParticle": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgPresentation": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgProducer": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgQt": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgShadow": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgSim": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgTerrain": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgText": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgUtil": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgViewer": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgVolume": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.FindosgWidget": "這是 Findosg* 套件的一部分，用來尋找 OpenSceneGraph 元件。每個元件都是獨立的，您必須選擇加入每個模組。您也必須加入 OpenGL 和 OpenThreads (視需求加入 Producer)，因為這些模組不會協助您加入。這是為了讓您逐步控制自己的系統，以防您需要退出特定元件或變更特定模組的尋找行為 (可能是因為預設的 FindOpenGL 模組無法與您的系統一起作為範例)。如果您想要使用包含所有內容的更方便模組，請使用 FindOpenSceneGraph，而不是 Findosg*.cmake 模組。",
	"assets/modules.json.Findosg_functions": "此 CMake 檔案包含兩個巨集，可協助搜尋 OSG 程式庫和 nodekit。如需完整文件，請參閱 FindOpenSceneGraph。",
	"assets/modules.json.FindPackageHandleStandardArgs": "此模組提供用來執行 find_package(<PackageName>) 呼叫的 Find Modules 中之函式。",
	"assets/modules.json.FindPackageMessage": "此函式適用於 FindXXX.cmake 模組檔案。它會針對每個唯一尋找結果列印一次訊息。這很適合用於告知使用者套件的所在位置。第一個引數指定套件的名稱 (XXX)。第二個引數指定要顯示的郵件。第三個引數會列出尋找結果的詳細資訊，如此一來，如果變更訊息將會再次顯示。巨集也會將 QUIET 引數遵守 find_package 命令。",
	"assets/modules.json.FindPatch": "模組定義下列變數:",
	"assets/modules.json.FindPerl": "尋找 Perl 解譯器。",
	"assets/modules.json.FindPerlLibs": "尋找 Perl 連結庫",
	"assets/modules.json.FindPHP4": "尋找 PHP4",
	"assets/modules.json.FindPhysFS": "尋找 PhysFS 程式庫 此模組定義: ",
	"assets/modules.json.FindPike": "尋找 Pike",
	"assets/modules.json.FindPkgConfig": "CMake 的 pkg-config 模組。",
	"assets/modules.json.FindPNG": "尋找 libpng，這是 PNG 影像格式的正式參考程式庫。",
	"assets/modules.json.FindPostgreSQL": "尋找 PostgreSQL 安裝。",
	"assets/modules.json.FindProducer": "雖然製作人不是 OpenSceneGraph 的直接組成部分，但是其主要使用者是 OSG，因此我將其視為 Findosg* 套件的一部分，用於尋找 OpenSceneGraph 元件。您將注意到我將 OSGDIR 作為環境路徑。",
	"assets/modules.json.FindProtobuf": "找出並設定 Google 通訊協定緩衝區庫。",
	"assets/modules.json.FindPython": "尋找 Python 解譯器、編譯程式及開發環境 (包括目錄和連結庫)。",
	"assets/modules.json.FindPython2": "尋找 Python 2 解譯器、編譯程式及開發環境 (包括目錄和連結庫)。",
	"assets/modules.json.FindPython3": "尋找 Python 3 解譯器、編譯程式及開發環境 (包括目錄和連結庫)。",
	"assets/modules.json.FindPythonInterp": "尋找 Python 解譯器",
	"assets/modules.json.FindPythonLibs": "尋找 Python 程式庫",
	"assets/modules.json.FindQt": "搜尋所有已安裝的 Qt3 或 Qt4 版本。",
	"assets/modules.json.FindQt3": "尋找包含路徑和程式庫的 Qt",
	"assets/modules.json.FindQt4": "此模組可用來尋找 Qt4。最重要的問題是 Qt4 qmake 可以透過系統路徑使用。接著，這個 qmake 會用來偵測其他所有內容。此模組定義一些 IMPORTED 目標、巨集和變數。",
	"assets/modules.json.FindQuickTime": "尋找 QuickTime 此模組定義: ",
	"assets/modules.json.FindRTI": "嘗試尋找 M&S HLA RTI 程式庫",
	"assets/modules.json.FindRuby": "尋找 Ruby",
	"assets/modules.json.FindSDL": "尋找 SDL 程式庫",
	"assets/modules.json.FindSDL_gfx": "尋找 SDL_gfx 程式庫",
	"assets/modules.json.FindSDL_image": "尋找 SDL_image 程式庫",
	"assets/modules.json.FindSDL_mixer": "尋找 SDL_mixer 程式庫",
	"assets/modules.json.FindSDL_net": "尋找 SDL_net 程式庫",
	"assets/modules.json.FindSDL_sound": "尋找 SDL_sound 程式庫",
	"assets/modules.json.FindSDL_ttf": "尋找 SDL_ttf 程式庫",
	"assets/modules.json.FindSelfPackers": "尋找 upx",
	"assets/modules.json.FindSQLite3": "尋找 SQLite 程式庫，v3",
	"assets/modules.json.FindSquish": "-- 一般用法",
	"assets/modules.json.FindSubversion": "從 Subversion 工作複本中解壓縮資訊。",
	"assets/modules.json.FindSWIG": "尋找簡單包裝介面產生器 (SWIG) 可執行檔。",
	"assets/modules.json.FindTCL": "已移除 TK_INTERNAL_PATH。",
	"assets/modules.json.FindTclsh": "尋找 tclsh",
	"assets/modules.json.FindTclStub": "已移除 TCL_STUB_LIBRARY_DEBUG 和 TK_STUB_LIBRARY_DEBUG。",
	"assets/modules.json.FindThreads": "此模組會決定系統的線程庫。",
	"assets/modules.json.FindTIFF": "尋找 TIFF 程式庫 (libtiff、https://libtiff.gitlab.io/libtiff/)。",
	"assets/modules.json.FindUnixCommands": "尋找 Unix 命令，包括來自 Cygwin 的命令",
	"assets/modules.json.FindVTK": "此模組已不存在。",
	"assets/modules.json.FindVulkan": "尋找 Vulkan，這是低負荷、跨平台的 3D 圖形和運算 API。",
	"assets/modules.json.FindWget": "尋找小工具",
	"assets/modules.json.FindWish": "尋找願望安裝",
	"assets/modules.json.FindwxWidgets": "尋找 wxWidgets (即 wxWindows) 安裝。",
	"assets/modules.json.FindwxWindows": "尋找 wxWindows (wxWidgets) 安裝",
	"assets/modules.json.FindX11": "尋找 X11 安裝",
	"assets/modules.json.FindXalanC": "尋找 Apache Xalan-C++ XSL 轉換處理器標頭和程式庫。",
	"assets/modules.json.FindXCTest": "可協助建立和執行 XCTest 套件組合的函式。",
	"assets/modules.json.FindXercesC": "尋找驗證 XML 剖析器標頭 C++ 程式庫的 Apache Xerces-C++。",
	"assets/modules.json.FindXMLRPC": "尋找 xmlrpc",
	"assets/modules.json.FindZLIB": "尋找原生 ZLIB 內容和程式庫。",
	"assets/modules.json.FortranCInterface": "Fortran/C 介面偵測",
	"assets/modules.json.GenerateExportHeader": "產生連結庫匯出巨集的函式",
	"assets/modules.json.GetPrerequisites": "分析及列出可執行檔先決條件的函式。",
	"assets/modules.json.GNUInstallDirs": "定義 GNU 標準安裝目錄",
	"assets/modules.json.GoogleTest": "此模組定義函式來協助使用 Google Test 基礎結構。提供兩個新增測試的機制。gtest_add_tests 已存在一段時間，原本是在 CMake 3.10 中透過 find_package(GTest). gtest_discover_tests 引進。",
	"assets/modules.json.InstallRequiredSystemLibraries": "包含此模組以搜尋編譯程式提供的系統運行時間連結庫，並新增其安裝規則。在包含模組以調整行為之前，可以先設定一些選用變數:",
	"assets/modules.json.MacroAddFileDependencies": "請勿在新的程式碼中使用此命令。這隻是一個包裝函式:",
	"assets/modules.json.ProcessorCount": "ProcessorCount(var)",
	"assets/modules.json.SelectLibraryConfigurations": "此巨集會使用程式庫基底名稱做為引述，並針對變數選擇良好的值",
	"assets/modules.json.SquishTestScript": "此指令碼會使用 Squish 啟動 GUI 測試。您不應該直接呼叫程式碼;相反地，您應該透過 FindSquish.cmake 中定義的 SQUISH_ADD_TEST 巨集來存取程式碼。",
	"assets/modules.json.TestBigEndian": "檢查目標架構是位元組由大到小或位元組由小到大。",
	"assets/modules.json.TestCXXAcceptsFlag": "檢查 CXX 編譯器是否接受旗標。",
	"assets/modules.json.TestForANSIForScope": "檢查 ANSI 的範圍支援",
	"assets/modules.json.TestForANSIStreamHeaders": "測試 ANSI 資料流標頭 iostream 等的編譯器支援。",
	"assets/modules.json.TestForSSTREAM": "測試 ANSI 資料流標頭的編譯器支援",
	"assets/modules.json.TestForSTDNamespace": "測試 std:: 命名空間支援",
	"assets/modules.json.UseEcos": "此模組定義建立 eCos 應用程式所需的變數和巨集。",
	"assets/modules.json.UseJava": "此檔案提供 Java 支援。假設 FindJava 已經載入。請參閱 Find Java，以了解如何將 Java 載入 CMake 專案。",
	"assets/modules.json.UseJavaClassFilelist": "此模組先前因錯誤而記錄，而且一律不會由專案程式碼直接引用。請參閱: :module:`UseJava` 模組。",
	"assets/modules.json.UseJavaSymlinks": "此模組先前因錯誤而記錄，而且一律不會由專案程式碼直接引用。請參閱: :module:`UseJava` 模組。",
	"assets/modules.json.UsePkgConfig": "CMake 的已淘汰 pkg-config 模組，請改為使用 FindPkgConfig。",
	"assets/modules.json.UseSWIG": "此檔案提供 SWIG 支援。假設 FindSWIG 模組已經載入。",
	"assets/modules.json.UsewxWidgets": "使用 wxWidgets 文件庫所包含的便利性。",
	"assets/modules.json.Use_wxWindows": "此便利性包括尋找是否安裝 wxWindows 並設定適當的 libs、incdirs、旗標等。作者 Jan Woetzel <jw -at- mip.informatik.uni-kiel.de> (07/2003)",
	"assets/modules.json.WriteBasicConfigVersionFile": "版本 3.0 後已淘汰: 使用來自模組 CMakePackageConfigHelpers 的相同命令 write_basic_package_version_file()。",
	"assets/modules.json.WriteCompilerDetectionHeader": "此模組提供函式 write_compiler_detection_header()。"
}