/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/modules.json.AddFileDependencies": "ソース ファイルに依存関係を追加します。",
	"assets/modules.json.AndroidTestUtilities": "指定したデータを Android デバイスに自動的に読み込むテストを作成します。",
	"assets/modules.json.BundleUtilities": "スタンドアロン バンドル アプリケーションのアセンブルに役立つ関数。",
	"assets/modules.json.CheckCCompilerFlag": "C コンパイラが特定のフラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckCompilerFlag": "コンパイラが特定のフラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckCSourceCompiles": "指定された C ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。",
	"assets/modules.json.CheckCSourceRuns": "指定された C ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。",
	"assets/modules.json.CheckCXXCompilerFlag": "CXX コンパイラが特定のフラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckCXXSourceCompiles": "指定された C++ ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。",
	"assets/modules.json.CheckCXXSourceRuns": "指定された C++ ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。",
	"assets/modules.json.CheckCXXSymbolExists": "シンボルが関数、変数、またはマクロとして C++ に存在するかどうかを確認します。",
	"assets/modules.json.CheckFortranCompilerFlag": "Fortran コンパイラが特定のフラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckFortranFunctionExists": "Fortran 関数が存在するかどうかを確認します。",
	"assets/modules.json.CheckFortranSourceCompiles": "指定された Fortran ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。",
	"assets/modules.json.CheckFortranSourceRuns": "指定された Fortran ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。",
	"assets/modules.json.CheckFunctionExists": "C 関数をリンクできるかどうかを確認する",
	"assets/modules.json.CheckIncludeFile": "ヘッダー ファイルを C に含めることができるかどうかを確認するマクロを提供します。",
	"assets/modules.json.CheckIncludeFileCXX": "ヘッダー ファイルを CXX に含めることができるかどうかを確認するマクロを提供します。",
	"assets/modules.json.CheckIncludeFiles": "1 つ以上のヘッダー ファイルの一覧を一緒に含めることができるかどうかを確認するマクロを提供します。",
	"assets/modules.json.CheckIPOSupported": "コンパイラが相互的最適化 (IPO/LTO) をサポートしているかどうかを確認します。INTERPROCEDURAL_OPTIMIZATION ターゲット プロパティを有効にする前に、これを使用します。",
	"assets/modules.json.CheckLanguage": "enable_language コマンドまたは project コマンドで言語を有効にできるかどうかを確認します。",
	"assets/modules.json.CheckLibraryExists": "関数が存在するかどうかを確認します。",
	"assets/modules.json.CheckLinkerFlag": "コンパイラが特定のリンク フラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckOBJCCompilerFlag": "Objective-C コンパイラが特定のフラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckOBJCSourceCompiles": "指定された Objective-C ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。",
	"assets/modules.json.CheckOBJCSourceRuns": "指定された Objective-C ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。",
	"assets/modules.json.CheckOBJCXXCompilerFlag": "Objective-C++ コンパイラが特定のフラグをサポートしているかどうかを確認します。",
	"assets/modules.json.CheckOBJCXXSourceCompiles": "指定された Objective-C++ ソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。",
	"assets/modules.json.CheckOBJCXXSourceRuns": "指定された Objective-C++ ソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。",
	"assets/modules.json.CheckPIESupported": "リンカーが実行可能ファイルの位置独立コード (PIE) または位置非依存コード (NO_PIE) をサポートしているかどうかを確認します。これを使用して、実行可能ファイルの POSITION_INDEPENDENT_CODE ターゲット プロパティがリンク時に受け入れられます。",
	"assets/modules.json.CheckPrototypeDefinition": "想定されるプロトタイプが正しいかどうかを確認します。",
	"assets/modules.json.CheckSourceCompiles": "指定されたソースがコンパイルされ、実行可能ファイルにリンクされているかどうかを確認します。",
	"assets/modules.json.CheckSourceRuns": "指定されたソースがコンパイルされ、実行可能ファイルにリンクされ、その後実行できるかどうかを確認します。",
	"assets/modules.json.CheckStructHasMember": "指定された構造体またはクラスに指定されたメンバー変数があるかどうかを確認する",
	"assets/modules.json.CheckSymbolExists": "シンボルが C に関数、変数、またはマクロとして存在するかどうかを確認するマクロを提供します。",
	"assets/modules.json.CheckTypeSize": "型のサイズを確認する",
	"assets/modules.json.CheckVariableExists": "変数が存在するかどうかを確認します。",
	"assets/modules.json.CMakeAddFortranSubdirectory": "Fortran のみのサブディレクトリを追加し、Fortran コンパイラを見つけてビルドします。",
	"assets/modules.json.CMakeBackwardCompatibilityCXX": "一連の下位互換性変数を定義する",
	"assets/modules.json.CMakeDependentOption": "他のオプションに依存するオプションを提供するマクロ。",
	"assets/modules.json.CMakeDetermineVSServicePack": "このモジュールの機能は、コンパイラのバージョン番号を含む CMAKE_<LANG>_COMPILER_VERSION 変数に置き換わりました。",
	"assets/modules.json.CMakeExpandImportedTargets": "このモジュールは、インポートされたターゲットを、try_compile コマンドと try_run コマンドで使用するために、ディスク上で参照する基になるライブラリに拡張するために必要でした。これらのコマンドは、LINK_LIBRARIES オプションでインポートされたライブラリをサポートするようになりました (try_compile 用の CMake 2.8.11 以降、および CMake 3.2 for try_run 以降)。",
	"assets/modules.json.CMakeFindDependencyMacro": "``find_dependency()`` マクロは、パッケージ依存関係の :command:`find_package` 呼び出しをラップします。",
	"assets/modules.json.CMakeFindFrameworks": "OSX フレームワークを検索するためのヘルパー モジュール",
	"assets/modules.json.CMakeFindPackageMode": "このファイルは、--find-package <Find-Package Tool Mode> を使用して呼び出されると、cmake によって実行されます。次の変数が -D を使用して設定されることを想定しています。",
	"assets/modules.json.CMakeForceCompiler": "このモジュールによって提供されるマクロは、CMake がコンパイラ ID を自動的に検出できなかったときに、ツールチェーン ファイルをクロス コンパイルして使用することを意図していました。このモジュールの導入以降、CMake のコンパイラ識別機能が向上し、コンパイラを認識するように教えられるようになりました。さらに、CMake がコンパイラから検出する一連の情報は、これらのマクロを使用してツールチェーン ファイルから提供するには広範すぎるようになりました。",
	"assets/modules.json.CMakeGraphVizOptions": "CMake の組み込みの Graphviz サポート。",
	"assets/modules.json.CMakePackageConfigHelpers": "パッケージを検索して使用するために他のプロジェクトに含めることができる構成ファイルを作成するためのヘルパー関数です。",
	"assets/modules.json.CMakeParseArguments": "このモジュールは、CMake によってネイティブに実装された cmake_parse_arguments コマンドを実装しました。CMake 3.4 以前からコマンドを取得するために含まれるプロジェクトとの互換性を確保するための空のプレースホルダーになりました。",
	"assets/modules.json.CMakePrintHelpers": "プロパティと変数を印刷するための便利な関数。デバッグなどに役立ちます。",
	"assets/modules.json.CMakePrintSystemInformation": "システム情報を印刷します。",
	"assets/modules.json.CMakePushCheckState": "このモジュールでは、CMAKE_PUSH_CHECK_STATE() CMAKE_POP_CHECK_STATE() と CMAKE_RESET_CHECK_STATE() の 3 つのマクロを定義します。これらのマクロは、CMake に付属するさまざまなチェック ファイルで使用される変数 CMAKE_REQUIRED_FLAGS、CMAKE_REQUIRED_DEFINITIONS、CMAKE_REQUIRED_LINK_OPTIONS、CMAKE_REQUIRED_LIBRARIES、CMAKE_REQUIRED_INCLUDES、CMAKE_EXTRA_INCLUDE_FILES の状態を保存、復元、リセット (つまり、コンテンツのクリア) に使用できます。例: check_function_exists() など。変数の内容はスタックにプッシュされ、複数回のプッシュがサポートされます。これは便利です。たとえば、Find-module でこのようなテストを実行する場合は、それらのテストを設定する必要がありますが、Find モジュールを実行した後は、以前と同じ値を持つ必要があります。",
	"assets/modules.json.CMakeVerifyManifest": "CMakeVerifyManifest.cmake",
	"assets/modules.json.CPack": "バイナリ インストーラーとソース パッケージのジェネレーターを構成します。",
	"assets/modules.json.CPackArchive": "CPack アーカイブ ジェネレーターのドキュメントをこちらに移動しました: CPack アーカイブ ジェネレーター",
	"assets/modules.json.CPackBundle": "CPack バンドル ジェネレーターのドキュメントを次に移動しました: CPack バンドル ジェネレーター",
	"assets/modules.json.CPackComponent": "バイナリ インストーラーとソース パッケージのコンポーネントを構成します。",
	"assets/modules.json.CPackCygwin": "CPack Cygwin ジェネレーターのドキュメントを次に移動しました: CPack Cygwin ジェネレーター",
	"assets/modules.json.CPackDeb": "CPack DEB ジェネレーターのドキュメントは、CPack DEB ジェネレーターに移動しました",
	"assets/modules.json.CPackDMG": "CPack DragNDrop ジェネレーターのドキュメントは、CPack DragNDrop ジェネレーターに移動しました",
	"assets/modules.json.CPackFreeBSD": "CPack FreeBSD ジェネレーターのドキュメントをこちらに移動しました: CPack FreeBSD ジェネレーター",
	"assets/modules.json.CPackIFW": "このモジュールは、Qt Installer Framework (QtIFW) で提供されるコマンド ライン ユーティリティの場所を探します。",
	"assets/modules.json.CPackIFWConfigureFile": "このモジュールでは、QtIFW/SDK/Creator スタイルで準備されたファイル テンプレートを構成するための同様の configure_file コマンドを定義します。",
	"assets/modules.json.CPackNSIS": "CPack NSIS ジェネレーターのドキュメントをこちらに移動しました: CPack NSIS ジェネレーター",
	"assets/modules.json.CPackNuGet": "CPack NuGet ジェネレーターのドキュメントをこちらに移動しました: CPack NuGet ジェネレーター",
	"assets/modules.json.CPackProductBuild": "CPack productbuild ジェネレーターのドキュメントは、CPack productbuild ジェネレーターに移動しました",
	"assets/modules.json.CPackRPM": "CPack RPM ジェネレーターのドキュメントをこちらに移動しました: CPack RPM ジェネレーター",
	"assets/modules.json.CPackWIX": "CPack WIX ジェネレーターのドキュメントをこちらに移動しました: CPack WIX ジェネレーター",
	"assets/modules.json.CSharpUtilities": "CSharp/.NET ターゲットの構成を容易にする関数。",
	"assets/modules.json.CTest": "CTest/CDash を使用してテスト用にプロジェクトを構成する",
	"assets/modules.json.CTestCoverageCollectGCOV": "このモジュールは、ctest_coverage_collect_gcov 関数を提供します。",
	"assets/modules.json.CTestScriptMode": "このファイルはスクリプト モード (-S) で ctest によって読み取られます",
	"assets/modules.json.CTestUseLaunchers": "CTEST_USE_LAUNCHERS がオンの場合は、RULE_LAUNCH_* グローバル プロパティを設定します。",
	"assets/modules.json.Dart": "CTest または古い Microsoft Tcl クライアントを使用してテスト用にプロジェクトを構成する",
	"assets/modules.json.DeployQt4": "スタンドアロン Qt4 実行可能ファイルのアセンブルに役立つ関数。",
	"assets/modules.json.Documentation": "このモジュールでは、VTK ドキュメント フレームワークのサポートを提供します。複数のツール (Doxygen、Perl など) に依存しています。",
	"assets/modules.json.ExternalData": "ソース ツリーの外部に格納されているデータ ファイルを管理する",
	"assets/modules.json.ExternalProject": "ExternalProject_Add() 関数は、外部プロジェクトのダウンロード、更新/パッチ、構成、ビルド、インストール、およびテストの手順を実行するためのカスタム ターゲットを作成します",
	"assets/modules.json.FeatureSummary": "有効/無効の機能の概要を生成するための関数。",
	"assets/modules.json.FetchContent": "このモジュールでは、ExternalProject モジュールでサポートされている任意の方法を使用して、構成時にコンテンツを設定できます。ExternalProject_Add() はビルド時にダウンロードされますが、FetchContent モジュールはコンテンツをすぐに使用できるようにし、構成手順で add_subdirectory()、include()、file() 操作などのコマンドでコンテンツを使用できるようにします。",
	"assets/modules.json.FindALSA": "高度な Linux サウンド アーキテクチャ (ALSA) の検索",
	"assets/modules.json.FindArmadillo": "Armadの C++ ライブラリを検索します。Armadillo は、線形代数および科学コンピューティング用のライブラリです。",
	"assets/modules.json.FindASPELL": "ASPELL を探してみる",
	"assets/modules.json.FindAVIFile": "AVIFILE ライブラリを見つけてパスを含める",
	"assets/modules.json.FindBacktrace": "backtrace(3) のプロバイダーを検索します。",
	"assets/modules.json.FindBISON": "bison 実行可能ファイルを検索し、カスタム ビルド規則を生成するマクロを指定します。",
	"assets/modules.json.FindBLAS": "基本的な線形代数サブプログラム (BLAS) ライブラリの検索",
	"assets/modules.json.FindBoost": "Find Boost にはディレクトリとライブラリが含まれます",
	"assets/modules.json.FindBullet": "Bullet 物理演算エンジンを見つけよう",
	"assets/modules.json.FindBZip2": "BZip2 を探してみる",
	"assets/modules.json.FindCABLE": "CABLE を検索する",
	"assets/modules.json.FindCoin3D": "Coin3D (Open Inventor) を検索する",
	"assets/modules.json.FindCUDA": "このモジュールを使用したり、CUDA コードをコンパイルするために find_package(CUDA) を呼び出したりする必要はなくなりました。代わりに、プロジェクト コマンドの最上位の呼び出しで指定された言語間で CUDA を一覧表示するか、CUDA を使用して enable_language コマンドを呼び出します。その後、CUDA (.cu) ソースを他の言語と同様のターゲットに直接追加できます。",
	"assets/modules.json.FindCUDAToolkit": "このスクリプトは NVIDIA CUDA ツールキットと関連ライブラリを検索しますが、特定のプロジェクトに対して CUDA 言語を有効にする必要はありません。このモジュールでは、NVIDIA CUDA サンプルは検索されません。",
	"assets/modules.json.FindCups": "COMMON UNIX Printing System (CUPS) を検索します。",
	"assets/modules.json.FindCURL": "ネイティブの CURL ヘッダーとライブラリを検索します。",
	"assets/modules.json.FindCurses": "ファイルとライブラリを含む問題または ncurses を検索します。",
	"assets/modules.json.FindCVS": "同時実行バージョン システム (CVS) を検索します。",
	"assets/modules.json.FindCxxTest": "CxxTest 単体テスト フレームワークを検索します。",
	"assets/modules.json.FindCygwin": "Cygwin は、Microsoft Windows でネイティブに実行される POSIX 互換環境です",
	"assets/modules.json.FindDart": "DART を検索する",
	"assets/modules.json.FindDCMTK": "DICOM ToolKit (DCMTK) ライブラリとアプリケーションを検索する",
	"assets/modules.json.FindDevIL": "このモジュールは、開発者のイメージ ライブラリを検索します。https://openil.sourceforge.net/",
	"assets/modules.json.FindDoxygen": "Doxygen はドキュメント生成ツールです (https://www.doxygen.nl を参照)。このモジュールは、Doxygen と、サポートされているいくつかのオプション ツールを探します。",
	"assets/modules.json.FindEnvModules": "環境モジュールの実装を見つけ、それらを使用するために CMake スクリプトでコマンドを使用できるようにします。これは、Lua ベースの Lmod と TCL ベースの EnvironmentModules の両方と互換性があります。",
	"assets/modules.json.FindEXPAT": "ネイティブ Expat ヘッダーとライブラリを検索します。Expat は、C で記述されたストリーム指向の XML パーサー ライブラリです。",
	"assets/modules.json.FindFLEX": "Fast Lexical Analyzer (Flex) 実行可能ファイルを見つけ、カスタム ビルドルールを生成するためのマクロを提供します",
	"assets/modules.json.FindFLTK": "Fast Light Toolkit (FLTK) ライブラリを検索する",
	"assets/modules.json.FindFLTK2": "ネイティブ FLTK 2.0 インクルードとライブラリを検索する",
	"assets/modules.json.FindFontconfig": "Fontconfig ヘッダーとライブラリを検索します。",
	"assets/modules.json.FindFreetype": "FreeType フォント レンダラーに含まれるライブラリを検索します。",
	"assets/modules.json.FindGCCXML": "GCC-XML フロントエンド実行可能ファイルを検索します。",
	"assets/modules.json.FindGDAL": "地理空間データ抽象化ライブラリ (GDAL) を検索します。",
	"assets/modules.json.FindGettext": "GNU gettext ツールを検索する",
	"assets/modules.json.FindGIF": "これにより、グラフィックス交換形式 (GIF) ライブラリ (giflib) が検索されます",
	"assets/modules.json.FindGit": "モジュールでは、次の変数が定義されます。",
	"assets/modules.json.FindGLEW": "OpenGL Extension Wrangler Library (GLEW) を検索する",
	"assets/modules.json.FindGLUT": "OpenGL Utility Toolkit (GLUT) ライブラリとインクルード ファイルを検索します。",
	"assets/modules.json.FindGnuplot": "このモジュールは gnuplot を探します",
	"assets/modules.json.FindGnuTLS": "GNU トランスポート層セキュリティ ライブラリ (gnutls) を検索する",
	"assets/modules.json.FindGSL": "ネイティブ GNU Scientific Library (GSL) のインクルードとライブラリを検索します。",
	"assets/modules.json.FindGTest": "Google C++ テスト フレームワークを検索します。",
	"assets/modules.json.FindGTK": "GTK、glib、GTKGLArea を検索する",
	"assets/modules.json.FindGTK2": "GTK2 ウィジェット ライブラリとその他のいくつかのオプション コンポーネント (gtkmm、glade、gldemm など) を検索します。",
	"assets/modules.json.FindHDF5": "配列データを記述する自己記述用のライブラリである階層データ形式 (HDF5) を検索します。",
	"assets/modules.json.FindHg": "水銀作業のコピーから情報を抽出します。",
	"assets/modules.json.FindHSPELL": "ヘブライ語のスペル チェック (Hspell) と形態論エンジンを探してみてください。",
	"assets/modules.json.FindHTMLHelp": "このモジュールは、Microsoft HTML ヘルプ コンパイラを検索します",
	"assets/modules.json.FindIce": "ZeroC Internet Communication Engine (ICE) プログラム、ライブラリ、およびデータファイルを検索します。",
	"assets/modules.json.FindIconv": "このモジュールは、システム上の iconv() POSIX.1 関数を検出します。これらの関数は、通常の C ライブラリまたは追加のライブラリの形式で外部で提供される場合があります。",
	"assets/modules.json.FindIcotool": "icotool を検索する",
	"assets/modules.json.FindICU": "Unicode (ICU) ライブラリとプログラムの International Components を検索します。",
	"assets/modules.json.FindImageMagick": "ラスター イメージを表示、変換、操作するためのソフトウェア スイートである ImageMagick を検索します。",
	"assets/modules.json.FindIntl": "Gettext libintl ヘッダーとライブラリを検索します。",
	"assets/modules.json.FindITK": "このモジュールはもう存在しません。",
	"assets/modules.json.FindJasper": "JPEG2000 ライブラリを検索します。",
	"assets/modules.json.FindJava": "Java を検索する",
	"assets/modules.json.FindJNI": "Java Native Interface (JNI) のヘッダーとライブラリを検索します。",
	"assets/modules.json.FindJPEG": "Joint Photographic Experts Group (JPEG) ライブラリ (libjpeg) を検索する",
	"assets/modules.json.FindKDE3": "KDE3 インクルード ディレクトリとライブラリ ディレクトリ、KDE プリプロセッサを見つけ、いくつかのマクロを定義します",
	"assets/modules.json.FindKDE4": "KDE4 を検索し、ソフトウェアをコンパイルするために必要なすべての変数とマクロを指定します。次のディレクトリ内の KDE 4 を指定された順序で検索します。",
	"assets/modules.json.FindLAPACK": "線形代数 PACKage (LAPACK) ライブラリを検索する",
	"assets/modules.json.FindLATEX": "LaTeX を検索する",
	"assets/modules.json.FindLibArchive": "ライブラリ ライブラリとヘッダーを検索します。Libarchive は、複数形式のアーカイブおよび圧縮ライブラリです。",
	"assets/modules.json.FindLibinput": "libinput ヘッダーとライブラリを検索します。",
	"assets/modules.json.FindLibLZMA": "LZMA 圧縮アルゴリズムのヘッダーとライブラリを検索します。",
	"assets/modules.json.FindLibXml2": "XML 処理ライブラリ (libxml2) を検索します。",
	"assets/modules.json.FindLibXslt": "XSL 変換、拡張スタイルシート言語変換 (XSLT) ライブラリ (LibXslt) を検索する",
	"assets/modules.json.FindLTTngUST": "Linux Trace Toolkit Next Generation (LTTng-UST) ライブラリを検索します。",
	"assets/modules.json.FindLua": "Lua ライブラリを検索します。",
	"assets/modules.json.FindLua50": "Lua ライブラリを検索します。",
	"assets/modules.json.FindLua51": "Lua ライブラリを検索します。このモジュールでは、次を定義します。",
	"assets/modules.json.FindMatlab": "Matlab または Matlab Compiler Runtime (MCR) を見つけ、Matlab ツール、ライブラリ、コンパイラを CMake に提供します。",
	"assets/modules.json.FindMFC": "Windows で Microsoft Foundation Class ライブラリ (MFC) を検索する",
	"assets/modules.json.FindMotif": "Motif (または lesstif) を見つけようとします",
	"assets/modules.json.FindMPEG": "ネイティブ MPEG インクルードとライブラリを検索する",
	"assets/modules.json.FindMPEG2": "ネイティブ MPEG2 インクルードとライブラリを検索する",
	"assets/modules.json.FindMPI": "メッセージ パッシング インターフェイス (MPI) の実装を検索します。",
	"assets/modules.json.FindMsys": "Microsoft Windows でネイティブに実行される POSIX 互換環境である MSYS を検索する",
	"assets/modules.json.FindODBC": "Open Database Connectivity (ODBC) インクルード ディレクトリとライブラリを検索します。",
	"assets/modules.json.FindOpenACC": "コンパイラによる OpenACC サポートを検出します。",
	"assets/modules.json.FindOpenAL": "Open Audio Library (OpenAL) を検索します。",
	"assets/modules.json.FindOpenCL": "Open Computing Language (OpenCL) を検索します",
	"assets/modules.json.FindOpenGL": "FindModule for OpenGL and OpenGL Utility Library (GLU)。",
	"assets/modules.json.FindOpenMP": "Open Multi-Processing (OpenMP) のサポートを検索します。",
	"assets/modules.json.FindOpenSceneGraph": "OpenSceneGraph の検索 (3D グラフィックス アプリケーション プログラミング インターフェイス) を検索する",
	"assets/modules.json.FindOpenSP": "OpenSP ライブラリを探してみてください。",
	"assets/modules.json.FindOpenSSL": "OpenSSL 暗号化ライブラリを検索します。",
	"assets/modules.json.FindOpenThreads": "OpenThreads は C++ ベースのスレッド ライブラリです。その最大のユーザーベースは OpenSceneGraph のように見えるので、OSGDIR を環境パスとして受け入れることに気付くかもしれません。ここでは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートのこの部分について考えてみましょう。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。",
	"assets/modules.json.Findosg": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgAnimation": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgDB": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgFX": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgGA": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgIntrospection": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgManipulator": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgParticle": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgPresentation": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgProducer": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgQt": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgShadow": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgSim": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgTerrain": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgText": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgUtil": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgViewer": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgVolume": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.FindosgWidget": "これは、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートの一部です。各コンポーネントは個別であるため、各モジュールにオプトインする必要があります。また、これらのモジュールでは実行されないため、OpenGL と OpenThreads (および必要に応じてプロデューサー) をオプトインする必要があります。これは、特定のコンポーネントをオプトアウトしたり、特定のモジュールの Find 動作を変更したりする必要がある場合に備えて、独自のシステム部分を 1 つずつ制御できるようにするためです (例えば、おそらく、既定の FindOpenGL モジュールが例としてシステムで動作しないためです)。すべてを含むより便利なモジュールを使用する場合は、Findosg*.cmake モジュールの代わりに FindOpenSceneGraph を使用します。",
	"assets/modules.json.Findosg_functions": "この CMake ファイルには、OSG ライブラリとノードキットの検索に役立つ 2 つのマクロが含まれています。完全なドキュメントについては、FindOpenSceneGraph を参照してください。",
	"assets/modules.json.FindPackageHandleStandardArgs": "このモジュールは、find_package(<PackageName>) 呼び出しを実装する Find Modules で使用することを目的とした関数を提供します。",
	"assets/modules.json.FindPackageMessage": "この関数は、FindXXX.cmake モジュール ファイルで使用することを目的としています。一意の検索結果ごとにメッセージが 1 回出力されます。これは、パッケージが見つかった場所をユーザーに伝える場合に便利です。最初の引数は、パッケージの名前 (XXX) を指定します。2 番目の引数は、表示するメッセージを指定します。3 番目の引数は、検索結果に関する詳細を一覧表示して、変更した場合にメッセージが再び表示されるようにします。マクロは、find_package コマンドに対する QUIET 引数にも従います。",
	"assets/modules.json.FindPatch": "モジュールでは、次の変数が定義されます。",
	"assets/modules.json.FindPerl": "Perl インタープリターを検索します。",
	"assets/modules.json.FindPerlLibs": "Perl ライブラリを検索する",
	"assets/modules.json.FindPHP4": "PHP4 を検索する",
	"assets/modules.json.FindPhysFS": "PhysFS ライブラリを検索します。このモジュールは以下を定義します:",
	"assets/modules.json.FindPike": "Pike を検索する",
	"assets/modules.json.FindPkgConfig": "CMake 用の pkg-config モジュール。",
	"assets/modules.json.FindPNG": "PNG 画像形式の公式リファレンス ライブラリである libpng を検索します。",
	"assets/modules.json.FindPostgreSQL": "PostgreSQL のインストールを検索します。",
	"assets/modules.json.FindProducer": "プロデューサーは OpenSceneGraph の直接の一部ではありませんが、プライマリ ユーザーは OSG であるため、OpenSceneGraph コンポーネントの検索に使用される Findosg* スイートのこの部分について考えてみましょう。OSGDIR を環境パスとして受け入れることがわかります。",
	"assets/modules.json.FindProtobuf": "Google プロトコル バッファー ライブラリを見つけて構成します。",
	"assets/modules.json.FindPython": "Python インタープリター、コンパイラ、開発環境 (ディレクトリとライブラリを含む) を検索します。",
	"assets/modules.json.FindPython2": "Python 2 インタープリター、コンパイラ、開発環境 (ディレクトリとライブラリを含む) を検索します。",
	"assets/modules.json.FindPython3": "Python 3 インタープリター、コンパイラ、開発環境 (ディレクトリとライブラリを含む) を検索します。",
	"assets/modules.json.FindPythonInterp": "Python インタープリターを検索する",
	"assets/modules.json.FindPythonLibs": "Python ライブラリを検索する",
	"assets/modules.json.FindQt": "インストールされているすべてのバージョンの Qt3 または Qt4 を検索します。",
	"assets/modules.json.FindQt3": "Qt インクルード パスとライブラリを検索する",
	"assets/modules.json.FindQt4": "このモジュールを使用して Qt4 を検索できます。最も重要な問題は、Qt4 qmake がシステム パスを介して使用できるということです。この qmake は、基本的に他のすべてを検出するために使用されます。このモジュールでは、インポートされたターゲット、マクロ、変数の数を定義します。",
	"assets/modules.json.FindQuickTime": "QuickTime を検索する このモジュールでは、次の定義が定義されています。",
	"assets/modules.json.FindRTI": "M&S HLA RTI ライブラリを検索してみてください",
	"assets/modules.json.FindRuby": "Ruby を検索する",
	"assets/modules.json.FindSDL": "SDL ライブラリの検索",
	"assets/modules.json.FindSDL_gfx": "SDL_gfx ライブラリを検索する",
	"assets/modules.json.FindSDL_image": "SDL_image ライブラリを検索する",
	"assets/modules.json.FindSDL_mixer": "SDL_mixer ライブラリを検索する",
	"assets/modules.json.FindSDL_net": "SDL_net ライブラリを検索する",
	"assets/modules.json.FindSDL_sound": "SDL_sound ライブラリを検索します",
	"assets/modules.json.FindSDL_ttf": "SDL_ttf ライブラリを検索する",
	"assets/modules.json.FindSelfPackers": "upx を検索する",
	"assets/modules.json.FindSQLite3": "SQLite ライブラリ (v3) の検索",
	"assets/modules.json.FindSquish": "-- 一般的な使用",
	"assets/modules.json.FindSubversion": "サブバージョン作業コピーから情報を抽出する",
	"assets/modules.json.FindSWIG": "Simplified Wrapper and Interface Generator (SWIG) 実行可能ファイルを検索します。",
	"assets/modules.json.FindTCL": "TK_INTERNAL_PATH は削除されました。",
	"assets/modules.json.FindTclsh": "tclsh を検索する",
	"assets/modules.json.FindTclStub": "TCL_STUB_LIBRARY_DEBUG と TK_STUB_LIBRARY_DEBUG が削除されました。",
	"assets/modules.json.FindThreads": "このモジュールは、システムのスレッド ライブラリを決定します。",
	"assets/modules.json.FindTIFF": "TIFF ライブラリ (libtiff、https://libtiff.gitlab.io/libtiff/) を検索します。",
	"assets/modules.json.FindUnixCommands": "Cygwin のコマンドを含む Unix コマンドを検索する",
	"assets/modules.json.FindVTK": "このモジュールはもう存在しません。",
	"assets/modules.json.FindVulkan": "Vulkan は、オーバーヘッドの少ないクロスプラットフォームの 3D グラフィックスおよびコンピューティング API です。",
	"assets/modules.json.FindWget": "wget を検索する",
	"assets/modules.json.FindWish": "欲しい物リストのインストールを検索する",
	"assets/modules.json.FindwxWidgets": "wxWidgets (別名、wxWindows) のインストールを検索します。",
	"assets/modules.json.FindwxWindows": "wxWindows (wxWidgets) のインストールを検索する",
	"assets/modules.json.FindX11": "X11 インストールを検索する",
	"assets/modules.json.FindXalanC": "Apache Xalan-C++ XSL 変換プロセッサのヘッダーとライブラリを検索します。",
	"assets/modules.json.FindXCTest": "XCTest バンドルの作成と実行に役立つ関数。",
	"assets/modules.json.FindXercesC": "XML パーサーのヘッダーとライブラリを検証する Apache Xerces-C++ を検索します。",
	"assets/modules.json.FindXMLRPC": "xmlrpc を検索する",
	"assets/modules.json.FindZLIB": "ネイティブ ZLIB インクルードとライブラリを検索します。",
	"assets/modules.json.FortranCInterface": "Fortran/C インターフェイスの検出",
	"assets/modules.json.GenerateExportHeader": "ライブラリのエクスポート マクロを生成するための関数",
	"assets/modules.json.GetPrerequisites": "実行可能ファイルの前提条件を分析および一覧表示する関数。",
	"assets/modules.json.GNUInstallDirs": "GNU 標準インストール ディレクトリを定義する",
	"assets/modules.json.GoogleTest": "このモジュールでは、Google Test インフラストラクチャの使用に役立つ関数を定義します。テストを追加するための 2 つのメカニズムが用意されています。gtest_add_tests は、もともと find_package(GTest) を介して、しばらくの間使用されています。gtest_discover_tests は CMake 3.10 で導入されました。",
	"assets/modules.json.InstallRequiredSystemLibraries": "コンパイラが提供するシステム ランタイム ライブラリを検索し、それらにインストール規則を追加するには、このモジュールを含めます。モジュールを含めて動作を調整する前に、いくつかの省略可能な変数を設定できます。",
	"assets/modules.json.MacroAddFileDependencies": "新しいコードではこのコマンドを使用しないでください。これは単なるラッパーです。",
	"assets/modules.json.ProcessorCount": "ProcessorCount(var)",
	"assets/modules.json.SelectLibraryConfigurations": "このマクロは、引数としてライブラリのベース名を受け取り、変数に適切な値を選択します",
	"assets/modules.json.SquishTestScript": "このスクリプトは、Squish を使用して GUI テストを起動します。スクリプトを直接呼び出すべきではありません。代わりに、FindSquish.cmake で定義されている SQUISH_ADD_TEST マクロを使用してアクセスする必要があります。",
	"assets/modules.json.TestBigEndian": "ターゲット アーキテクチャがビッグ エンディアンかリトル エンディアンかを確認します。",
	"assets/modules.json.TestCXXAcceptsFlag": "CXX コンパイラがフラグを受け入れるかどうかを確認します。",
	"assets/modules.json.TestForANSIForScope": "ANSI でスコープのサポートを確認する",
	"assets/modules.json.TestForANSIStreamHeaders": "ANSI ストリーム ヘッダー iostream などのコンパイラ サポートをテストします。",
	"assets/modules.json.TestForSSTREAM": "ANSI sstream ヘッダーのコンパイラ サポートのテスト",
	"assets/modules.json.TestForSTDNamespace": "std:: 名前空間のサポートのテスト",
	"assets/modules.json.UseEcos": "このモジュールでは、eCos アプリケーションをビルドするために必要な変数とマクロを定義します。",
	"assets/modules.json.UseJava": "このファイルは Java のサポートを提供します。FindJava は既に読み込まれていると見なされます。CMake プロジェクトに Java を読み込む方法については、「FindJava」を参照してください。",
	"assets/modules.json.UseJavaClassFilelist": "このモジュールは以前は誤って文書化されており、プロジェクト コードによる直接インクルードを意図したことはありませんでした。:module:`UseJava` モジュールを参照してください。",
	"assets/modules.json.UseJavaSymlinks": "このモジュールは以前は誤って文書化されており、プロジェクト コードによる直接インクルードを意図したことはありませんでした。:module:`UseJava` モジュールを参照してください。",
	"assets/modules.json.UsePkgConfig": "CMake 用の古い pkg-config モジュールでは、代わりに FindPkgConfig を使用してください。",
	"assets/modules.json.UseSWIG": "このファイルは、SWIG のサポートを提供します。FindSWIG モジュールが既に読み込まれているものと想定されます。",
	"assets/modules.json.UsewxWidgets": "利便性には、wxWidgets ライブラリの使用が含まれます。",
	"assets/modules.json.Use_wxWindows": "この利便性には、wxWindows がインストールされているかどうかを検出し、適切な libs、incdirs、フラグなどを設定します。作成者 Jan Woetzel <jw -at- mip.informatik.uni-kiel.de> (07/2003)",
	"assets/modules.json.WriteBasicConfigVersionFile": "バージョン 3.0 以降では非推奨: モジュール CMakePackageConfigHelpers の同じコマンド write_basic_package_version_file() を使用します。",
	"assets/modules.json.WriteCompilerDetectionHeader": "このモジュールは、関数 write_compiler_detection_header() を提供します。"
}