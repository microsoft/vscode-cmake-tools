/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/variables.json.ANDROID": "ターゲット システム (CMAKE_SYSTEM_NAME) が Android である場合は 1 に設定します。",
	"assets/variables.json.APPLE": "ターゲット システムが Apple プラットフォーム (macOS、iOS、tvOS、visionOS、watchOS) である場合は、true に設定します。",
	"assets/variables.json.BORLAND": "Borland コンパイラが使用されている場合は true です。",
	"assets/variables.json.BSD": "ターゲット システムが BSD の場合は文字列値に設定します。この値は、DragonFlyBSD、FreeBSD、OpenBSD、または NetBSD のいずれかになります。",
	"assets/variables.json.BUILD_SHARED_LIBS": "明示的なライブラリの種類を指定せずに呼び出された場合は、STATIC ライブラリではなく SHARED ライブラリを既定にするように add_library に指示します。",
	"assets/variables.json.CACHE": "キャッシュ変数を読み取る演算子。",
	"assets/variables.json.CMAKE_ABSOLUTE_DESTINATION_FILES": "ABSOLUTE DESTINATION パスを使用してインストールされたファイルのリストです。",
	"assets/variables.json.CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY": "add_custom_command で DEPENDS_EXPLICIT_ONLY オプションを既定で有効にするかどうかを指定します。",
	"assets/variables.json.CMAKE_ADSP_ROOT": ":ref:`Cross Compiling for ADSP SHARC/Blackfin` の場合、この変数は最新の CCES または VDSP++ インストールへの絶対パスを保持します。ディレクトリには、cc21k.exe コンパイラと ccblkfn.exe コンパイラが含まれている必要があります。これは、CCES または VDSP++ の既定のインストールが見つかった場合に自動的に設定されます。",
	"assets/variables.json.CMAKE_AIX_EXPORT_ALL_SYMBOLS": "AIX_EXPORT_ALL_SYMBOLS ターゲット プロパティの既定値。この変数は、ターゲットの作成時に各ターゲットのプロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": "ANDROID_ANT_ADDITIONAL_OPTIONS ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_API": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、ANDROID_API ターゲット プロパティに既定値を指定するためにこの変数を設定できます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_API_MIN": "ANDROID_API_MIN ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_ARCH": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、ANDROID_ARCH ターゲット プロパティに既定値を指定するためにこの変数を設定できます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_ARCH_ABI": "Android 用のクロス コンパイルを実行する場合、この変数は、使用するターゲット アーキテクチャと ABI を指定します。有効な値は次のとおりです。",
	"assets/variables.json.CMAKE_ANDROID_ARM_MODE": "Android 用のクロス コンパイル時に、CMAKE_ANDROID_ARCH_ABI が armeabi アーキテクチャのいずれかに設定されている場合に、32 ビット ARM プロセッサ (-marm) をターゲットにするには、CMAKE_ANDROID_ARM_MODE を ON に設定します。それ以外の場合、既定により 16 ビット Thumb プロセッサ (-mthumb) がターゲットになります。",
	"assets/variables.json.CMAKE_ANDROID_ARM_NEON": "Android 用のクロス コンパイル時に、CMAKE_ANDROID_ARCH_ABI が armeabi-v7a に設定されている場合、ARM NEON デバイスをターゲットにするには、CMAKE_ANDROID_ARM_NEON を ON に設定します。",
	"assets/variables.json.CMAKE_ANDROID_ASSETS_DIRECTORIES": "ANDROID_ASSETS_DIRECTORIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_EXCEPTIONS": "NDK を使用して Android 用のクロス コンパイルを行う場合、例外を有効にするかどうかを指定するためにこの変数を設定できます。",
	"assets/variables.json.CMAKE_ANDROID_GUI": "実行可能ファイルの ANDROID_GUI ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_JAR_DEPENDENCIES": "ANDROID_JAR_DEPENDENCIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_JAR_DIRECTORIES": "ANDROID_JAR_DIRECTORIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_JAVA_SOURCE_DIR": "ANDROID_JAVA_SOURCE_DIR ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": "ANDROID_NATIVE_LIB_DEPENDENCIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": "ANDROID_NATIVE_LIB_DIRECTORIES ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_NDK": "NDK を使用して Android 用のクロス コンパイルを実行する場合、この変数は NDK のルート ディレクトリへの絶対パスを保持します。このディレクトリには、android-<api> ディレクトリを保持しているプラットフォーム サブディレクトリが含まれている必要があります。",
	"assets/variables.json.CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": "NDK を使用して Android 用のクロス コンパイルを実行する場合、統合されたヘッダーではなく、非推奨の API レベルごとのヘッダーを使用するかどうかを指定するためにこの変数を設定できます。",
	"assets/variables.json.CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": "NDK を使用して Android 用のクロス コンパイルを実行する場合、この変数は、ホスト上で実行する事前構築済みのツールチェーンへのパスを作成するために、NDK の \"ホスト タグ\" を提供します。",
	"assets/variables.json.CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": "NDK を使用して Android 用のクロス コンパイルを実行する場合、コンパイラとして使用するツールチェーンのバージョンを指定するためにこの変数を設定できます。",
	"assets/variables.json.CMAKE_ANDROID_NDK_VERSION": "NDK を使用して Android 用のクロス コンパイルを行うときに、Android NDK バージョン 11 以降を使用している場合は、NDK のバージョン番号を報告するために CMake によってこの変数が提供されます。",
	"assets/variables.json.CMAKE_ANDROID_PROCESS_MAX": "ANDROID_PROCESS_MAX ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_PROGUARD": "ANDROID_PROGUARD ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_PROGUARD_CONFIG_PATH": "ANDROID_PROGUARD_CONFIG_PATH ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_RTTI": "NDK を使用して Android 用のクロス コンパイルを行う場合、RTTI を有効にするかどうかを指定するためにこの変数を設定できます。",
	"assets/variables.json.CMAKE_ANDROID_SECURE_PROPS_PATH": "ANDROID_SECURE_PROPS_PATH ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_SKIP_ANT_STEP": "ANDROID_SKIP_ANT_STEP ターゲット プロパティの既定値。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_ANDROID_STANDALONE_TOOLCHAIN": "スタンドアロンのツールチェーンを使用して Android 用のクロス コンパイルを実行する場合、この変数はツールチェーンのルート ディレクトリへの絶対パスを保持します。指定されたディレクトリには、sysroot サブディレクトリが含まれている必要があります。",
	"assets/variables.json.CMAKE_ANDROID_STL_TYPE": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、ANDROID_STL_TYPE ターゲット プロパティに既定値を指定するためにこの変数を設定できます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_APPBUNDLE_PATH": "find_program および find_package のコマンドで使用される、macOS アプリケーション バンドルの検索パスを指定するディレクトリをセミコロンで区切った一覧。",
	"assets/variables.json.CMAKE_APPLE_SILICON_PROCESSOR": "macOS を実行している Apple シリコン ホストでは、CMAKE_HOST_SYSTEM_PROCESSOR のために使用するアーキテクチャを CMake に対して指定するために、この変数を設定してください。値は arm64 または x86_64 である必要があります。",
	"assets/variables.json.CMAKE_AR": "スタティック ライブラリ用のアーカイブ ツールの名前。",
	"assets/variables.json.CMAKE_ARCHIVE_OUTPUT_DIRECTORY": "ビルド時にすべての ARCHIVE ターゲット ファイルを配置する場所。",
	"assets/variables.json.CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG": "特定の構成用にビルドするときにすべての ARCHIVE ターゲット ファイルを配置する場所。",
	"assets/variables.json.CMAKE_ARGC": "スクリプト モードで CMake に渡されたコマンド ライン引数の数。",
	"assets/variables.json.CMAKE_ARGV0": "スクリプト モードで CMake に渡されたコマンド ライン引数。",
	"assets/variables.json.CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": "この変数は、すべてのターゲットの作成時にそれらに対し AUTOGEN_BETTER_GRAPH_MULTI_CONFIG プロパティを初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX": "コマンド ラインにすべての引数を渡すのではなく、Windows での応答ファイルの使用をトリガーする autogen ターゲット (moc または uic など) のコマンド ラインの長さの制限。",
	"assets/variables.json.CMAKE_AUTOGEN_ORIGIN_DEPENDS": "元のターゲットの依存関係を対応する <ORIGIN>_autogen ターゲットに転送するためのスイッチ。",
	"assets/variables.json.CMAKE_AUTOGEN_PARALLEL": "AUTOMOC と AUTOUIC を使用しているときに開始する並列の moc または uic プロセスの数です。",
	"assets/variables.json.CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE": "この変数は、AUTOGEN_USE_SYSTEM_INCLUDE プロパティを作成時にすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_AUTOGEN_VERBOSE": "AUTOMOC、AUTOUIC、AUTORCC の詳細レベルを設定します。正の整数値またはブール値 true を指定すると、AUTO* ジェネレーターから追加の処理情報が出力されます。",
	"assets/variables.json.CMAKE_AUTOMOC": "Qt ターゲットに対して自動的に moc を処理するかどうか。",
	"assets/variables.json.CMAKE_AUTOMOC_COMPILER_PREDEFINES": "この変数は、すべてのターゲットで AUTOMOC_COMPILER_PREDEFINES プロパティを初期化するために使用します。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_AUTOMOC_DEPEND_FILTERS": "moc ファイルに対する追加の依存関係としてソース コードからファイル名を抽出するために CMAKE_AUTOMOC によって使用されるフィルター定義です。",
	"assets/variables.json.CMAKE_AUTOMOC_EXECUTABLE": "この変数は、AUTOMOC_EXECUTABLE プロパティをすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_AUTOMOC_MACRO_NAMES": "C++ ファイルを moc によって処理する必要があるかどうかを判断するために CMAKE_AUTOMOC によって使用される、マクロ名をセミコロンで区切った一覧。",
	"assets/variables.json.CMAKE_AUTOMOC_MOC_OPTIONS": "CMAKE_AUTOMOC 使用時の moc に対する追加のオプション。",
	"assets/variables.json.CMAKE_AUTOMOC_PATH_PREFIX": "AUTOMOC が有効にされた Qt ターゲットで moc のために-p パス プレフィックス オプションを生成するかどうか。",
	"assets/variables.json.CMAKE_AUTOMOC_RELAXED_MODE": "automoc モードを、厳密なものと厳密でないものとで切り替えます。",
	"assets/variables.json.CMAKE_AUTORCC": "Qt ターゲットに対して自動的に rcc を処理するかどうか。",
	"assets/variables.json.CMAKE_AUTORCC_EXECUTABLE": "この変数は、AUTORCC_EXECUTABLE プロパティをすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_AUTORCC_OPTIONS": "CMAKE_AUTORCC 使用時の rcc に対する追加のオプション。",
	"assets/variables.json.CMAKE_AUTOUIC": "Qt ターゲットに対して自動的に uic を処理するかどうか。",
	"assets/variables.json.CMAKE_AUTOUIC_EXECUTABLE": "この変数は、AUTOUIC_EXECUTABLE プロパティをすべてのターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_AUTOUIC_OPTIONS": "CMAKE_AUTOUIC 使用時の uic に対する追加のオプション。",
	"assets/variables.json.CMAKE_AUTOUIC_SEARCH_PATHS": "含まれる .ui ファイルを検索するために CMAKE_AUTOUIC によって使用される検索パスの一覧。",
	"assets/variables.json.CMAKE_BACKWARDS_COMPATIBILITY": "非推奨。CMake ポリシー CMP0001 のドキュメントをご覧ください。",
	"assets/variables.json.CMAKE_BINARY_DIR": "ビルド ツリーの最上位レベルのパス。",
	"assets/variables.json.CMAKE_BUILD_RPATH": "ビルド ツリー内でリンクされるバイナリに追加するランタイム パス (RPATH) エントリを指定する、セミコロンで区切った一覧 (これをサポートするプラットフォームの場合)。これらのエントリは、インストール ツリー内のバイナリには使用されません。CMAKE_INSTALL_RPATH 変数も参照してください。",
	"assets/variables.json.CMAKE_BUILD_RPATH_USE_ORIGIN": "ビルド RPATH に相対パスを使用するかどうか。",
	"assets/variables.json.CMAKE_BUILD_TOOL": "この変数は下位互換性の目的でのみ存在します。CMAKE_MAKE_PROGRAM と同じ値が含まれています。代わりに、その変数を使用してください。",
	"assets/variables.json.CMAKE_BUILD_TYPE": "単一構成ジェネレーター (Makefile Generators や Ninja など) のビルドの種類を指定します。一般的な値には、Debug、Release、RelWithDebInfo、MinSizeRel などがありますが、カスタム ビルドの種類を定義することもできます。",
	"assets/variables.json.CMAKE_BUILD_WITH_INSTALL_NAME_DIR": "ビルド ツリー内のターゲットで INSTALL_NAME_DIR を使用するかどうか。",
	"assets/variables.json.CMAKE_BUILD_WITH_INSTALL_RPATH": "RPATH のインストール パスを使用します。",
	"assets/variables.json.CMAKE_CACHEFILE_DIR": "この変数は CMake によって内部的に使用され、ビルド ツリーの最初の構成中に設定されることはありません。設定された場合、CMAKE_BINARY_DIR と同じ値になります。代わりにこの変数を使用してください。",
	"assets/variables.json.CMAKE_CACHE_MAJOR_VERSION": "CMakeCache.txt ファイルを作成するために使用した CMake のメジャー バージョン",
	"assets/variables.json.CMAKE_CACHE_MINOR_VERSION": "CMakeCache.txt ファイルを作成するために使用した CMake のマイナー バージョン",
	"assets/variables.json.CMAKE_CACHE_PATCH_VERSION": "CMakeCache.txt ファイルを作成するために使用した CMake のパッチ バージョン",
	"assets/variables.json.CMAKE_CFG_INTDIR": "構成ごとの出力サブディレクトリに対するビルド時参照。",
	"assets/variables.json.CMAKE_CLANG_VFS_OVERLAY": "clang-cl を使用して Windows 用のクロス コンパイルを行う場合に、この変数は、clang 仮想ファイル システム yaml ファイルを指す絶対パスにすることができます。これにより、clang-cl では、大文字と小文字を区別するファイル システム上で Windows ヘッダー名を解決できるようになります。",
	"assets/variables.json.CMAKE_CL_64": "お勧めしません。代わりに CMAKE_SIZEOF_VOID_P を使用してください。",
	"assets/variables.json.CMAKE_CODEBLOCKS_COMPILER_ID": "生成された CodeBlocks プロジェクト ファイル内のコンパイラ ID を変更します。",
	"assets/variables.json.CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": "CodeBlocks ジェネレーターがプロジェクト ファイルを作成する方法を変更します。",
	"assets/variables.json.CMAKE_CODELITE_USE_TARGETS": "CodeLite ジェネレーターがプロジェクト ファイルを作成する方法を変更します。",
	"assets/variables.json.CMAKE_COLOR_DIAGNOSTICS": "全体的な色診断を有効にします。",
	"assets/variables.json.CMAKE_COLOR_MAKEFILE": "Makefile ジェネレーターの使用時にカラー出力を有効にします。",
	"assets/variables.json.CMAKE_COMMAND": "cmake 実行可能ファイルの完全なパス。",
	"assets/variables.json.CMAKE_COMPILER_2005": "Microsoft の Visual Studio 2005 コンパイラの使用",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUCC": "C コンパイラが GNU の場合、true。",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUCXX": "C++ (CXX) コンパイラが GNU の場合、true。",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUG77": "Fortran コンパイラが GNU の場合、true。",
	"assets/variables.json.CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの出力ディレクトリ。",
	"assets/variables.json.CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの、構成ごとの出力ディレクトリ。",
	"assets/variables.json.CMAKE_COMPILE_WARNING_AS_ERROR": "コンパイル時の警告をエラーとして扱うかどうかを指定します。",
	"assets/variables.json.CMAKE_CONFIGURATION_TYPES": "セミコロン区切りリストとしてのマルチ構成ジェネレーター (Visual Studio、Xcode、Ninja Multi-Config など) で使用可能なビルドの種類 (構成) を指定します。一般的なエントリには、Debug、Release、RelWithDebInfo、MinSizeRel などがありますが、カスタム ビルドの種類を定義することもできます。",
	"assets/variables.json.CMAKE_CONFIG_POSTFIX": "構成 <CONFIG> の下にあるライブラリのファイル名の既定接尾語。",
	"assets/variables.json.CMAKE_CPACK_COMMAND": "CMake と一緒にインストールされた cpack コマンドへの完全なパス。",
	"assets/variables.json.CMAKE_CROSSCOMPILING": "この変数は、クロス コンパイルであるかどうかを示すために CMake によって設定されますが、以下で説明する制限事項に注意してください。",
	"assets/variables.json.CMAKE_CROSSCOMPILING_EMULATOR": "この変数は、CMAKE_CROSSCOMPILING がオンの場合にのみ使用されます。ターゲット システム用にビルドされた実行可能ファイルを実行できる、ホスト システム上のコマンドを指す必要があります。",
	"assets/variables.json.CMAKE_CROSS_CONFIGS": "Ninja マルチ構成ジェネレーターの build-<Config>.ninja ファイルから使用できる構成のセミコロンで区切った一覧を指定します。この変数により、クロス構成モードがアクティブになります。この変数で指定した各構成のターゲットは、任意の build-<Config>.ninja ファイルからビルドできます。カスタム コマンドでは、build-<Config>.ninja にネイティブな構成が使用されます。これを all に設定すると、CMAKE_CONFIGURATION_TYPES のすべての構成がクロス構成になります。これを指定しないか、空にすると、各 build-<Config>.ninja ファイルには、独自の構成のビルド規則のみが含められます。",
	"assets/variables.json.CMAKE_CTEST_ARGUMENTS": "生成されたビルド システムのテスト (または RUN_TESTS) ターゲットを通じてテストを実行するときに ctest に渡すコマンド ライン引数のセミコロンで区切った一覧を設定します。",
	"assets/variables.json.CMAKE_CTEST_COMMAND": "CMake と一緒にインストールされた ctest コマンドへの完全なパス。",
	"assets/variables.json.CMAKE_CUDA_ARCHITECTURES": "ターゲットの CUDA_ARCHITECTURES プロパティの既定値。",
	"assets/variables.json.CMAKE_CUDA_COMPILE_FEATURES": "CUDA コンパイラに既知の機能の一覧",
	"assets/variables.json.CMAKE_CUDA_EXTENSIONS": "ターゲットの作成時に設定する場合の、CUDA_EXTENSIONS ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_CUDA_HOST_COMPILER": "これは、より一般的な CMAKE_<LANG>_HOST_COMPILER 変数の元の CUDA 固有の名前です。詳細については、後者を参照してください。",
	"assets/variables.json.CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": "定義されている場合、CUDA_RESOLVE_DEVICE_SYMBOLS ターゲット プロパティ向けの既定値。既定では、この変数は定義されていません。",
	"assets/variables.json.CMAKE_CUDA_RUNTIME_LIBRARY": "CUDA のコンパイルとリンク時に使用するための CUDA ランタイム ライブラリを選択します。この変数は、ターゲットの作成時にすべてのターゲットの CUDA_RUNTIME_LIBRARY プロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_CUDA_SEPARABLE_COMPILATION": "CUDA_SEPARABLE_COMPILATION ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_CUDA_STANDARD": "ターゲットの作成時に設定する場合の、CUDA_STANDARD ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_CUDA_STANDARD_REQUIRED": "ターゲットの作成時に設定する場合の、CUDA_STANDARD_REQUIRED ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": "CUDA 言語が有効になっているとき、これにより、CUDA ツールキットから提供される include ディレクトリのセミコロンで区切った一覧が提供されます。この値は、C++ ソース ファイルに CUDA ヘッダーをインクルードするために役立つ場合があります。",
	"assets/variables.json.CMAKE_CURRENT_BINARY_DIR": "現在処理されている binary ディレクトリへのパス。",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION": "関数内でコードを実行するとき、この変数には現在の関数の名前が含まれています。これは、診断やデバッグのためのメッセージに役立つ場合があります。",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_DIR": "関数内でコードを実行するとき、この変数には、現在の関数を定義したリスト ファイルの完全なディレクトリが含まれています。",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_FILE": "関数内でコードを実行するとき、この変数には、現在の関数を定義したリスト ファイルへの完全なパスが含まれています。",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_LINE": "関数内でコードを実行するとき、この変数には、現在の関数が定義されたリスト ファイル内の行番号が含まれています。",
	"assets/variables.json.CMAKE_CURRENT_LIST_DIR": "現在処理されているリスト ファイルの完全なディレクトリ。",
	"assets/variables.json.CMAKE_CURRENT_LIST_FILE": "現在処理されているリスト ファイルへの完全なパス。",
	"assets/variables.json.CMAKE_CURRENT_LIST_LINE": "現在処理されているファイルの行番号。",
	"assets/variables.json.CMAKE_CURRENT_SOURCE_DIR": "現在処理されているソース ディレクトリへのパス。",
	"assets/variables.json.CMAKE_CXX_COMPILER_IMPORT_STD": "現在の C++ ツールチェーンに対してインポート std サポートが存在する C++ 標準レベルの一覧。C++<NN> のサポートは、if コマンドで <NN> IN_LIST CMAKE_CXX_COMPILER_IMPORT_STD 述語を使用して検出できます。",
	"assets/variables.json.CMAKE_CXX_COMPILE_FEATURES": "C++ コンパイラに既知の機能の一覧",
	"assets/variables.json.CMAKE_CXX_EXTENSIONS": "ターゲットの作成時に設定する場合の、CXX_EXTENSIONS ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_CXX_MODULE_STD": "少なくとも cxx_std_23 を持つターゲットにユーティリティ ターゲットを依存関係として追加するかどうか。",
	"assets/variables.json.CMAKE_CXX_SCAN_FOR_MODULES": "モジュールの依存関係について C++ ソース ファイルをスキャンするかどうか。",
	"assets/variables.json.CMAKE_CXX_STANDARD": "ターゲットの作成時に設定する場合の、CXX_STANDARD ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_CXX_STANDARD_REQUIRED": "ターゲットの作成時に設定する場合の、CXX_STANDARD_REQUIRED ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_C_COMPILE_FEATURES": "C コンパイラに対して既知の機能の一覧",
	"assets/variables.json.CMAKE_C_EXTENSIONS": "ターゲットの作成時に設定する場合の、C_EXTENSIONS ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_C_STANDARD": "ターゲットの作成時に設定する場合の、C_STANDARD ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_C_STANDARD_REQUIRED": "ターゲットの作成時に設定する場合の、C_STANDARD_REQUIRED ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_DEBUG_POSTFIX": "変数 CMAKE_<CONFIG>_POSTFIXの確認。",
	"assets/variables.json.CMAKE_DEBUG_TARGET_PROPERTIES": "ターゲット プロパティの出力のトレースを有効にします。",
	"assets/variables.json.CMAKE_DEFAULT_BUILD_TYPE": "Ninja マルチ構成ジェネレーターの build.ninja ファイル内の既定で使用される構成を指定します。この変数を指定した場合、build.ninja では既定で build-<Config>.ninja からのビルド規則が使用されます。すべてのカスタム コマンドは、この構成で実行されます。この変数を指定しない場合、CMAKE_CONFIGURATION_TYPES の最初の項目が代わりに使用されます。",
	"assets/variables.json.CMAKE_DEFAULT_CONFIGS": "Ninja マルチ構成ジェネレーターで :<Config> サフィックスを指定しない場合に、build.ninja 内のターゲットに対してビルドする構成のセミコロンで区切った一覧を指定します。これを all に設定すると、CMAKE_CROSS_CONFIGS からのすべての構成が使用されます。これを指定しない場合は、既定で CMAKE_DEFAULT_BUILD_TYPE になります。",
	"assets/variables.json.CMAKE_DEPENDS_IN_PROJECT_ONLY": "ディレクトリで TRUE に設定した場合、Makefile ジェネレーターによって生成されるビルド システムは、ソース ディレクトリまたはバイナリ ディレクトリのどちらかにあるソース ファイルへの依存関係のみを考慮するようセットアップされます。これらのディレクトリ以外のソース ファイルを変更してもリビルドは行われません。",
	"assets/variables.json.CMAKE_DEPENDS_USE_COMPILER": "メイクファイル ジェネレーターでは、いくつかのコンパイラで、ソースの依存関係がコンパイラ自体によって生成されるようになりました。この変数を FALSE 値を指定して定義すると、従来の動作 (依存関係の検出のために CMake を使用) を復元することができます。",
	"assets/variables.json.CMAKE_DIRECTORY_LABELS": "現在のディレクトリのラベルを指定します。",
	"assets/variables.json.CMAKE_DISABLE_FIND_PACKAGE_PackageName": "find_package 呼び出しを無効にするための変数。",
	"assets/variables.json.CMAKE_DISABLE_PRECOMPILE_HEADERS": "ターゲットの DISABLE_PRECOMPILE_HEADERS の既定値。",
	"assets/variables.json.CMAKE_DLL_NAME_WITH_SOVERSION": "この変数は、WIN32 変数が設定されるときに選択される Windows プラットフォームの共有ライブラリ ターゲットで DLL_NAME_WITH_SOVERSION プロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_DL_LIBS": "dlopen と dlclose が含まれるライブラリの名前。",
	"assets/variables.json.CMAKE_DOTNET_SDK": "ターゲットの DOTNET_SDK プロパティの既定値。",
	"assets/variables.json.CMAKE_DOTNET_TARGET_FRAMEWORK": "ターゲットの DOTNET_TARGET_FRAMEWORK プロパティの既定値。",
	"assets/variables.json.CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": "ターゲットの DOTNET_TARGET_FRAMEWORK_VERSION プロパティの既定値。",
	"assets/variables.json.CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_ECLIPSE_MAKE_ARGUMENTS": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_ECLIPSE_RESOURCE_ENCODING": "このキャッシュ変数を使用すると、生成されるプロジェクト ファイル内の指定した値にリソースのエンコードを設定するように、Eclipse CDT4 プロジェクト ジェネレーターに指示できます。値を指定しない場合、エンコードは設定されません。",
	"assets/variables.json.CMAKE_ECLIPSE_VERSION": "このキャッシュ変数は、Eclipse プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_EDIT_COMMAND": "cmake-gui または ccmake への完全なパス。追加ジェネレーターを使用しない場合は、メイクファイル ジェネレーターと Ninja ジェネレーターに対してのみ定義されます。",
	"assets/variables.json.CMAKE_ENABLE_EXPORTS": "実行可能ファイルから、読み込み可能なモジュールのシンボルをエクスポートするかどうかを指定します。",
	"assets/variables.json.CMAKE_ERROR_DEPRECATED": "非推奨の機能に対してエラーを発行するかどうか。",
	"assets/variables.json.CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "cmake_install.cmake スクリプトに対し、絶対 INSTALL DESTINATION を持つファイルが検出されたらすぐにエラーを出すよう指示します。",
	"assets/variables.json.CMAKE_EXECUTABLE_ENABLE_EXPORTS": "実行可能ファイルから、読み込み可能なモジュールのシンボルをエクスポートするかどうかを指定します。",
	"assets/variables.json.CMAKE_EXECUTABLE_SUFFIX": "このプラットフォーム上の実行可能ファイルのサフィックス。",
	"assets/variables.json.CMAKE_EXECUTABLE_SUFFIX_LANG": "実行可能ファイルが存在する場合に、<LANG> コンパイラ ターゲット アーキテクチャに基づき、そのファイル名の末尾に使用するサフィックス。",
	"assets/variables.json.CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": "この変数を STDERR または STDOUT に設定すると、execute_process 呼び出しに含まれるコマンドが stderr または stdout に出力されます。または、NONE に設定すると、何も出力されません。",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS": "実行可能ファイルの作成に使用するリンカー フラグ。",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_CONFIG": "実行可能ファイルをリンクするときに使用するフラグ。",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT": "ビルド ツリーを初めて構成するときに CMAKE_EXE_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_INIT": "ビルド ツリーを初めて構成するときに CMAKE_EXE_LINKER_FLAGS キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_EXPORT_COMPILE_COMMANDS": "生成中にコンパイル コマンドの出力を有効または無効にします。",
	"assets/variables.json.CMAKE_EXPORT_FIND_PACKAGE_NAME": "EXPORT_FIND_PACKAGE_NAME の値を初期化します。",
	"assets/variables.json.CMAKE_EXPORT_NO_PACKAGE_REGISTRY": "CMP0090 が NEW に設定されていない場合に、エクスポート コマンドを無効にします。",
	"assets/variables.json.CMAKE_EXPORT_PACKAGE_REGISTRY": "CMP0090 が NEW に設定されている場合に、エクスポート コマンドを有効にします。",
	"assets/variables.json.CMAKE_EXTRA_GENERATOR": "プロジェクトのビルドに使用される追加のジェネレーター。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": "共有ライブラリの追加サフィックス。",
	"assets/variables.json.CMAKE_FIND_APPBUNDLE": "この変数は、find_* コマンドが macOS アプリケーション バンドルと unix スタイルのパッケージ コンポーネントをどのように選択するかに影響します。",
	"assets/variables.json.CMAKE_FIND_DEBUG_MODE": "次のコマンドに関する追加の検索呼び出し情報を標準エラーに出力します:",
	"assets/variables.json.CMAKE_FIND_FRAMEWORK": "この変数は、find_* コマンドが macOS フレームワークと unix スタイルのパッケージ コンポーネントをどのように選択するかに影響します。",
	"assets/variables.json.CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": "通常検索される各 lib ディレクトリより前に lib <suffix> ディレクトリを検索するよう find_library コマンドに指示するには、<suffix> を指定します。",
	"assets/variables.json.CMAKE_FIND_LIBRARY_PREFIXES": "ライブラリを探すときに先頭に追加するプレフィックス。",
	"assets/variables.json.CMAKE_FIND_LIBRARY_SUFFIXES": "ライブラリを探すときに末尾に追加するサフィックス。",
	"assets/variables.json.CMAKE_FIND_NO_INSTALL_PREFIX": "CMAKE_SYSTEM_PREFIX_PATH から CMAKE_INSTALL_PREFIX および CMAKE_STAGING_PREFIX 変数の値を除外します。CMake は、一連の依存パッケージをビルドしてそれらを共通のプレフィックスにインストールできるようにするために、既定でこれらのプロジェクトの宛先プレフィックスを CMAKE_SYSTEM_PREFIX_PATH に追加します。この動作を抑制するには、CMAKE_FIND_NO_INSTALL_PREFIX を TRUE に設定します。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NAME": "呼び出し元指定のパッケージ名を記録するための検索モジュールの読み込み中に、find_package コマンドによって定義されます。詳しくは、コマンドの資料を参照してください。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": "既定では、この変数は設定されません。CMAKE_FIND_USE_PACKAGE_REGISTRY と CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY のどちらも設定しない場合は、NO_CMAKE_PACKAGE_REGISTRY オプションを指定しない限り、find_package() ではユーザー パッケージ レジストリが使用されます。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": "既定では、この変数は設定されません。CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY と CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY のどちらも設定しない場合は、NO_CMAKE_SYSTEM_PACKAGE_REGISTRY オプションを指定しない限り、find_package() ではシステム パッケージ レジストリが使用されます。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_PREFER_CONFIG": "モードが指定されていない場合は \"Module\" モードの前に \"Config\" モードを試すように find_package に指示します。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_REDIRECTS_DIR": "この読み取り専用変数は、モジュールまたは構成パッケージ ファイルを他の場所で検索する前に、find_package コマンドが最初にチェックするディレクトリを指定します。このディレクトリ内の構成パッケージ ファイルは、他の Find モジュール ファイルまたは構成パッケージ ファイルよりも常に優先して検出されます。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": "<PackageName>_DIR の値に含まれるシンボリック リンクを解決するように find_package 呼び出しに指示する場合は、TRUE に設定します。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_SORT_DIRECTION": "CMAKE_FIND_PACKAGE_SORT_ORDER によって使用されるソートの方向。次のいずれかの値が想定されます。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_SORT_ORDER": "find_package を使用して見つかるパッケージをソートするための既定の順序。以下のいずれかの値が想定されます。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_TARGETS_GLOBAL": "true に設定すると、find_package によって検出されたすべての IMPORTED ターゲットが GLOBAL スコープに昇格されます。",
	"assets/variables.json.CMAKE_FIND_PACKAGE_WARN_NO_MODULE": "明示的なモードなしで呼び出された場合に警告するよう find_package に指示します。",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH": "ファイル システム上で検索するルート パスのセミコロン区切りリスト。",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": "この変数は、CMAKE_FIND_ROOT_PATH と CMAKE_SYSROOT を FIND_XXX で使用するかどうかを制御します。",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": "CMake 固有の環境変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_PATH": "CMake 固有のキャッシュ変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": "プラットフォーム固有の CMake 変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:",
	"assets/variables.json.CMAKE_FIND_USE_INSTALL_PREFIX": "CMAKE_INSTALL_PREFIX 変数とCMAKE_STAGING_PREFIX 変数内の場所を検索するかどうかについて、次のコマンドの既定の動作を制御します。",
	"assets/variables.json.CMAKE_FIND_USE_PACKAGE_REGISTRY": "ユーザー パッケージ レジストリによって指定されたパスを検索するかどうかについて、find_package コマンドの既定の動作を制御します。",
	"assets/variables.json.CMAKE_FIND_USE_PACKAGE_ROOT_PATH": "<PackageName>_ROOT 変数によって指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:",
	"assets/variables.json.CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": "標準のシステム環境変数で指定されたパスを検索するかどうかについて、次のコマンドの既定の動作を制御します:",
	"assets/variables.json.CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": "find_package コマンドによるシステム パッケージ レジストリの検索を制御します。",
	"assets/variables.json.CMAKE_FOLDER": "フォルダー名を設定します。IDE 内でターゲットを整理するために使用します。",
	"assets/variables.json.CMAKE_Fortran_FORMAT": "Fortran ソース レイアウトを示す FIXED または FREE に設定します。",
	"assets/variables.json.CMAKE_Fortran_MODDIR_DEFAULT": "Fortran の既定のモジュール出力ディレクトリ。",
	"assets/variables.json.CMAKE_Fortran_MODDIR_FLAG": "モジュール出力ディレクトリ用の Fortran フラグ。",
	"assets/variables.json.CMAKE_Fortran_MODOUT_FLAG": "モジュール出力を有効にするための Fortran フラグ。",
	"assets/variables.json.CMAKE_Fortran_MODULE_DIRECTORY": "Fortran のモジュール出力ディレクトリ。",
	"assets/variables.json.CMAKE_Fortran_PREPROCESS": "ターゲットの Fortran_PREPROCESS の既定値。",
	"assets/variables.json.CMAKE_FRAMEWORK": "ターゲットの FRAMEWORK の既定値。",
	"assets/variables.json.CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG": "マルチ構成ジェネレーターを使用しているときの、構成 <CONFIG> の下の既定のフレームワーク ファイル名接尾辞です。",
	"assets/variables.json.CMAKE_FRAMEWORK_PATH": "find_library、find_package、find_path、find_file コマンドで使用される macOS フレームワークの検索パスを指定する、ディレクトリのセミコロン区切りリスト。",
	"assets/variables.json.CMAKE_GENERATOR": "プロジェクトのビルドに使用されるジェネレーター。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_GENERATOR_INSTANCE": "ユーザーによって提供されるジェネレーター固有のインスタンス仕様。",
	"assets/variables.json.CMAKE_GENERATOR_PLATFORM": "ユーザーによって提供されるジェネレーター固有のターゲット プラットフォーム仕様。",
	"assets/variables.json.CMAKE_GENERATOR_TOOLSET": "ユーザー提供のネイティブ ビルド システム ツールセットの仕様。",
	"assets/variables.json.CMAKE_GHS_NO_SOURCE_GROUP_FILE": "ターゲットのプロジェクト ファイルを 1 つのファイルにするか複数のファイルにするかを制御する ON/OFF ブール値です。詳細については、GHS_NO_SOURCE_GROUP_FILE をご覧ください。",
	"assets/variables.json.CMAKE_GLOBAL_AUTOGEN_TARGET": "グローバル autogen ターゲットの生成を有効にするために切り替えます。",
	"assets/variables.json.CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": "グローバル autogen ターゲットの名前を変更します。",
	"assets/variables.json.CMAKE_GLOBAL_AUTORCC_TARGET": "グローバル autorcc ターゲットの生成を有効にするために切り替えます。",
	"assets/variables.json.CMAKE_GLOBAL_AUTORCC_TARGET_NAME": "グローバル autorcc ターゲットの名前を変更します。",
	"assets/variables.json.CMAKE_GNUtoMS": "GNU インポート ライブラリ (.dll.a) を MS 形式 (.lib) に変換します。",
	"assets/variables.json.CMAKE_HIP_ARCHITECTURES": "デバイス コードを生成する GPU アーキテクチャの一覧。アーキテクチャ名は、CMAKE_HIP_PLATFORM に基づいて解釈されます。",
	"assets/variables.json.CMAKE_HIP_COMPILE_FEATURES": "HIP コンパイラで認識されている機能の一覧",
	"assets/variables.json.CMAKE_HIP_EXTENSIONS": "ターゲットの作成時に設定する場合の、HIP_EXTENSIONS ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_HIP_PLATFORM": "HIP 言語ソースをコンパイルする GPU プラットフォーム。",
	"assets/variables.json.CMAKE_HIP_STANDARD": "ターゲットの作成時に設定する場合の、HIP_STANDARD ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_HIP_STANDARD_REQUIRED": "ターゲットの作成時に設定する場合の、HIP_STANDARD_REQUIRED ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_HOME_DIRECTORY": "ソース ツリーの先頭へのパス。CMAKE_SOURCE_DIR と同じです。",
	"assets/variables.json.CMAKE_HOST_APPLE": "Apple macOS オペレーティング システムの場合は true。",
	"assets/variables.json.CMAKE_HOST_BSD": "ホスト システムが BSD の場合は文字列値に設定します。この値は、DragonFlyBSD、FreeBSD、OpenBSD、または NetBSD のいずれかになります。",
	"assets/variables.json.CMAKE_HOST_LINUX": "ホスト システムが Linux の場合は true に設定します。",
	"assets/variables.json.CMAKE_HOST_SOLARIS": "Oracle Solaris オペレーティング システムの場合は true。",
	"assets/variables.json.CMAKE_HOST_SYSTEM": "CMake を実行する OS の複合名。",
	"assets/variables.json.CMAKE_HOST_SYSTEM_NAME": "CMake が実行されている OS の名前。",
	"assets/variables.json.CMAKE_HOST_SYSTEM_PROCESSOR": "CMake が実行されている CPU の名前。",
	"assets/variables.json.CMAKE_HOST_SYSTEM_VERSION": "CMake が実行されている OS のバージョン。",
	"assets/variables.json.CMAKE_HOST_UNIX": "UNIX および UNIX 系のオペレーティング システムの場合は true。",
	"assets/variables.json.CMAKE_HOST_WIN32": "ホスト システムが Windows (Windows 64 ビットおよび MSYS を含む) を実行している場合は true。",
	"assets/variables.json.CMAKE_IGNORE_PATH": "さまざまな find...() コマンドで無視されるディレクトリのセミコロン区切りの一覧。",
	"assets/variables.json.CMAKE_IGNORE_PREFIX_PATH": "find_program、find_library、find_file、find_path コマンドで無視される検索プレフィックスのセミコロン区切りの一覧。プレフィックスは、find_package コマンドの構成モードでも無視されます (モジュール モードは影響を受けません)。代わりに特定のディレクトリを無視するには、CMAKE_IGNORE_NONPREFIX_VAR を参照してください。",
	"assets/variables.json.CMAKE_IMPORT_LIBRARY_PREFIX": "リンクしているインポート ライブラリのプレフィックス。",
	"assets/variables.json.CMAKE_IMPORT_LIBRARY_SUFFIX": "リンクしているインポート ライブラリのサフィックス。",
	"assets/variables.json.CMAKE_INCLUDE_CURRENT_DIR": "現在のソース ディレクトリとビルド ディレクトリを自動的に include パスに追加します。",
	"assets/variables.json.CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": "現在のソース ディレクトリとビルド ディレクトリを自動的に INTERFACE_INCLUDE_DIRECTORIES ターゲット プロパティに追加します。",
	"assets/variables.json.CMAKE_INCLUDE_DIRECTORIES_BEFORE": "既定で include_directories に末尾または先頭にディレクトリを追加するか。",
	"assets/variables.json.CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": "プロジェクトの include ディレクトリを強制的に先頭に追加するかどうか。",
	"assets/variables.json.CMAKE_INCLUDE_PATH": "find_file コマンドおよび find_path コマンドの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。",
	"assets/variables.json.CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": "インストール コマンドで使用される既定のコンポーネント。",
	"assets/variables.json.CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": "install および file によるファイルのインストール中に暗黙的に作成されるディレクトリに対する既定のアクセス許可。",
	"assets/variables.json.CMAKE_INSTALL_MESSAGE": "(file コマンドを使用して) install コマンドによって生成されたインストール スクリプト コードの詳細レベルを指定します。新しくインストールまたは更新されるパスの場合、インストールによって次のような行が表示されます。",
	"assets/variables.json.CMAKE_INSTALL_NAME_DIR": "Apple プラットフォーム上にインストールされているターゲットのディレクトリ名。",
	"assets/variables.json.CMAKE_INSTALL_PREFIX": "install で使用するインストール ディレクトリ。",
	"assets/variables.json.CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": "CMake は、CMAKE_INSTALL_PREFIX が既定値に初期化された直後、通常は新しいビルド ツリー内で CMake を初めて実行したときにこの変数を TRUE 値に設定し、CMake を初めて実行したときに CMAKE_INSTALL_PREFIX 環境変数が設定されていない場合にこの変数を設定します。これをプロジェクト コードで使用すると、ユーザー指定の値をオーバーライドせずに既定値を変更できます。",
	"assets/variables.json.CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": "インストール中にツールチェーンで定義された rpath を削除するかどうかの既定値を設定します。",
	"assets/variables.json.CMAKE_INSTALL_RPATH": "インストール済みターゲットに使用する rpath。",
	"assets/variables.json.CMAKE_INSTALL_RPATH_USE_LINK_PATH": "リンカー検索のパスとインストール済みの rpath を追加します。",
	"assets/variables.json.CMAKE_INTERNAL_PLATFORM_ABI": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_INTERPROCEDURAL_OPTIMIZATION": "ターゲットの INTERPROCEDURAL_OPTIMIZATION の既定値。",
	"assets/variables.json.CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG": "ターゲットの INTERPROCEDURAL_OPTIMIZATION_ の既定値。",
	"assets/variables.json.CMAKE_IOS_INSTALL_COMBINED": "ターゲットの IOS_INSTALL_COMBINED の既定値。",
	"assets/variables.json.CMAKE_ISPC_HEADER_DIRECTORY": "ISPC で生成されたヘッダー出力ディレクトリ。",
	"assets/variables.json.CMAKE_ISPC_HEADER_SUFFIX": "ISPC で生成されたヘッダーに使用する出力サフィックス。",
	"assets/variables.json.CMAKE_ISPC_INSTRUCTION_SETS": "ターゲットの ISPC_INSTRUCTION_SETS プロパティの既定値。",
	"assets/variables.json.CMAKE_JOB_POOLS": "JOB_POOLS グローバルプロパティが設定されていない場合は、この変数の値が代わりに使用されます。追加情報については、JOB_POOLS を参照してください。",
	"assets/variables.json.CMAKE_JOB_POOL_COMPILE": "この変数は、すべてのターゲットの JOB_POOL_COMPILE プロパティを初期化するために使用されます。追加情報については、JOB_POOL_COMPILE を参照してください。",
	"assets/variables.json.CMAKE_JOB_POOL_LINK": "この変数は、すべてのターゲットの JOB_POOL_LINK プロパティを初期化するために使用されます。追加情報については、JOB_POOL_LINK を参照してください。",
	"assets/variables.json.CMAKE_JOB_POOL_PRECOMPILE_HEADER": "この変数は、すべてのターゲットの JOB_POOL_PRECOMPILE_HEADER プロパティを初期化するために使用されます。追加情報については、JOB_POOL_PRECOMPILE_HEADER を参照してください。",
	"assets/variables.json.CMAKE_KATE_FILES_MODE": "このキャッシュ変数は Kate プロジェクト ジェネレーターによって使用され、プロジェクト ファイル内のファイル エントリがどのモードに設定されるかを制御します。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_KATE_MAKE_ARGUMENTS": "このキャッシュ変数は、Kate プロジェクト ジェネレーターによって使用されます。cmake-generators を参照してください。",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE": "Android 用のクロス コンパイルの場合、この変数にはツールチェーン Binutils マシン名が含まれます (例: gcc -dumpmachine)。Binutils では通常、その名前に <machine> - というプレフィックスが付きます。",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX": "Android 用クロス コンパイルの場合、この変数にはツールチェーン GNU コンパイラとその Binutils にプレフィックスを付けた絶対パスが含まれます。",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX": "Android 用クロス コンパイルの場合、この変数にはツールチェーン GNU コンパイラとその Binutils のホスト プラットフォームのサフィックスが含まれます。",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_APPEND": "静的アーカイブに追加するための規則変数。",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_CREATE": "新しい静的アーカイブを作成するための規則変数。",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_FINISH": "既存の静的アーカイブを終了するための規則変数。",
	"assets/variables.json.CMAKE_LANG_BYTE_ORDER": "<LANG> コンパイラのターゲット アーキテクチャのバイト順 (既知の場合)。定義されていて、空ではない場合、値は次のいずれかになります。",
	"assets/variables.json.CMAKE_LANG_CLANG_TIDY": "<LANG> が C、CXX、OBJC、または OBJCXX の場合の <LANG>_CLANG_TIDY ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR": "<LANG> が C、CXX、OBJC、または OBJCXX の場合の <LANG>_CLANG_TIDY_EXPORT_FIXES_DIR ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_LANG_COMPILER": "LANG 用コンパイラへの完全なパス。",
	"assets/variables.json.CMAKE_LANG_COMPILER_ABI": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_LANG_COMPILER_AR": "コンパイラの適切な --plugin オプションを追加する ar のラッパー。",
	"assets/variables.json.CMAKE_LANG_COMPILER_ARCHITECTURE_ID": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN": "サポートされている場合は、クロスコンパイル用の外部ツールチェーン。",
	"assets/variables.json.CMAKE_LANG_COMPILER_FRONTEND_VARIANT": "コンパイラ フロントエンド バリアントの識別文字列。",
	"assets/variables.json.CMAKE_LANG_COMPILER_ID": "コンパイラの識別文字列。",
	"assets/variables.json.CMAKE_LANG_COMPILER_LAUNCHER": "<LANG>_COMPILER_LAUNCHER ターゲット プロパティの既定値。この変数は、各ターゲットのプロパティを、その作成時に初期化するために使用されます。これは、<LANG> が C、CXX、Fortran、HIP、ISPC、OBJC、OBJCXX、または CUDA の場合にのみ実行されます。",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER": "LANG 用リンカーへの完全なパス。",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_FRONTEND_VARIANT": "リンカー フロントエンド バリアントの識別文字列。",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_ID": "リンカーの識別文字列。",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_VERSION": "リンカーのバージョン文字列。",
	"assets/variables.json.CMAKE_LANG_COMPILER_LOADED": "言語が有効な場合は true に定義されます。",
	"assets/variables.json.CMAKE_LANG_COMPILER_PREDEFINES_COMMAND": "コンパイラの事前定義を出力するコマンド。",
	"assets/variables.json.CMAKE_LANG_COMPILER_RANLIB": "コンパイラの適切な --plugin オプションを追加する ranlib のラッパー。",
	"assets/variables.json.CMAKE_LANG_COMPILER_TARGET": "サポートされている場合は、クロスコンパイル用のターゲット。",
	"assets/variables.json.CMAKE_LANG_COMPILER_VERSION": "コンパイラのバージョン文字列。",
	"assets/variables.json.CMAKE_LANG_COMPILER_VERSION_INTERNAL": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_LANG_COMPILE_OBJECT": "単一のオブジェクト ファイルをコンパイルするための規則変数。",
	"assets/variables.json.CMAKE_LANG_CPPCHECK": "<LANG>_CPPCHECK ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは <LANG> が C または CXX の場合にのみ行われます。",
	"assets/variables.json.CMAKE_LANG_CPPLINT": "<LANG>_CPPLINT ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは <LANG> が C または CXX の場合にのみ行われます。",
	"assets/variables.json.CMAKE_LANG_CREATE_SHARED_LIBRARY": "共有ライブラリを作成するための規則変数。",
	"assets/variables.json.CMAKE_LANG_CREATE_SHARED_MODULE": "共有モジュールを作成するための規則変数。",
	"assets/variables.json.CMAKE_LANG_CREATE_STATIC_LIBRARY": "スタティック ライブラリを作成するための規則変数。",
	"assets/variables.json.CMAKE_LANG_EXTENSIONS": "このバリエーションは次のとおりです。",
	"assets/variables.json.CMAKE_LANG_EXTENSIONS_DEFAULT": "コンパイラの既定の拡張モード。CMAKE_<LANG>_EXTENSIONS が設定されていない場合に、<LANG>_EXTENSIONS ターゲット プロパティの既定値として使用します (CMP0128 を参照)。",
	"assets/variables.json.CMAKE_LANG_FLAGS": "すべての構成でビルド時に使用される言語 <LANG> の言語共通フラグ。これらのフラグは、コンパイラのすべての呼び出しに渡されます。これには、コンパイルを実行する呼び出しと、リンクの設定を実行する呼び出しが含まれます。",
	"assets/variables.json.CMAKE_LANG_FLAGS_CONFIG": "<CONFIG> 構成のビルド時に使用される言語 <LANG> の言語共通フラグ。これらのフラグは、対応する構成のコンパイラの、すべての呼び出しに渡されます。これには、コンパイルを実行する呼び出しと、リンクの設定を実行する呼び出しが含まれます。",
	"assets/variables.json.CMAKE_LANG_FLAGS_CONFIG_INIT": "言語 <LANG> のビルド ツリーを初めて構成するときに CMAKE_<LANG>_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_LANG_FLAGS_DEBUG": "この変数は CMAKE_<LANG>_FLAGS_ 変数の Debug のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_DEBUG_INIT": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の Debug のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_INIT": "言語 <LANG> についてビルド ツリーが初めて構成されたときに、CMAKE_<LANG>_FLAGS キャッシュ エントリを初期化するために使用する値です。この変数は、ツールチェーン ファイルによって設定することを意図しています。CMake では、環境とターゲット プラットフォームに基づいて、値の前後に内容を追加することができます。たとえば、xxxFLAGS 環境変数の内容は前に付加されます。ここで xxx は言語固有であり、また必ずしも <LANG> と同じである必要はありません (例: CXX の場合は CXXFLAGS、Fortran の場合は FFLAGS など)。この値はコマンドライン文字列のフラグメントです。従って、複数のオプションはスペース記号で区切られ、スペース付きのオプションはクォーテーションマークで囲われる必要があります。",
	"assets/variables.json.CMAKE_LANG_FLAGS_MINSIZEREL": "この変数は CMAKE_<LANG>_FLAGS_ 変数の MinSizeRel のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_MINSIZEREL_INIT": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の MinSizeRel のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELEASE": "この変数は CMAKE_<LANG>_FLAGS_ 変数の Release のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELEASE_INIT": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の Release のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELWITHDEBINFO": "この変数は CMAKE_<LANG>_FLAGS_ 変数の RelWithDebInfo のバリアントです。",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT": "この変数は CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 変数の RelWithDebInfo のバリアントです。",
	"assets/variables.json.CMAKE_LANG_HOST_COMPILER": "この変数は、<LANG> が CUDA または HIP の場合に使用できます。",
	"assets/variables.json.CMAKE_LANG_IGNORE_EXTENSIONS": "ビルドで無視されるファイル拡張子。",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES": "コンパイラがヘッダー ファイルを暗黙的に検索するディレクトリ。",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES": "言語 <LANG> で検出される暗黙のリンカー検索パス。",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": "言語 <LANG> で検出される暗黙のリンカー フレームワーク検索パス。",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_LIBRARIES": "言語 <LANG> で検出される暗黙のリンク ライブラリとフラグ。",
	"assets/variables.json.CMAKE_LANG_INCLUDE_WHAT_YOU_USE": "<LANG>_INCLUDE_WHAT_YOU_USE ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは <LANG> が C または CXX の場合にのみ行われます。",
	"assets/variables.json.CMAKE_LANG_LIBRARY_ARCHITECTURE": "<LANG> で検出されるターゲット アーキテクチャ ライブラリ ディレクトリ名。",
	"assets/variables.json.CMAKE_LANG_LINKER_LAUNCHER": "<LANG>_COMPILER_LAUNCHER ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。これは、<LANG> が C、CXX、OBJC、OBJCXX の場合にのみ実行されます。",
	"assets/variables.json.CMAKE_LANG_LINKER_PREFERENCE": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_LANG_LINKER_WRAPPER_FLAG": "オプションをリンカー ツールに渡すためのコンパイラ ドライバー オプションの構文を定義します。これはリンク オプションの LINKER: プレフィックスを変換するために使われます (add_link_options と target_link_options を参照してください)。",
	"assets/variables.json.CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP": "この変数は、リンク オプションの LINKER: プレフィックスをフォーマットするために CMAKE_<LANG>_LINKER_WRAPPER_FLAG 変数とともに使用されます (add_link_options および target_link_options を参照)。",
	"assets/variables.json.CMAKE_LANG_LINK_EXECUTABLE": "実行可能ファイルをリンクするための規則変数。",
	"assets/variables.json.CMAKE_LANG_LINK_GROUP_USING_FEATURE": "この変数は、LINK_LIBRARY ジェネレーター式が使用され、ターゲットのリンク言語が <LANG> である場合に、指定された <FEATURE> のライブラリのグループをリンクする方法を定義します。この変数が効果を発揮するには、関連付けられた CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED 変数が、true に設定されている必要があります。",
	"assets/variables.json.CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED": "この変数は、<FEATURE> がリンク言語 <LANG> でサポートされているかどうかを指定します。この変数が true の場合、<FEATURE> はCMAKE_<LANG>_LINK_GROUP_USING_ で定義する必要があります。より一般的な CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED および CMAKE_LINK_GROUP_USING_ 変数は使用されません。",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FEATURE_ATTRIBUTES": "この変数は、リンク言語 <LANG> を使用してリンクの設定をするときの、指定されたリンク ライブラリ <FEATURE> のセマンティクスを定義します。この変数は、同じ <FEATURE> に対して定義されている場合に CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES よりも優先されますが、それ以外の場合は同様の効果があります。詳細については、「CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES」を参照してください。",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FILE_FLAG": "パスで指定されたライブラリをそのファイルにリンクするために使用される、言語に固有のフラグ。",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FLAG": "ライブラリを共有ライブラリまたは実行可能ファイルにリンクするために使用されるフラグ。",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_SUFFIX": "リンクしているライブラリの言語固有のサフィックス。",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_USING_FEATURE": "この変数は、LINK_LIBRARY ジェネレーター式が使用され、ターゲットのリンク言語が <LANG> である場合に、指定された <FEATURE> のライブラリまたはフレームワークをリンクする方法を定義します。この変数が効果を発揮するには、関連付けられた CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED 変数が、true に設定されている必要があります。",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED": "変数 CMAKE_<LANG>_LINK_LIBRARY_USING_ で定義されている <FEATURE> がリンカー言語 <LANG> 向けにサポートされている場合は、true に設定されます。",
	"assets/variables.json.CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG": "コマンド ラインで指定されたすべてのライブラリがターゲットにリンクされるようにリンカーを構成するために使用されるリンカー フラグです。",
	"assets/variables.json.CMAKE_LANG_OUTPUT_EXTENSION": "単一ファイル用のコンパイルの出力用拡張機能。",
	"assets/variables.json.CMAKE_LANG_PLATFORM_ID": "変更対象の内部変数です。",
	"assets/variables.json.CMAKE_LANG_SIMULATE_ID": "「シミュレートされた」コンパイラの識別文字列。",
	"assets/variables.json.CMAKE_LANG_SIMULATE_VERSION": "「シミュレートされた」コンパイラのバージョン文字列。",
	"assets/variables.json.CMAKE_LANG_SIZEOF_DATA_PTR": "言語 <LANG> の pointer-to-data 型のサイズ。",
	"assets/variables.json.CMAKE_LANG_SOURCE_FILE_EXTENSIONS": "特定の言語のソース ファイルの拡張機能。",
	"assets/variables.json.CMAKE_LANG_STANDARD": "このバリエーションは次のとおりです。",
	"assets/variables.json.CMAKE_LANG_STANDARD_DEFAULT": "言語 <LANG> のコンパイラの既定の標準です。コンパイラに標準レベルの概念がない場合は空です。",
	"assets/variables.json.CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES": "<LANG> コンパイラでコンパイルされるすべてのソース ファイルに使用されるディレクトリを含めます。これは、現在のプラットフォームの言語で必要とされるシステム include ディレクトリを指定するためのものです。ディレクトリは常に、コンパイラに渡された include パスの末尾に表示されます。",
	"assets/variables.json.CMAKE_LANG_STANDARD_LATEST": "この変数は、現在のコンパイラでサポートされている言語 <LANG> の最新バージョンと CMake でサポートされている最新バージョンの間の最小値を表します。その値は、対応する <LANG>_STANDARD ターゲット プロパティのサポートされている値のいずれかに設定されます。サポートされている言語の一覧については、そのプロパティのドキュメントを参照してください。",
	"assets/variables.json.CMAKE_LANG_STANDARD_LIBRARIES": "言語 <LANG> でリンクされているすべての実行可能ファイルおよび共有ライブラリにリンクされているライブラリ。これは現在のプラットフォームの言語で必要なシステム ライブラリを指定するためのものです。",
	"assets/variables.json.CMAKE_LANG_STANDARD_REQUIRED": "このバリエーションは次のとおりです。",
	"assets/variables.json.CMAKE_LANG_USING_LINKER_MODE": "これは、CMAKE_<LANG>_USING_LINKER_ 変数の値の解釈方法を制御します。サポートされているリンカー モードの値は次のとおりです:",
	"assets/variables.json.CMAKE_LANG_USING_LINKER_TYPE": "この変数は、CMAKE_LINKER_TYPE 変数または LINKER_TYPE ターゲット プロパティによって制御されるリンク ステップの <TYPE> リンカーを指定する方法を定義します。CMAKE_<LANG>_USING_LINKER_MODE 変数の値に応じて、CMAKE_<LANG>_USING_LINKER_<TYPE> はリンク ステップのコンパイラ フラグ、またはリンカー ツールに直接指定されるフラグを保持できます。",
	"assets/variables.json.CMAKE_LANG_VISIBILITY_PRESET": "ターゲット作成時の <LANG>_VISIBILITY_PRESET ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_LIBRARY_ARCHITECTURE": "検出された場合、ターゲット アーキテクチャのライブラリ ディレクトリ名。",
	"assets/variables.json.CMAKE_LIBRARY_ARCHITECTURE_REGEX": "可能なターゲット アーキテクチャのライブラリ ディレクトリ名と一致する Regex。",
	"assets/variables.json.CMAKE_LIBRARY_OUTPUT_DIRECTORY": "ビルド時のすべての LIBRARY ターゲット ファイルの配置場所。",
	"assets/variables.json.CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG": "特定の構成のためにビルドされたときの、すべての LIBRARY ターゲット ファイルの配置場所。",
	"assets/variables.json.CMAKE_LIBRARY_PATH": "find_library コマンドの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。",
	"assets/variables.json.CMAKE_LIBRARY_PATH_FLAG": "ライブラリ検索パスをコンパイラに追加するために使用されるフラグ。",
	"assets/variables.json.CMAKE_LINKER_TYPE": "リンク ステップに使用するリンカーを指定します。",
	"assets/variables.json.CMAKE_LINK_DEF_FILE_FLAG": "dll 作成用の .def ファイルを指定するために使用されるリンカー フラグ。",
	"assets/variables.json.CMAKE_LINK_DEPENDS_NO_SHARED": "共有ライブラリ ファイルへのリンクの依存関係をスキップするかどうか。",
	"assets/variables.json.CMAKE_LINK_DEPENDS_USE_LINKER": "Makefile ジェネレーターおよび Ninja ジェネレーターでは、一部のリンカーに対して、リンク依存関係がリンカー自体によって生成されるようになりました。この変数を値 FALSE で定義すると、この機能を非アクティブ化できます。",
	"assets/variables.json.CMAKE_LINK_DIRECTORIES_BEFORE": "既定で link_directories に末尾または先頭にディレクトリを追加するか。",
	"assets/variables.json.CMAKE_LINK_GROUP_USING_FEATURE": "この変数は、LINK_GROUP ジェネレーター式を使用するときに、指定された <FEATURE> のライブラリのグループをリンクする方法を定義します。この変数が効果を発揮するには、次の両方の条件を満たす必要があります。",
	"assets/variables.json.CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED": "この変数は、リンク言語に関係なく、<FEATURE> がサポートされるかどうかを指定します。この変数が true の場合、<FEATURE> は CMAKE_LINK_GROUP_USING_ で定義される必要があります。",
	"assets/variables.json.CMAKE_LINK_INTERFACE_LIBRARIES": "ターゲットの LINK_INTERFACE_LIBRARIES の既定値。",
	"assets/variables.json.CMAKE_LINK_LIBRARIES_ONLY_TARGETS": "インポートされないターゲットの作成時にLINK_LIBRARIES_ONLY_TARGETS プロパティを初期化するために、この変数を設定します。この変数を true に設定すると、ターゲット名にすることができる target_link_libraries によって名前付けされたすべての項目が、実際には既存のターゲットの名前であることを確認できます。詳細については、ターゲット プロパティのドキュメントを参照してください。",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FEATURE_ATTRIBUTES": "この変数により、指定されたリンク ライブラリ <FEATURE> の動作が定義されます。これは、<FEATURE> が他の機能とどのように相互作用するのか、<FEATURE> を適用すべきタイミング、CMake により最終的なリンカー コマンド ラインが組み立てられる際に <FEATURE> がどのように処理されるべきか (重複排除など) を指定します。",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FILE_FLAG": "パスで指定されたライブラリをそのファイルにリンクするために使用されるフラグ。",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FLAG": "ライブラリを実行可能ファイルにリンクするために使用されるフラグ。",
	"assets/variables.json.CMAKE_LINK_LIBRARY_SUFFIX": "リンクしているライブラリのサフィックス。",
	"assets/variables.json.CMAKE_LINK_LIBRARY_USING_FEATURE": "この変数は、LINK_LIBRARY ジェネレーター式を使用するときに、指定された <FEATURE> のライブラリまたはフレームワークをリンクする方法を定義します。この変数が効果を発揮するには、次の両方の条件を満たす必要があります。",
	"assets/variables.json.CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED": "変数 CMAKE_LINK_LIBRARY_USING_ で定義されている <FEATURE> がリンカー言語に関係なくサポートされている場合は、true に設定されます。",
	"assets/variables.json.CMAKE_LINK_SEARCH_END_STATIC": "スタティック システム ライブラリが使用されるように、リンク行を終了します。",
	"assets/variables.json.CMAKE_LINK_SEARCH_START_STATIC": "既定で、リンカーはスタティック ライブラリを探すと仮定します。",
	"assets/variables.json.CMAKE_LINK_WHAT_YOU_USE": "LINK_WHAT_YOU_USE ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに、このプロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_LINK_WHAT_YOU_USE_CHECK": "リンク ステップの後に実行されるコマンドを定義して、ライブラリの使用状況を確認します。このチェックは現在、値 ldd -u -r を持つ ELF プラットフォームでのみ定義されています。",
	"assets/variables.json.CMAKE_MACOSX_BUNDLE": "ターゲットの MACOSX_BUNDLE の既定値。",
	"assets/variables.json.CMAKE_MACOSX_RPATH": "macOS と iOS で rpath を使用するかどうか。",
	"assets/variables.json.CMAKE_MAJOR_VERSION": "CMAKE_VERSION 変数の最初のバージョン番号コンポーネント。",
	"assets/variables.json.CMAKE_MAKE_PROGRAM": "ネイティブ ビルド システムを起動できるツール。この値は、実行可能ファイルへの完全なパスになることもあれば、PATH に含まれると予想される場合は単にツール名になることもあります。",
	"assets/variables.json.CMAKE_MAP_IMPORTED_CONFIG_CONFIG": "ターゲットの MAP_IMPORTED_CONFIG_ の既定値。",
	"assets/variables.json.CMAKE_MATCH_COUNT": "最後の正規表現との一致数。",
	"assets/variables.json.CMAKE_MATCH_n": "グループ 0 から 9 の、最後の正規表現で一致したキャプチャ グループ <n>。グループ 0 は完全一致です。グループ 1 から 9 は、() 構文で取り込まれた部分式です。",
	"assets/variables.json.CMAKE_MAXIMUM_RECURSION_DEPTH": "CMake スクリプトの最大再帰深度です。これは、-DCMAKE_MAXIMUM_RECURSION_DEPTH=<x> としてコマンド ラインで設定するか、または、大きな再帰深度を必要とするプロジェクトによって CMakeLists.txt 内で設定します。この変数を設定するプロジェクトでは、これをオーバーライドする方法をユーザーに提供する必要があります。例:",
	"assets/variables.json.CMAKE_MESSAGE_CONTEXT": "cmake --log-context コマンド ライン オプションまたは CMAKE_MESSAGE_CONTEXT_SHOW 変数によって有効にした場合、メッセージ コマンドによって CMAKE_MESSAGE_CONTEXT のリストがドット区切りの文字列に変換されて角かっこで囲まれ、ログ レベルが NOTICE 以下のメッセージで各行の前に付加されます。",
	"assets/variables.json.CMAKE_MESSAGE_CONTEXT_SHOW": "この変数を true に設定すると、メッセージ コマンドによって記録される各行にコンテキストを表示できるようになります (コンテキスト自体を指定する方法については、CMAKE_MESSAGE_CONTEXT を参照してください)。",
	"assets/variables.json.CMAKE_MESSAGE_INDENT": "メッセージ コマンドでは、この一覧からの文字列を結合し、その結果の文字列を、ログ レベルが NOTICE 以下のメッセージで各行の前に付加します。",
	"assets/variables.json.CMAKE_MESSAGE_LOG_LEVEL": "設定した場合、この変数では、メッセージ コマンドで使用されるログ レベルを指定します。有効な値は、CMake プログラムの --log-level <cmake --log-level> コマンド ライン オプションのものと同じです。この変数が設定されており、--log-level <cmake --log-level> コマンド ライン オプションが指定されている場合は、コマンド ライン オプションのほうが優先されます。",
	"assets/variables.json.CMAKE_MFC_FLAG": "実行可能ファイルまたは dll 用に MFC ライブラリを使用します。",
	"assets/variables.json.CMAKE_MINIMUM_REQUIRED_VERSION": "現在の変数スコープまたは任意の親変数スコープ内で呼び出される直近の cmake_minimum_required コマンドにおける所定の CMake の <min> バージョン。",
	"assets/variables.json.CMAKE_MINOR_VERSION": "CMAKE_VERSION 変数の 2 番目のバージョン番号コンポーネント。",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS": "モジュールの作成に使用するリンカー フラグ。",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_CONFIG": "モジュールをリンクするときに使用するフラグ。",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT": "ビルド ツリーを初めて構成するときに CMAKE_MODULE_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_INIT": "ビルド ツリーを初めて構成するときに CMAKE_MODULE_LINKER_FLAGS キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_MODULE_PATH": "CMake 付属の既定のモジュールをチェックする前に、include または find_package コマンドによって読み込まれ、スラッシュの数を使用して表される CMake モジュールの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。",
	"assets/variables.json.CMAKE_MSVCIDE_RUN_PATH": "Visual Studio 12 2013 (またはそれ以降) のジェネレーターを使用する場合に add_custom_command または add_custom_target を実行するときに使用する必要がある追加の PATH の場所。これにより、コマンドを実行することや、IDE 環境で認識されない dll を使用することができます。",
	"assets/variables.json.CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": "MSVC ABI を対象とする MSVC デバッグ情報形式を選択します。この変数は、作成時にすべてのターゲットで MSVC_DEBUG_INFORMATION_FORMAT プロパティを初期化するために使用されます。また、try_compile コマンドの呼び出しによってテスト プロジェクトに伝達されます。",
	"assets/variables.json.CMAKE_MSVC_RUNTIME_LIBRARY": "MSVC ABI を対象とするコンパイラで使用する MSVC ランタイム ライブラリを選択します。この変数は、ターゲットの作成時にすべてのターゲットの MSVC_RUNTIME_LIBRARY プロパティを初期化するために使用されます。また、これは、try_compile コマンドの呼び出しによってテスト プロジェクトにも反映されます。",
	"assets/variables.json.CMAKE_NETRC": "この変数は、1 つ以上の file コマンドの NETRC オプションを初期化するために使用されます。追加情報については、それらのコマンドを参照してください。",
	"assets/variables.json.CMAKE_NETRC_FILE": "この変数は、1 つ以上の file コマンドの NETRC_FILE オプションを初期化するために使用されます。追加情報については、それらのコマンドを参照してください。",
	"assets/variables.json.CMAKE_NINJA_OUTPUT_PATH_PREFIX": "Ninja ジェネレーターに、build.ninja のすべての出力パスにプレフィックスを追加するように指示します。プレフィックスがない場合は、末尾のスラッシュがプレフィックスにアペンドされます。",
	"assets/variables.json.CMAKE_NOT_USING_CONFIG_FLAGS": "true の場合、_BUILD_TYPE フラグをスキップします。",
	"assets/variables.json.CMAKE_NO_BUILTIN_CHRPATH": "インストール時にランタイム ライブラリの検索パスを修正するために、組み込みのバイナリ エディターを使用しないでください。",
	"assets/variables.json.CMAKE_NO_SYSTEM_FROM_IMPORTED": "ターゲットの NO_SYSTEM_FROM_IMPORTED の既定値。",
	"assets/variables.json.CMAKE_OBJCXX_EXTENSIONS": "ターゲットの作成時に設定する場合の、OBJCXX_EXTENSIONS ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_OBJCXX_STANDARD": "ターゲットの作成時に設定する場合の、OBJCXX_STANDARD ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_OBJCXX_STANDARD_REQUIRED": "ターゲットの作成時に設定する場合の、OBJCXX_STANDARD_REQUIRED ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_OBJC_EXTENSIONS": "ターゲットの作成時に設定する場合の、OBJC_EXTENSIONS ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_OBJC_STANDARD": "ターゲットの作成時に設定する場合の、OBJC_STANDARD ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_OBJC_STANDARD_REQUIRED": "ターゲットの作成時に設定する場合の、OBJC_STANDARD_REQUIRED ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_OBJECT_PATH_MAX": "ネイティブ ビルド ツールで許可されているオブジェクト ファイルの完全なパスの最大長。",
	"assets/variables.json.CMAKE_OPTIMIZE_DEPENDENCIES": "OPTIMIZE_DEPENDENCIES ターゲット プロパティを初期化します。",
	"assets/variables.json.CMAKE_OSX_ARCHITECTURES": "macOS と iOS のターゲットの特定のアーキテクチャ。",
	"assets/variables.json.CMAKE_OSX_DEPLOYMENT_TARGET": "ターゲット バイナリが配置されるターゲット プラットフォーム (たとえば、macOS または iOS) の最小バージョンを指定します。CMake は、この変数値を -mmacosx-version-min フラグ、またはそれぞれのターゲット プラットフォームのこれに相当するものに使用します。複数の macOS SDK を同梱していた前の Xcode バージョンでは、CMAKE_OSX_SYSROOT が設定されていない場合にこの変数によって SDK を選択できるようにもなります。",
	"assets/variables.json.CMAKE_OSX_SYSROOT": "使用される macOS プラットフォーム SDK の場所または名前を指定します。CMake はこの値を使用して -isysroot フラグまたはこれに相当するものの値を計算し、find_* コマンドで SDK 内のファイルを見つけられるようにします。",
	"assets/variables.json.CMAKE_PARENT_LIST_FILE": "現在のファイルが含まれている CMake ファイルへの完全なパス。",
	"assets/variables.json.CMAKE_PATCH_VERSION": "CMAKE_VERSION 変数の 3 番目のバージョン番号コンポーネント。",
	"assets/variables.json.CMAKE_PCH_INSTANTIATE_TEMPLATES": "この変数は、ターゲットの PCH_INSTANTIATE_TEMPLATES プロパティを、その作成時に初期化するために使用されます。",
	"assets/variables.json.CMAKE_PCH_WARN_INVALID": "この変数は、ターゲットの作成時にターゲットの PCH_WARN_INVALID プロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_PDB_OUTPUT_DIRECTORY": "実行可能ファイルおよび共有ライブラリ ターゲット用にリンカーによって生成された MS デバッグ シンボル .pdb ファイルの出力ディレクトリ。",
	"assets/variables.json.CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG": "実行可能ファイルおよび共有ライブラリ ターゲット用にリンカーによって生成された MS デバッグ シンボル .pdb ファイルの構成ごとの出力ディレクトリ。",
	"assets/variables.json.CMAKE_PLATFORM_NO_VERSIONED_SONAME": "この変数は、VERSION と SOVERSION のターゲット プロパティを共有ライブラリに使用するかどうかをグローバルに制御するために使用されます。true に設定すると、各共有ライブラリ ターゲットへのバージョン情報の追加は無効になります。",
	"assets/variables.json.CMAKE_POLICY_DEFAULT_CMPNNNN": "CMake ポリシー CMP <NNNN> が未設定のままの場合の既定値。",
	"assets/variables.json.CMAKE_POLICY_WARNING_CMPNNNN": "CMake Policy CMP<NNNN> が cmake_policy によって明示的に設定されていない場合、または cmake_minimum_required によって暗黙的に設定されていない場合に、警告を明示的に有効または無効にします。これは、既定で警告メッセージを表示しないポリシーに対してのみ意味があります。",
	"assets/variables.json.CMAKE_POSITION_INDEPENDENT_CODE": "ターゲットの POSITION_INDEPENDENT_CODE の既定値。",
	"assets/variables.json.CMAKE_PREFIX_PATH": "find_package、find_program、find_library、find_file、find_path コマンドで検索するインストール プレフィックスを指定するディレクトリのセミコロン区切りリスト。各コマンドは自らのドキュメントで指定されているように、適切なサブディレクトリ (bin、lib、include など) を追加します。",
	"assets/variables.json.CMAKE_PROGRAM_PATH": "find_program コマンドの検索パスを指定するディレクトリのセミコロン区切りリスト。既定では空であり、プロジェクトによって設定するためのものです。",
	"assets/variables.json.CMAKE_PROJECT_DESCRIPTION": "最上位プロジェクトの説明。",
	"assets/variables.json.CMAKE_PROJECT_HOMEPAGE_URL": "最上位プロジェクトのホーム ページ URL。",
	"assets/variables.json.CMAKE_PROJECT_INCLUDE": "すべてのプロジェクト コマンド呼び出しの最後のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。",
	"assets/variables.json.CMAKE_PROJECT_INCLUDE_BEFORE": "すべてのプロジェクト コマンド呼び出しの最初のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。",
	"assets/variables.json.CMAKE_PROJECT_NAME": "最上位プロジェクトの名前。",
	"assets/variables.json.CMAKE_PROJECT_PROJECT-NAME_INCLUDE": "プロジェクト名として <PROJECT-NAME> を指定するプロジェクト コマンド呼び出しの最後のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。",
	"assets/variables.json.CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE": "プロジェクト名として <PROJECT-NAME> を指定するプロジェクト コマンド呼び出しの最初のステップとして組み込まれる CMake 言語ファイル。これは、ソースを変更せずにプロジェクト ビルドにカスタム コードを挿入するためのものです。プロジェクト呼び出し時に含まれる可能性のあるファイルに関する詳細な説明は、「コード インジェクション」を参照してください。",
	"assets/variables.json.CMAKE_PROJECT_TOP_LEVEL_INCLUDES": "セミコロンで区切られた、最初のプロジェクト呼び出しの一部として含める CMake 言語ファイルの一覧。ファイルは、ツールチェーン ファイルが読み取られた直後 (指定されている場合) およびプラットフォーム変数の設定後、すべての言語が有効になる前に含まれます。したがって、言語固有の変数 (CMAKE_<LANG>_COMPILER など) が設定されない可能性があります。プロジェクト呼び出し中に含まれる可能性のあるファイルに関する詳細については、コード インジェクションを参照してください。",
	"assets/variables.json.CMAKE_PROJECT_VERSION": "最上位プロジェクトのバージョン。",
	"assets/variables.json.CMAKE_PROJECT_VERSION_MAJOR": "最上位プロジェクトのメジャー バージョン。",
	"assets/variables.json.CMAKE_PROJECT_VERSION_MINOR": "最上位プロジェクトのマイナー バージョン。",
	"assets/variables.json.CMAKE_PROJECT_VERSION_PATCH": "最上位プロジェクトのパッチのバージョン。",
	"assets/variables.json.CMAKE_PROJECT_VERSION_TWEAK": "最上位プロジェクトの調整バージョン。",
	"assets/variables.json.CMAKE_RANLIB": "スタティック ライブラリ用のランダム化ツールの名前。",
	"assets/variables.json.CMAKE_REQUIRE_FIND_PACKAGE_PackageName": "find_package 呼び出しを行うための変数は必須です。",
	"assets/variables.json.CMAKE_ROOT": "cmake を実行するためのインストール ディレクトリ。",
	"assets/variables.json.CMAKE_RULE_MESSAGES": "make 規則ごとにメッセージを報告するかどうかを指定します。",
	"assets/variables.json.CMAKE_RUNTIME_OUTPUT_DIRECTORY": "ビルド時のすべての RUNTIME ターゲット ファイルの配置場所。",
	"assets/variables.json.CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG": "特定の構成のためにビルドされたときの、すべての RUNTIME ターゲット ファイルの配置場所。",
	"assets/variables.json.CMAKE_SCRIPT_MODE_FILE": "現在処理されている cmake -P スクリプト ファイルへの完全なパス。",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS": "共有ライブラリでインポート ファイルを生成するかどうかを指定します。",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_PREFIX": "リンクしている共有ライブラリのプレフィックス。",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_SUFFIX": "リンクしている共有ライブラリのサフィックス。",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS": "共有ライブラリの作成に使用するリンカー フラグ。",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_CONFIG": "共有ライブラリをリンクするときに使用するフラグ。",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT": "ビルド ツリーを初めて構成するときに CMAKE_SHARED_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_INIT": "ビルド ツリーを初めて構成するときに CMAKE_SHARED_LINKER_FLAGS キャッシュ エントリを初期化するために使用される値。この変数はツールチェーン ファイルによって設定されます。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_SHARED_MODULE_PREFIX": "リンクする読み込み可能モジュールのプレフィックス。",
	"assets/variables.json.CMAKE_SHARED_MODULE_SUFFIX": "リンクしている共有ライブラリのサフィックス。",
	"assets/variables.json.CMAKE_SIZEOF_VOID_P": "void ポインターのサイズ。",
	"assets/variables.json.CMAKE_SKIP_BUILD_RPATH": "ビルド ツリーには RPATH を含めないでください。",
	"assets/variables.json.CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": "すべてのターゲットに依存するインストール ターゲットは作成しないでください。",
	"assets/variables.json.CMAKE_SKIP_INSTALL_RPATH": "インストール ツリーには RPATH を含めないでください。",
	"assets/variables.json.CMAKE_SKIP_INSTALL_RULES": "インストール 規則の生成を無効にするかどうか。",
	"assets/variables.json.CMAKE_SKIP_RPATH": "true の場合、実行時パス情報を追加しません。",
	"assets/variables.json.CMAKE_SKIP_TEST_ALL_DEPENDENCY": "テスト ターゲットがすべてのターゲットに依存するかどうかを制御します。",
	"assets/variables.json.CMAKE_SOURCE_DIR": "ソース ツリーの最上位レベルのパス。",
	"assets/variables.json.CMAKE_STAGING_PREFIX": "この変数には、クロス コンパイルするときのインストール先のパスを設定することができます。CMAKE_SYSROOT のパスが読み取り専用であるか、または何かの理由で初期状態のままにしなければならない場合に便利です。",
	"assets/variables.json.CMAKE_STATIC_LIBRARY_PREFIX": "リンクするスタティック ライブラリのプレフィックス。",
	"assets/variables.json.CMAKE_STATIC_LIBRARY_SUFFIX": "リンクするスタティック ライブラリのサフィックス。",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS": "スタティック ライブラリを作成するために使用されるフラグ。これらのフラグは、スタティック ライブラリを作成するときに、アーカイバーに渡されます。",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_CONFIG": "スタティック ライブラリを作成するために使用されるフラグ。これらのフラグは、<CONFIG> 構成でスタティック ライブラリを作成するときに、アーカイバーに渡されます。",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT": "ビルド ツリーが初めて構成されるときに CMAKE_STATIC_LINKER_FLAGS_ キャッシュ エントリを初期化するために使用する値。この変数は、ツールチェーン ファイルで設定することを想定したものです。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_INIT": "ビルド ツリーが初めて構成されるときに CMAKE_STATIC_LINKER_FLAGS キャッシュ エントリを初期化するために使用する値。この変数は、ツールチェーン ファイルで設定することを想定したものです。CMake は、環境とターゲット プラットフォームに基づいて値の先頭または末尾に内容を追加することができます。",
	"assets/variables.json.CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": "この変数には、環境変数の一覧が、構文 var=value のトークンの一覧という形式で入ります。",
	"assets/variables.json.CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": "最上位レベルの CMakeLists.txt ファイルの末尾でこの変数が ON に評価されると、Sublime Text 2 追加ジェネレーターは、ソース ツリーの内側にあるビルド ツリーを .sublime-project から除外します。",
	"assets/variables.json.CMAKE_SUPPRESS_REGENERATION": "CMAKE_SUPPRESS_REGENERATION が OFF の場合 (これが既定値)、CMake は、他のすべてのターゲットが依存する特殊なターゲットを追加することで、ビルド システムをチェックし、必要に応じて、ターゲットの仕様のソースが変更された場合に CMake を再実行してビルド システムを再生成します。",
	"assets/variables.json.CMAKE_Swift_COMPILATION_MODE": "Swift によるターゲットのコンパイル方法を指定します。この変数は、ターゲットの作成時にターゲットの Swift_COMPILATION_MODE プロパティを初期化するために使用されます。",
	"assets/variables.json.CMAKE_Swift_LANGUAGE_VERSION": "Swift 言語のバージョン番号に設定します。設定されていない場合、ホスト Xcode バージョンで使用可能であることが判明している最も古いバージョンが想定されます。",
	"assets/variables.json.CMAKE_Swift_MODULE_DIRECTORY": "Swift のモジュール出力ディレクトリ。",
	"assets/variables.json.CMAKE_Swift_NUM_THREADS": "Swift ターゲットの並列コンパイルのスレッド数。",
	"assets/variables.json.CMAKE_SYSROOT": "--sysroot フラグでコンパイラに渡すパス。",
	"assets/variables.json.CMAKE_SYSROOT_COMPILE": "ソース ファイルのコンパイル中に --sysroot フラグでコンパイラに渡すパス。これは CMAKE_SYSROOT と同じですが、ソースのコンパイル時にのみ使用され、リンク時には使用されません。",
	"assets/variables.json.CMAKE_SYSROOT_LINK": "リンク時に --sysroot フラグでコンパイラに渡すパス。これは CMAKE_SYSROOT と同じですが、リンク時にのみ使用され、ソースのコンパイル時には使用されません。",
	"assets/variables.json.CMAKE_SYSTEM": "CMake がコンパイルの対象にしているオペレーティング システムの複合名。",
	"assets/variables.json.CMAKE_SYSTEM_APPBUNDLE_PATH": "find_program および find_package のコマンドで使用される、macOS アプリケーション バンドルの検索パス。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_APPBUNDLE_PATH を使用してください。",
	"assets/variables.json.CMAKE_SYSTEM_FRAMEWORK_PATH": "find_library、find_package、find_path、find_file のコマンドで使用される、macOS フレームワークの検索パス。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_FRAMEWORK_PATH を使用してください。",
	"assets/variables.json.CMAKE_SYSTEM_IGNORE_PATH": "さまざまな find...() コマンドで無視されるディレクトリのセミコロン区切りの一覧。",
	"assets/variables.json.CMAKE_SYSTEM_IGNORE_PREFIX_PATH": "find_program、find_library、find_file、find_path コマンドで無視される検索プレフィックスのセミコロン区切りの一覧。プレフィックスは、find_package コマンドの構成モードでも無視されます (モジュール モードは影響を受けません)。代わりに特定のディレクトリを無視するには、CMAKE_IGNORE_NONPREFIX_VAR を参照してください。",
	"assets/variables.json.CMAKE_SYSTEM_INCLUDE_PATH": "find_file および find_path のコマンドの検索パスを指定するディレクトリをセミコロンで区切った一覧。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_INCLUDE_PATH を使用してください。CMAKE_SYSTEM_PREFIX_PATH もご覧ください。",
	"assets/variables.json.CMAKE_SYSTEM_LIBRARY_PATH": "find_library コマンドの検索パスを指定するディレクトリをセミコロンで区切った一覧。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_LIBRARY_PATH を使用してください。CMAKE_SYSTEM_PREFIX_PATH もご覧ください。",
	"assets/variables.json.CMAKE_SYSTEM_NAME": "CMake がビルドの対象にしているオペレーティング システムの名前。OS のバージョンについては CMAKE_SYSTEM_VERSION 変数をご覧ください。",
	"assets/variables.json.CMAKE_SYSTEM_PREFIX_PATH": "find_package、find_program、find_library、find_file、find_path コマンドで検索するインストール プレフィックスを指定するディレクトリのセミコロン区切りリスト。各コマンドは自らのドキュメントで指定されているように、適切なサブディレクトリ (bin、lib、include など) を追加します。",
	"assets/variables.json.CMAKE_SYSTEM_PROCESSOR": "クロス コンパイルではない場合、この変数は CMAKE_HOST_SYSTEM_PROCESSOR 変数と同じ値になります。多くの場合、これはビルドのターゲット アーキテクチャに対応していますが、これは保証されていません。(例: Windows では、32 ビットのターゲットで MSVC cl コンパイラを使用している場合でも、ホストが AMD64 である場合があります)。",
	"assets/variables.json.CMAKE_SYSTEM_PROGRAM_PATH": "find_program コマンドの検索パスを指定するディレクトリをセミコロンで区切った一覧。既定では、現在のシステムの標準的なディレクトリが含まれています。これをプロジェクトで変更することは意図されていません。これには CMAKE_PROGRAM_PATH を使用してください。CMAKE_SYSTEM_PREFIX_PATH もご覧ください。",
	"assets/variables.json.CMAKE_SYSTEM_VERSION": "CMake がビルドの対象にしているオペレーティング システムのバージョン。OS の名前については CMAKE_SYSTEM_NAME 変数をご覧ください。",
	"assets/variables.json.CMAKE_TASKING_TOOLSET": "コンパイラを提供するタスク ツールセットを選択する",
	"assets/variables.json.CMAKE_TEST_LAUNCHER": "この変数は、実行可能ターゲットの TEST_LAUNCHER ターゲット プロパティの作成時に初期化するために使用されます。これは、実行可能ターゲットを実行するテストを実行するための起動ツールを指定するために使用され、add_test コマンドによって追加されます。",
	"assets/variables.json.CMAKE_TLS_CAINFO": "file と file コマンドの TLS_CAINFO オプションの既定値を指定します。既定では設定が解除されています。",
	"assets/variables.json.CMAKE_TLS_VERIFY": "ファイル およびファイル コマンドのTLS_VERIFY オプションの既定値を指定します。この変数が設定されていない場合、コマンドにより CMAKE_TLS_VERIFY 環境変数がチェックされます。どちらも設定されていない場合、既定はオフになります。",
	"assets/variables.json.CMAKE_TLS_VERSION": "ファイル およびファイル コマンドの TLS_VERSION オプションの既定値を指定します。この変数が設定されていない場合、コマンドにより CMAKE_TLS_VERSION 環境変数がチェックされます。",
	"assets/variables.json.CMAKE_TOOLCHAIN_FILE": "cmake に指定されたツールチェーン ファイルのパス。",
	"assets/variables.json.CMAKE_TRY_COMPILE_CONFIGURATION": "try_compile および try_run のプロジェクトで使用されるビルド構成。",
	"assets/variables.json.CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES": "テスト プロジェクトにプラットフォーム変数を伝播させないように try_compile コマンドに伝達するには、true 値に設定します。",
	"assets/variables.json.CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": "ホスト プロジェクトと同じプラットフォームをターゲットとするために、try_compile コマンドのソース ファイル シグネチャがテスト プロジェクトに伝達する必要のある変数の一覧。",
	"assets/variables.json.CMAKE_TRY_COMPILE_TARGET_TYPE": "ソース ファイル シグネチャを使用する try_compile 呼び出しに対して生成されるターゲットの種類。有効な値は次のとおりです。",
	"assets/variables.json.CMAKE_TWEAK_VERSION": "より大きい値を定義していた可能性のある古い CMake バージョン用に作成されたコードとの互換性のため、0 に定義されています。",
	"assets/variables.json.CMAKE_UNITY_BUILD": "この変数は、ターゲットの作成時にターゲットの UNITY_BUILD プロパティを初期化するために使用されます。これを true に設定すると、各ターゲット内で複数のソースをバッチ コンパイルできるようになります。この機能は Unity または Jumbo ビルドとして知られています。",
	"assets/variables.json.CMAKE_UNITY_BUILD_BATCH_SIZE": "この変数は、ターゲットの作成時にターゲットの UNITY_BUILD_BATCH_SIZE プロパティを初期化するために使用されます。これは、unity ビルドがターゲットに対して有効になっているときに、1 つの unity ソース ファイルで結合できるソース ファイル数に対する既定の上限を指定します。",
	"assets/variables.json.CMAKE_UNITY_BUILD_UNIQUE_ID": "この変数は、ターゲットの UNITY_BUILD_UNIQUE_ID プロパティを、その作成時に初期化するために使用されます。これにより、Unity ビルドでファイルごとに生成される一意識別子の名前が指定されます。",
	"assets/variables.json.CMAKE_USER_MAKE_RULES_OVERRIDE": "プラットフォームの情報をオーバーライドする CMake ファイルを指定します。",
	"assets/variables.json.CMAKE_USER_MAKE_RULES_OVERRIDE_LANG": "<LANG> についてプラットフォームの情報をオーバーライドする CMake ファイルを指定します。",
	"assets/variables.json.CMAKE_USE_RELATIVE_PATHS": "この変数には効果がありません。以前のリリースで部分的に実装されていた効果は、CMake 3.4 で削除されました。",
	"assets/variables.json.CMAKE_VERBOSE_MAKEFILE": "Makefile のビルドからの詳細出力を有効にします。",
	"assets/variables.json.CMAKE_VERIFY_INTERFACE_HEADER_SETS": "この変数は、ターゲットの作成時にターゲットの VERIFY_INTERFACE_HEADER_SETS プロパティを初期化するために使用されます。true に設定すると、ヘッダー セットの検証が有効になります。",
	"assets/variables.json.CMAKE_VERSION": "CMake のバージョン文字列。3 つの負でない整数コンポーネントが \".\" で区切られて並びます。その後に \"-\" とその他の情報が続くことがあります。最初の 2 つのコンポーネントは機能レベルを表し、3 つ目のコンポーネントはバグ修正レベルまたは開発日付のどちらかを表します。",
	"assets/variables.json.CMAKE_VISIBILITY_INLINES_HIDDEN": "ターゲットが作成される時点での VISIBILITY_INLINES_HIDDEN ターゲット プロパティの既定値。",
	"assets/variables.json.CMAKE_VS_DEBUGGER_COMMAND": "この変数は、VS_DEBUGGER_COMMAND プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS": "この変数は、VS_DEBUGGER_COMMAND_ARGUMENTS プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_VS_DEBUGGER_ENVIRONMENT": "この変数は、VS_DEBUGGER_ENVIRONMENT プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_VS_DEBUGGER_WORKING_DIRECTORY": "この変数は、VS_DEBUGGER_WORKING_DIRECTORY プロパティを作成時に各ターゲットで初期化するために使用されます。追加情報については、そのターゲット プロパティをご覧ください。",
	"assets/variables.json.CMAKE_VS_DEVENV_COMMAND": "Visual Studio 12 2013 以降のジェネレーターでは、この変数に、対応するバージョンの Visual Studio と共にインストールされた devenv.com コマンドが設定されます。Visual Studio Express エディションではこのツールが提供されていないため、この変数が空になる可能性があることにご注意ください。",
	"assets/variables.json.CMAKE_VS_GLOBALS": "Key=Value レコードの一覧。ターゲットごとに、変数が Key で値が Value のターゲット プロパティ VS_GLOBAL_ が設定されます。",
	"assets/variables.json.CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": "既定のビルドにターゲットの INSTALL を含めます。",
	"assets/variables.json.CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": "既定のビルドにターゲットの PACKAGE を含めます。",
	"assets/variables.json.CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": "Intel Fortran プラグインがインストールされた Visual Studio 12 2013 以降向けに生成する場合、これにより .vfproj プロジェクト ファイル形式のバージョンが指定されます。これは CMake による内部使用を意図したものであるため、プロジェクト コードでは使用しないでください。",
	"assets/variables.json.CMAKE_VS_JUST_MY_CODE_DEBUGGING": "Visual Studio デバッガーで [マイコードのみ] を有効にします。",
	"assets/variables.json.CMAKE_VS_MSBUILD_COMMAND": "Visual Studio 12 2013 以上向けのジェネレーターでは、この変数に、対応するバージョンの Visual Studio と共にインストールされた MSBuild.exe コマンドが設定されます。",
	"assets/variables.json.CMAKE_VS_NO_COMPILE_BATCHING": "Visual Studio ジェネレーターを使用する場合は、コンパイル バッチをオフにします。",
	"assets/variables.json.CMAKE_VS_NsightTegra_VERSION": "CMAKE_SYSTEM_NAME 変数を Android に設定して Visual Studio ジェネレーターを使用した場合、この変数には、インストールされている NVIDIA Nsight Tegra Visual Studio Edition のバージョン番号が含まれます。",
	"assets/variables.json.CMAKE_VS_NUGET_PACKAGE_RESTORE": "Visual Studio ジェネレーターを使用する場合、このキャッシュ変数は、msbuild がビルドの前に NuGet パッケージの復元を自動的に試行するかどうかを制御します。NuGet パッケージは、ターゲットの VS_PACKAGE_REFERENCES プロパティを使用して定義できます。パッケージ参照が定義されていない場合、この設定を行うことはありません。",
	"assets/variables.json.CMAKE_VS_PLATFORM_NAME": "現在のジェネレーターで使用されている Visual Studio ターゲット プラットフォーム名です。",
	"assets/variables.json.CMAKE_VS_PLATFORM_NAME_DEFAULT": "CMAKE_GENERATOR_PLATFORM 変数の値を考慮に入れない、現在のジェネレーターの Visual Studio ターゲット プラットフォーム名の既定値。VS 2017 以下の Visual Studio ジェネレーターの場合、これは常に Win32 です。VS 2019 以上の場合は、ホスト プラットフォームに基づいて決まります。",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET": "Visual Studio のプラットフォーム ツールセット名。",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_CUDA": "Visual Studio ツールセットで使用する NVIDIA CUDA ツールキットのバージョン。",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": "スタンドアロン NVIDIA CUDA ツールキット (たとえば、インストーラーから抽出されたものなど) へのパスです。",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_FORTRAN": "Visual Studio プロジェクトで使用される Fortran コンパイラ。",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": "Visual Studio の優先されるツール アーキテクチャ。",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_VERSION": "Visual Studio のプラットフォーム ツールセットのバージョン。",
	"assets/variables.json.CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": "この変数では、Visual Studio の既定の除外ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": "この変数では、Visual Studio の既定の実行可能ファイル ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_SDK_INCLUDE_DIRECTORIES": "この変数では、Visual Studio の既定のインクルード ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_SDK_LIBRARY_DIRECTORIES": "この変数では、Visual Studio の既定のライブラリ ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": "この変数では、Visual Studio の既定のライブラリ WinRT ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_SDK_REFERENCE_DIRECTORIES": "この変数では、Visual Studio の既定の参照ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_SDK_SOURCE_DIRECTORIES": "この変数では、Visual Studio の既定のソース ディレクトリをオーバーライドできます。",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER": "Visual Studio ターゲット フレームワーク識別子。",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION": "Visual Studio ターゲット フレームワーク対象バージョン。",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_VERSION": "Visual Studio ターゲット フレームワーク バージョン。",
	"assets/variables.json.CMAKE_VS_USE_DEBUG_LIBRARIES": "Visual Studio ジェネレーターに、どの構成がデバッグ構成と見なされるかを指示します。これにより、.vcxproj ファイルの各構成の UseDebugLibraries 設定が制御されます。",
	"assets/variables.json.CMAKE_VS_VERSION_BUILD_NUMBER": "Visual Studio のバージョン。",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": "指定された Windows ターゲット プラットフォームの最小バージョンを使用するように Visual Studio ジェネレーターに指示します。",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": "Visual Studio の Windows ターゲット プラットフォームのバージョン。",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM": "VS 2015 以降の Windows 10 SDK の最大バージョンをオーバーライドします。",
	"assets/variables.json.CMAKE_VS_WINRT_BY_DEFAULT": "ターゲット プラットフォームで既定により WinRT コンパイルが有効になっており、/ZW または VS_WINRT_COMPONENT を省略した場合には、それを明示的に無効にする必要があることを VS 2010 以上の Visual Studio ジェネレーターに通知します (なお、これらのオプションのどちらかが存在する場合には、これは有効になります)",
	"assets/variables.json.CMAKE_WARN_DEPRECATED": "非推奨の機能に対して警告を発行するかどうか。",
	"assets/variables.json.CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "cmake_install.cmake スクリプトに対し、絶対 INSTALL DESTINATION を持つファイルが検出されるたびに警告するよう指示します。",
	"assets/variables.json.CMAKE_WATCOM_RUNTIME_LIBRARY": "Watcom ABI を対象とするコンパイラで使用する Watcom ランタイム ライブラリを選択します。この変数は、ターゲットの作成時にすべてのターゲットの WATCOM_RUNTIME_LIBRARY プロパティを初期化するために使用されます。また、これは、try_compile コマンドの呼び出しによってテスト プロジェクトにも反映されます。",
	"assets/variables.json.CMAKE_WIN32_EXECUTABLE": "ターゲットの WIN32_EXECUTABLE の既定値。",
	"assets/variables.json.CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": "WINDOWS_EXPORT_ALL_SYMBOLS ターゲット プロパティの既定値。この変数は、各ターゲットが作成されるたびに各ターゲット プロパティを初期化するために使用します。",
	"assets/variables.json.CMAKE_XCODE_ATTRIBUTE_an-attribute": "Xcode のターゲット属性を直接設定します。",
	"assets/variables.json.CMAKE_XCODE_BUILD_SYSTEM": "Xcode ビルド システムの選択です。",
	"assets/variables.json.CMAKE_XCODE_GENERATE_SCHEME": "これが有効な場合、Xcode ジェネレーターによってスキーマ ファイルが生成されます。これらは、コマンド ラインからの分析の起動、アーカイブ、テスト目的のビルド、テスト アクションのために役立ちます。",
	"assets/variables.json.CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": "これが有効な場合、Xcode ジェネレーターは、すべての project() コマンドに対して Xcode プロジェクト ファイルを 1 つずつ生成するのではなく、最上位の project() コマンドに対して単一の Xcode プロジェクト ファイルのみを生成します。",
	"assets/variables.json.CMAKE_XCODE_LINK_BUILD_PHASE_MODE": "この変数は、ターゲットの XCODE_LINK_BUILD_PHASE_MODE プロパティを初期化するために使用されます。これは、Xcode ジェネレーターがさまざまな種類のライブラリをリンクするために使用する方法に影響します。既定値は NONE です。",
	"assets/variables.json.CMAKE_XCODE_PLATFORM_TOOLSET": "Xcode コンパイラの選択。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": "生成された Xcode スキームの [Diagnostics] セクションで [Address Sanitizer] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": "生成された Xcode スキームの [Diagnostics] セクションで [Detect use of stack after return] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": "生成される Xcode スキームの [オプション] セクションでドキュメントのバージョン ブラウザーを使用しているときに、デバッグを許可するかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] を無効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Library Loads] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Linker API usage] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": "生成された Xcode スキームの Options セクションの Metal: API Validation のプロパティ値。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": "生成された Xcode スキームの [オプション] セクションにある GPU フレーム キャプチャのプロパティ値。値の例は Metal と Disabled です。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": "生成された Xcode スキームの Options セクションの Metal: Shader Validation のプロパティ値。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENVIRONMENT": "生成された Xcode スキームの [引数] セクションに追加する必要のある環境変数を指定します。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_GUARD_MALLOC": "生成された Xcode スキームの [Diagnostics] セクションで [Guard Malloc] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION": "ターゲットを実行するようにビルド構成を設定します。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_LAUNCH_MODE": "生成された Xcode スキームの Info セクションの Launch のプロパティ値。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] オプションの [Pause on issues] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Guard Edges] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Scribble] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_STACK": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Stack] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_THREAD_SANITIZER": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] - [Pause on issues] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] オプションの [Pause on issues] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_WORKING_DIRECTORY": "生成される Xcode スキーム内に、実行およびプロファイル操作の作業ディレクトリを指定します。",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": "生成された Xcode スキームの [Diagnostics] セクションで [Zombie Objects] を有効にするかどうか。",
	"assets/variables.json.CMAKE_XCODE_XCCONFIG": "設定されている場合、Xcode ジェネレーターは指定されたファイルをグローバル XCConfig ファイルとして登録します。ターゲット レベルの XCConfig ファイルについては、XCODE_XCCONFIG ターゲット プロパティを参照してください。",
	"assets/variables.json.CPACK_ABSOLUTE_DESTINATION_FILES": "ABSOLUTE DESTINATION パスを使用してインストールされたファイルのリストです。",
	"assets/variables.json.CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": "最上位レベルのディレクトリの包含または除外を切り替えるブール値トグル (コンポーネントの場合)。",
	"assets/variables.json.CPACK_CUSTOM_INSTALL_VARIABLES": "CPack 変数 (例: cpack -D、CPackConfig.cmake、CPACK_PROJECT_CONFIG_FILE scripts) は、インストール スクリプトで明示的に表現されません。代わりに、CPACK_CUSTOM_INSTALL_VARIABLES 変数に varName = value ペアのリストを渡すことができます。インストール時に、リストの各項目は指定する名前 (varName) を与えられた値に設定します。空の値を用いる場合は、= を省略できます。",
	"assets/variables.json.CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": " CPack に対し、絶対 INSTALL DESTINATION を持つファイルが検出されたらすぐにエラーを出すよう指示します。",
	"assets/variables.json.CPACK_INCLUDE_TOPLEVEL_DIRECTORY": "最上位レベルのディレクトリの包含または除外を切り替えるブール値トグル。",
	"assets/variables.json.CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": "パッケージ化の間に暗黙的に作成されるディレクトリの既定のアクセス許可。",
	"assets/variables.json.CPACK_PACKAGING_INSTALL_PREFIX": "ビルドされたパッケージ内で使用するプレフィックス。",
	"assets/variables.json.CPACK_SET_DESTDIR": "パッケージ化するときに CPack が DESTDIR メカニズムを使用するかどうかを示すブール値トグル。",
	"assets/variables.json.CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "CPack に対し、絶対 INSTALL DESTINATION を持つファイルが検出されるたびに警告するよう指示します。",
	"assets/variables.json.CTEST_BINARY_DIRECTORY": "ctest ダッシュボードのクライアント スクリプトの CTest BuildDirectory 設定を指定します。",
	"assets/variables.json.CTEST_BUILD_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest MakeCommand 設定を指定します。",
	"assets/variables.json.CTEST_BUILD_NAME": "ctest ダッシュボードのクライアント スクリプトの CTest BuildName 設定を指定します。",
	"assets/variables.json.CTEST_BZR_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest BZRCommand 設定を指定します。",
	"assets/variables.json.CTEST_BZR_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest BZRUpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_CHANGE_ID": "ctest ダッシュボードのクライアント スクリプトの CTest ChangeId 設定を指定します。",
	"assets/variables.json.CTEST_CHECKOUT_COMMAND": "ctest ダッシュボードのクライアント スクリプトで、ソース ディレクトリをチェックアウトまたは初期化する方法を ctest_start コマンドに伝えます。",
	"assets/variables.json.CTEST_CONFIGURATION_TYPE": "ctest ダッシュボードのクライアント スクリプトの CTest DefaultCTestConfigurationType 設定を指定します。",
	"assets/variables.json.CTEST_CONFIGURE_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest ConfigureCommand 設定を指定します。",
	"assets/variables.json.CTEST_COVERAGE_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest CoverageCommand 設定を指定します。",
	"assets/variables.json.CTEST_COVERAGE_EXTRA_FLAGS": "ctest ダッシュボードのクライアント スクリプトの CTest CoverageExtraFlags 設定を指定します。",
	"assets/variables.json.CTEST_CURL_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest CurlOptions 設定を指定します。",
	"assets/variables.json.CTEST_CUSTOM_COVERAGE_EXCLUDE": "ファイルのパスにより、ctest_coverage コマンドによるカバレッジ出力からファイルを除外するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_CUSTOM_ERROR_EXCEPTION": "エラー メッセージが検出されたときに、ctest_build コマンドによるビルド出力から除外するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_CUSTOM_ERROR_MATCH": "ctest_build コマンドによるビルド出力からエラー メッセージを検出するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_CUSTOM_ERROR_POST_CONTEXT": "ctest_build コマンドでエラー メッセージの後にコンテキストとして含める行の数。既定値は 10 です。",
	"assets/variables.json.CTEST_CUSTOM_ERROR_PRE_CONTEXT": "ctest_build コマンドでエラー メッセージの前にコンテキストとして含める行の数。既定値は 10 です。",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": "失敗したテストの出力を保存するとき、これが、ctest_test コマンドによって収集される最大サイズ (バイト) になります。既定値は 307200 (300 KiB) です。実行可能なトランザクション モードについては、「CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION」を参照してください。",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": "1 つのビルド ステップで検出されるエラーの最大数。ctest_test コマンドでは、これより後の出力が切り捨てられます。既定値は 50 です。",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": "1 つのビルド ステップで検出される警告の最大数。ctest_test コマンドでは、これより後の出力が切り捨てられます。既定値は 50 です。",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": "合格したテストの出力を保存するとき、これが、ctest_test コマンドによって収集される最大サイズ (バイト) になります。既定値は 1024 (1 KiB) です。実行可能なトランザクション モードについては、「CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION」を参照してください。",
	"assets/variables.json.CTEST_CUSTOM_MEMCHECK_IGNORE": "ctest_memcheck コマンドの実行中に、テストを除外するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_CUSTOM_POST_MEMCHECK": "ctest_memcheck コマンドの最後に実行するコマンドの一覧。",
	"assets/variables.json.CTEST_CUSTOM_POST_TEST": "ctest_test コマンドの最後に実行するコマンドの一覧。",
	"assets/variables.json.CTEST_CUSTOM_PRE_MEMCHECK": "ctest_memcheck コマンドの最初に実行するコマンドの一覧。",
	"assets/variables.json.CTEST_CUSTOM_PRE_TEST": "ctest_test コマンドの最初に実行するコマンドの一覧。",
	"assets/variables.json.CTEST_CUSTOM_TESTS_IGNORE": "ctest_test コマンドで実行されるテストのセットから除外されるテスト名の一覧。",
	"assets/variables.json.CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE または CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 変数を介して最大サイズが構成されている場合に備えて、テスト出力切り捨てモードを設定します。既定では、出力のテールは切り捨てられます。その他の使用可能な値は middle と head です。",
	"assets/variables.json.CTEST_CUSTOM_WARNING_EXCEPTION": "ctest_build コマンドによるビルド出力での警告メッセージの検出時に除外するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_CUSTOM_WARNING_MATCH": "ctest_build コマンドによるビルド出力から警告メッセージを検出するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_CVS_CHECKOUT": "非推奨。代わりに CTEST_CHECKOUT_COMMAND を使用してください。",
	"assets/variables.json.CTEST_CVS_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest CVSCommand 設定を指定します。",
	"assets/variables.json.CTEST_CVS_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest CVSUpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_DROP_LOCATION": "ctest ダッシュボードのクライアント スクリプトの CTest DropLocation 設定を指定します。",
	"assets/variables.json.CTEST_DROP_METHOD": "ctest ダッシュボードのクライアント スクリプトの CTest DropMethod 設定を指定します。",
	"assets/variables.json.CTEST_DROP_SITE": "ctest ダッシュボードのクライアント スクリプトの CTest DropSite 設定を指定します。",
	"assets/variables.json.CTEST_DROP_SITE_CDASH": "ctest ダッシュボードのクライアント スクリプトの CTest IsCDash 設定を指定します。",
	"assets/variables.json.CTEST_DROP_SITE_PASSWORD": "ctest ダッシュボードのクライアント スクリプトの CTest DropSitePassword 設定を指定します。",
	"assets/variables.json.CTEST_DROP_SITE_USER": "ctest ダッシュボードのクライアント スクリプトの CTest DropSiteUser 設定を指定します。",
	"assets/variables.json.CTEST_EXTRA_COVERAGE_GLOB": "ctest_coverage コマンドでカバーする必要のあるファイルを検索するために使用される正規表現の一覧。",
	"assets/variables.json.CTEST_GIT_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest GITCommand 設定を指定します。",
	"assets/variables.json.CTEST_GIT_INIT_SUBMODULES": "ctest ダッシュボードのクライアント スクリプトの CTest GITInitSubmodules 設定を指定します。",
	"assets/variables.json.CTEST_GIT_UPDATE_CUSTOM": "ctest ダッシュボードのクライアント スクリプトの CTest GITUpdateCustom 設定を指定します。",
	"assets/variables.json.CTEST_GIT_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest GITUpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_HG_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest HGCommand 設定を指定します。",
	"assets/variables.json.CTEST_HG_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest HGUpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_LABELS_FOR_SUBPROJECTS": "ctest ダッシュボードのクライアント スクリプトの CTest LabelsForSubprojects 設定を指定します。",
	"assets/variables.json.CTEST_MEMORYCHECK_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckCommand 設定を指定します。",
	"assets/variables.json.CTEST_MEMORYCHECK_COMMAND_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckCommandOptions 設定を指定します。",
	"assets/variables.json.CTEST_MEMORYCHECK_SANITIZER_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckSanitizerOptions 設定を指定します。",
	"assets/variables.json.CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckSuppressionFile 設定を指定します。",
	"assets/variables.json.CTEST_MEMORYCHECK_TYPE": "ctest ダッシュボードのクライアント スクリプトの CTest MemoryCheckType 設定を指定します。有効な値は、Valgrind、Purify、BoundsChecker、DrMemory、CudaSanitizer、ThreadSanitizer、AddressSanitizer、LeakSanitizer、MemorySanitizer、UndefinedBehaviorSanitizer です。",
	"assets/variables.json.CTEST_NIGHTLY_START_TIME": "ctest ダッシュボードのクライアント スクリプトの CTest NightlyStartTime 設定を指定します。",
	"assets/variables.json.CTEST_P4_CLIENT": "ctest ダッシュボードのクライアント スクリプトの CTest P4Client 設定を指定します。",
	"assets/variables.json.CTEST_P4_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest P4Command 設定を指定します。",
	"assets/variables.json.CTEST_P4_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest P4Options 設定を指定します。",
	"assets/variables.json.CTEST_P4_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest P4UpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_RESOURCE_SPEC_FILE": "ctest ダッシュボードのクライアント スクリプトの CTest ResourceSpecFile 設定を指定します。",
	"assets/variables.json.CTEST_RUN_CURRENT_SCRIPT": "この値を 0 に設定すると、ctest の実行がスクリプトの最後に到達した時点で ctest -S を呼び出しても ctest がもう一度実行されません。",
	"assets/variables.json.CTEST_SCP_COMMAND": "レガシー オプション。使用されていません。",
	"assets/variables.json.CTEST_SCRIPT_DIRECTORY": "トップレベルの CTest スクリプトを含むディレクトリです。その概念は CMAKE_SOURCE_DIR と同様です。",
	"assets/variables.json.CTEST_SITE": "ctest ダッシュボードのクライアント スクリプトの CTest Site 設定を指定します。",
	"assets/variables.json.CTEST_SOURCE_DIRECTORY": "ctest ダッシュボードのクライアント スクリプトの CTest SourceDirectory 設定を指定します。",
	"assets/variables.json.CTEST_SUBMIT_INACTIVITY_TIMEOUT": "ctest ダッシュボードのクライアント スクリプトの CTest SubmitInactivityTimeout 設定を指定します。",
	"assets/variables.json.CTEST_SUBMIT_URL": "ctest ダッシュボードのクライアント スクリプトの CTest SubmitURL 設定を指定します。",
	"assets/variables.json.CTEST_SVN_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest SVNCommand 設定を指定します。",
	"assets/variables.json.CTEST_SVN_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest SVNOptions 設定を指定します。",
	"assets/variables.json.CTEST_SVN_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest SVNUpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_TEST_LOAD": "ctest ダッシュボードのクライアント スクリプトの CTest テスト ステップに TestLoad 設定を指定します。ctest_test コマンドの TEST_LOAD オプションの既定値を設定します。",
	"assets/variables.json.CTEST_TEST_TIMEOUT": "ctest ダッシュボードのクライアント スクリプトの CTest TimeOut 設定を指定します。",
	"assets/variables.json.CTEST_TLS_VERIFY": "CTest モジュールを含める前に、ctest ダッシュボード クライアント スクリプトまたはプロジェクト CMakeLists.txt コードで CTest TLSVerify 設定を指定してください。この値は、https:// URL を使用してダッシュボードに送信するときにサーバー証明書を検証するかどうかを示すブール値です。",
	"assets/variables.json.CTEST_TLS_VERSION": "CTest モジュールを含める前に、ctest ダッシュボード クライアント スクリプトまたはプロジェクト CMakeLists.txt コードで CTest TLSVersion 設定を指定してください。この値は、HTTPS:// URL を使用してダッシュボードに送信するときに許可される最小の TLS バージョンです。",
	"assets/variables.json.CTEST_TRIGGER_SITE": "レガシー オプション。使用されていません。",
	"assets/variables.json.CTEST_UPDATE_COMMAND": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateCommand 設定を指定します。",
	"assets/variables.json.CTEST_UPDATE_OPTIONS": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateOptions 設定を指定します。",
	"assets/variables.json.CTEST_UPDATE_VERSION_ONLY": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateVersionOnly 設定を指定します。",
	"assets/variables.json.CTEST_UPDATE_VERSION_OVERRIDE": "ctest ダッシュボードのクライアント スクリプトの CTest UpdateVersionOverride  設定を指定します。",
	"assets/variables.json.CTEST_USE_LAUNCHERS": "ctest ダッシュボードのクライアント スクリプトの CTest UseLaunchers 設定を指定します。",
	"assets/variables.json.CYGWIN": "Cygwin の場合は true。",
	"assets/variables.json.ENV": "環境変数を読み取る演算子です。",
	"assets/variables.json.EXECUTABLE_OUTPUT_PATH": "以前の実行可能ファイルの場所の変数です。",
	"assets/variables.json.GHSMULTI": "Green Hills MULTI ジェネレーターを使用している場合は 1 です。",
	"assets/variables.json.IOS": "ターゲット システム (CMAKE_SYSTEM_NAME) が iOS である場合は 1 に設定します。",
	"assets/variables.json.LIBRARY_OUTPUT_PATH": "以前のライブラリの場所の変数。",
	"assets/variables.json.LINUX": "ターゲット システムが Linux の場合は true に設定します。",
	"assets/variables.json.MINGW": "Windows 上の GNU ABI (MinGW) をターゲットとするコンパイラで少なくとも 1 つの言語が有効になっている場合は、true 値に設定します。",
	"assets/variables.json.MSVC": "コンパイラが Microsoft Visual C++ のいずれかのバージョンであるか、Visual C++ cl コマンド ライン構文をシミュレートする別のコンパイラである場合は、true に設定します。",
	"assets/variables.json.MSVC10": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC11": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC12": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC14": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC60": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC70": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC71": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC80": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC90": "非推奨です。代わりに MSVC_VERSION 変数をご使用ください。",
	"assets/variables.json.MSVC_IDE": "Microsoft Visual C++ IDE を使用している場合は true です。",
	"assets/variables.json.MSVC_TOOLSET_VERSION": "使用されている Microsoft Visual C/C++ のツールセット バージョンです。MSVC 系が使用されている場合、この変数は、MSVC_VERSION 変数で指定されているコンパイラのバージョンに基づいて設定されます。",
	"assets/variables.json.MSVC_VERSION": "Microsoft Visual C/C++ が使用されている場合、そのバージョンです。Visual C++ をシミュレートするコンパイラが使用されている場合、この変数は _MSC_VER プリプロセッサ定義で指定されたとおりにシミュレートされたツールセット バージョンに設定されます。",
	"assets/variables.json.MSYS": "MSYS Makefile ジェネレーターを使用する場合は True です。",
	"assets/variables.json.PackageName_ROOT": "find_package (<PackageName>) を呼び出すと、<PackageName>_ROOT CMake 変数で指定されたプレフィックスが検索されます。ここで、<PackageName> は find_package の呼び出しで指定された (大文字と小文字が区別された) 名前であり、_ROOT はリテラルです。たとえば、find_package (Foo) は、Foo_ROOT CMake 変数で指定されたプレフィックスを検索します (設定されている場合)。ポリシー CMP0074 を参照してください。",
	"assets/variables.json.PROJECT-NAME_BINARY_DIR": "指定されたプロジェクトの最上位レベルのバイナリ ディレクトリです。",
	"assets/variables.json.PROJECT-NAME_DESCRIPTION": "プロジェクト名が <PROJECT-NAME> であるプロジェクト コマンドの最新の呼び出しの DESCRIPTION オプションに指定された値です (存在する場合)。",
	"assets/variables.json.PROJECT-NAME_HOMEPAGE_URL": "プロジェクト名が <PROJECT-NAME> であるプロジェクト コマンドの最新の呼び出しの HOMEPAGE_URL オプションに指定された値です (存在する場合)。",
	"assets/variables.json.PROJECT-NAME_IS_TOP_LEVEL": "名前付きプロジェクトが最上位レベルの CMakeLists.txt ファイルで呼び出されたかどうかを示すブール変数。",
	"assets/variables.json.PROJECT-NAME_SOURCE_DIR": "指定されたプロジェクトの最上位レベルのソース ディレクトリです。",
	"assets/variables.json.PROJECT-NAME_VERSION": "プロジェクト名が <PROJECT-NAME> であるプロジェクト コマンドの最新の呼び出しの VERSION オプションに指定された値です (存在する場合)。",
	"assets/variables.json.PROJECT-NAME_VERSION_MAJOR": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の最初のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT-NAME_VERSION_MINOR": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の 2 番目のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT-NAME_VERSION_PATCH": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の 3 番目のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT-NAME_VERSION_TWEAK": "project コマンドで設定された <PROJECT-NAME>_VERSION 変数の 4 番目のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT_BINARY_DIR": "プロジェクト用のディレクトリをビルドするための完全なパスです。",
	"assets/variables.json.PROJECT_DESCRIPTION": "project コマンドに与えられるプロジェクトの簡単な説明です。",
	"assets/variables.json.PROJECT_HOMEPAGE_URL": "プロジェクトのホームページ URL です。",
	"assets/variables.json.PROJECT_IS_TOP_LEVEL": "現在のスコープまたはその上位における直近で呼び出したプロジェクトコマンドが、最上位の CMakeLists.txt ファイルに含まれているかどうかを示すブール変数。",
	"assets/variables.json.PROJECT_NAME": "project コマンドに指定されたプロジェクトの名前です。",
	"assets/variables.json.PROJECT_SOURCE_DIR": "これは、現在のディレクトリ スコープまたはそのいずれかの親によって実行されたプロジェクト コマンドへの最後の呼び出しのソース ディレクトリです。子ディレクトリ スコープ内で実行されたプロジェクトへの呼び出しの影響は受けません (現在のスコープからの add_subdirectory への呼び出し内からなど)。",
	"assets/variables.json.PROJECT_VERSION": "プロジェクト コマンドの最新の呼び出しの VERSION オプションに指定された値です (存在する場合)。",
	"assets/variables.json.PROJECT_VERSION_MAJOR": "project コマンドで設定された PROJECT_VERSION 変数の最初のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT_VERSION_MINOR": "project コマンドで設定された PROJECT_VERSION 変数の 2 番目のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT_VERSION_PATCH": "project コマンドで設定された PROJECT_VERSION 変数の 3 番目のバージョン番号コンポーネントです。",
	"assets/variables.json.PROJECT_VERSION_TWEAK": "project コマンドで設定された PROJECT_VERSION 変数の 4 番目のバージョン番号コンポーネントです。",
	"assets/variables.json.UNIX": "ターゲット システムが UNIX または UNIX 系の場合 (例: APPLE および CYGWIN) は true に設定します。ターゲット システムについてより詳細に理解しなければならない場合は、CMAKE_SYSTEM_NAME 変数を照会する必要があります。",
	"assets/variables.json.WIN32": "ターゲット システムが Win64 などの Windows である場合は、True に設定します。",
	"assets/variables.json.WINCE": "Windows CE に CMAKE_SYSTEM_NAME 変数が設定されている場合は true です。",
	"assets/variables.json.WINDOWS_PHONE": "WindowsPhone に CMAKE_SYSTEM_NAME 変数が設定されている場合は true です。",
	"assets/variables.json.WINDOWS_STORE": "WindowsStore に CMAKE_SYSTEM_NAME 変数が設定されている場合は true です。",
	"assets/variables.json.XCODE": "Xcode ジェネレーターを使用している場合は true です。",
	"assets/variables.json.XCODE_VERSION": "Xcode (Xcode ジェネレーターのみ) のバージョン。",
	"assets/variables.json.ADVANCED": "GUI でエントリを既定で非表示にする場合に true にします。",
	"assets/variables.json.HELPSTRING": "GUI のエントリに関連付けられているヘルプです。",
	"assets/variables.json.MODIFIED": "内部管理プロパティです。設定または取得しないでください。",
	"assets/variables.json.STRINGS": "GUI 選択で可能な文字列エントリの値を列挙します。",
	"assets/variables.json.TYPE": "GUI のエントリのウィジェットの種類。",
	"assets/variables.json.VALUE": "キャッシュ エントリの値。",
	"assets/variables.json.ADDITIONAL_CLEAN_FILES": "ターゲットのグローバル クリーンの一環として削除されるファイルまたはディレクトリをセミコロンで区切った一覧。複数のターゲットや CMake 自体によって使用される、またはカスタム コマンドの出力または副産物としてキャプチャできない方法で生成される生成ファイルやディレクトリを指定するのに役立ちます。",
	"assets/variables.json.ADDITIONAL_MAKE_CLEAN_FILES": "clean ステージで削除する追加のファイル。",
	"assets/variables.json.BINARY_DIR": "この読み取り専用ディレクトリのプロパティは、読み取るソースに対応するバイナリ ディレクトリへの絶対パスを報告します。",
	"assets/variables.json.BUILDSYSTEM_TARGETS": "この読み取り専用のディレクトリのプロパティには、add_library、add_executable、add_custom_target のコマンドの呼び出しでディレクトリに追加されたビルド システム ターゲットの、セミコロンで区切られた一覧が含まれています。この一覧には、インポートされたターゲットやエイリアス ターゲットは含まれていませんが、インターフェイス ライブラリは含まれています。一覧の中の各エントリは、get_property コマンドの TARGET オプションに渡すのに適している、ターゲットの適切な論理名です。",
	"assets/variables.json.CACHE_VARIABLES": "現在のディレクトリで利用できるキャッシュ変数の一覧。",
	"assets/variables.json.CLEAN_NO_CUSTOM": "make clean 操作中にこのディレクトリに対するカスタム コマンドの出力を削除しないように Makefile ジェネレーターに指示する場合は、true に設定します。その他のジェネレーターではこれを実装できないため、この設定は無視されます。",
	"assets/variables.json.CMAKE_CONFIGURE_DEPENDS": "構成プロセスへの追加の入力ファイルについて CMake に指示します。何らかの名前付きファイルが変更された場合、ビルド システムは CMake を再実行してファイルを再構成し、ビルド システムを再生成します。",
	"assets/variables.json.COMPILE_DEFINITIONS": "ディレクトリのソースをコンパイルするためのプリプロセッサ定義。",
	"assets/variables.json.COMPILE_DEFINITIONS_CONFIG": "無視されます。CMake ポリシー CMP0043 をご覧ください。",
	"assets/variables.json.COMPILE_OPTIONS": "コンパイラに渡すオプションの一覧。",
	"assets/variables.json.DEFINITIONS": "CMake 2.4 互換性の目的でのみ使用するものです。代わりに、COMPILE_DEFINITIONS を使用してください。",
	"assets/variables.json.EXCLUDE_FROM_ALL": "サブディレクトリでこのディレクトリ プロパティを true の値に設定すると、そのターゲットがその先祖の \"すべて\" のターゲットから除外されます。除外されている場合、親ディレクトリで make などを実行すると、既定でそのサブディレクトリのターゲットはビルドされません。これは、そのサブディレクトリ自体の \"すべて\" のターゲットには影響しません。サブディレクトリ内で make などを実行すると、そのターゲットはビルドされます。",
	"assets/variables.json.IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": "ディレクトリ内の依存関係に #include 行変換を指定します。",
	"assets/variables.json.IMPORTED_TARGETS": "この読み取り専用のディレクトリのプロパティには、add_library、add_executable コマンドの呼び出しでディレクトリに追加された、インポートされたセミコロン区切りのターゲット一覧が含まれています。この一覧の各エントリーは、同じディレクトリ内で呼び出されたときに get_property コマンドの TARGET オプションに渡す際の、ターゲットの論理名です。",
	"assets/variables.json.INCLUDE_DIRECTORIES": "プリプロセッサのインクルード ファイルの検索ディレクトリの一覧です。",
	"assets/variables.json.INCLUDE_REGULAR_EXPRESSION": "ファイル スキャンの正規表現を含めます。",
	"assets/variables.json.INTERPROCEDURAL_OPTIMIZATION": "このディレクトリ プロパティは既に存在していません。",
	"assets/variables.json.INTERPROCEDURAL_OPTIMIZATION_CONFIG": "このディレクトリ プロパティは既に存在していません。",
	"assets/variables.json.LABELS": "ディレクトリとそのすべてのサブディレクトリに関連付けられたテキスト ラベルの一覧を指定します。これは、現在のディレクトリおよびサブディレクトリ内のすべてのターゲットとテストに対して、LABELS ターゲット プロパティと LABELS テスト プロパティを設定することと同じです。注: ラベルをターゲットに伝達するには、ランチャーを有効にする必要があります。",
	"assets/variables.json.LINK_DIRECTORIES": "リンカー検索のディレクトリの一覧です。",
	"assets/variables.json.LINK_OPTIONS": "共有ライブラリ、モジュール、実行可能ファイル ターゲットのリンク手順、およびデバイスのリンク手順に使用するオプションの一覧。",
	"assets/variables.json.LISTFILE_STACK": "処理中の listfiles の現在のスタックです。",
	"assets/variables.json.MACROS": "現在のディレクトリで使用可能な macro コマンドの一覧です。",
	"assets/variables.json.PARENT_DIRECTORY": "現在のサブディレクトリを追加したソース ディレクトリです。",
	"assets/variables.json.RULE_LAUNCH_COMPILE": "コンパイル規則のランチャーを指定します。",
	"assets/variables.json.RULE_LAUNCH_CUSTOM": "カスタム規則のランチャーを指定します。",
	"assets/variables.json.RULE_LAUNCH_LINK": "リンク規則のランチャーを指定します。",
	"assets/variables.json.SOURCE_DIR": "この読み取り専用のディレクトリ プロパティは、読み取るソース ディレクトリへの絶対パスを報告します。",
	"assets/variables.json.SUBDIRECTORIES": "この読み取り専用のディレクトリのプロパティには、これまで add_subdirectory または subdirs コマンドによって処理されたサブディレクトリのセミコロンで区切った一覧が含まれています。各エントリは、ソース ディレクトリ (CMakeLists.txt ファイルなど) への絶対パスです。これは get_property コマンドの DIRECTORY オプションに渡すのに適しています。",
	"assets/variables.json.SYSTEM": "このディレクトリ プロパティは、そのディレクトリで作成されたインポートされたものではないターゲットの SYSTEM ターゲット プロパティを初期化するために使用されます。SYSTEM オプションがこれらのコマンドの引数として指定されると、add_subdirectory と FetchContent_Declare によって true に設定されます。",
	"assets/variables.json.TESTS": "テストの一覧。",
	"assets/variables.json.TEST_INCLUDE_FILE": "非推奨です。代わりに、TEST_INCLUDE_FILES を使用してください。",
	"assets/variables.json.TEST_INCLUDE_FILES": "CTest の実行時に含まれる CMake ファイルの一覧。",
	"assets/variables.json.VARIABLES": "現在のディレクトリで定義された変数の一覧です。",
	"assets/variables.json.VS_GLOBAL_SECTION_POST_section": "Visual Studio で postSolution グローバル セクションを指定します。",
	"assets/variables.json.VS_GLOBAL_SECTION_PRE_section": "Visual Studio で preSolution グローバル セクションを指定します。",
	"assets/variables.json.VS_STARTUP_PROJECT": "Visual Studio ソリューションの既定のスタートアップ プロジェクトを指定します。",
	"assets/variables.json.ALLOW_DUPLICATE_CUSTOM_TARGETS": "重複したカスタム ターゲットの作成を許可します。",
	"assets/variables.json.AUTOGEN_SOURCE_GROUP": "AUTOMOC と AUTORCC、AUTOUIC によって生成されたファイルの source_group の名前。",
	"assets/variables.json.AUTOGEN_TARGETS_FOLDER": "AUTOMOC が有効になっているターゲット用に CMake によって自動的に追加される *_autogen ターゲットのフォルダーの名前。",
	"assets/variables.json.AUTOMOC_SOURCE_GROUP": "AUTOMOC によって生成されるファイルの source_group の名前。",
	"assets/variables.json.AUTOMOC_TARGETS_FOLDER": "AUTOMOC が有効になっているターゲット用に CMake によって自動的に追加される *_autogen ターゲットのフォルダーの名前。",
	"assets/variables.json.AUTORCC_SOURCE_GROUP": "AUTORCC によって生成されるファイルの source_group の名前。",
	"assets/variables.json.AUTOUIC_SOURCE_GROUP": "AUTOUIC によって生成されるファイルの source_group の名前。",
	"assets/variables.json.CMAKE_CUDA_KNOWN_FEATURES": "このバージョンの CMake に既知の CUDA 機能の一覧。",
	"assets/variables.json.CMAKE_CXX_KNOWN_FEATURES": "このバージョンの CMake に既知の C++ 機能の一覧。",
	"assets/variables.json.CMAKE_C_KNOWN_FEATURES": "このバージョンの CMake に対して既知の C 機能の一覧。",
	"assets/variables.json.CMAKE_HIP_KNOWN_FEATURES": "このバージョンの CMake で認識されている HIP 機能の一覧。",
	"assets/variables.json.CMAKE_ROLE": "現在実行中のスクリプトがどのモードであるかを示します。次のいずれかの値である可能性があります:",
	"assets/variables.json.DEBUG_CONFIGURATIONS": "デバッグの構成を指定します。",
	"assets/variables.json.DISABLED_FEATURES": "CMake の実行中に無効になる機能の一覧です。",
	"assets/variables.json.ECLIPSE_EXTRA_CPROJECT_CONTENTS": "生成された Eclipse cproject ファイルに挿入される追加の内容です。",
	"assets/variables.json.ECLIPSE_EXTRA_NATURES": "生成された Eclipse プロジェクト ファイルに追加する特性の一覧です。",
	"assets/variables.json.ENABLED_FEATURES": "CMake の実行中に有効になる機能の一覧です。",
	"assets/variables.json.ENABLED_LANGUAGES": "現在有効な言語の一覧を含む読み取り専用のプロパティ",
	"assets/variables.json.FIND_LIBRARY_USE_LIB32_PATHS": "find_library コマンドが lib32 ディレクトリを自動的に検索するかどうかを示します。",
	"assets/variables.json.FIND_LIBRARY_USE_LIB64_PATHS": "find_library が lib64 ディレクトリを自動的に検索するかどうかを示します。",
	"assets/variables.json.FIND_LIBRARY_USE_LIBX32_PATHS": "find_library コマンドが libx32 ディレクトリを自動的に検索するかどうかを示します。",
	"assets/variables.json.FIND_LIBRARY_USE_OPENBSD_VERSIONING": "find_library が OpenBSD 形式の共有ライブラリを自動的に検索するかどうかを指定します。",
	"assets/variables.json.GENERATOR_IS_MULTI_CONFIG": "複数構成のジェネレーターで true になる読み取り専用のプロパティです。",
	"assets/variables.json.GLOBAL_DEPENDS_DEBUG_MODE": "グローバル ターゲットの依存関係グラフのデバッグ モードを有効にします。",
	"assets/variables.json.GLOBAL_DEPENDS_NO_CYCLES": "グローバル ターゲットの依存関係グラフのサイクルを無効にします。",
	"assets/variables.json.INSTALL_PARALLEL": "Ninja ジェネレーターの並列インストール オプションを有効にします。",
	"assets/variables.json.IN_TRY_COMPILE": "try-compile の構成中に true になる読み取り専用のプロパティです。",
	"assets/variables.json.JOB_POOLS": "Ninja のみ: 使用可能なプールの一覧です。",
	"assets/variables.json.PACKAGES_FOUND": "CMake の実行中に検出されたパッケージの一覧です。",
	"assets/variables.json.PACKAGES_NOT_FOUND": "CMake の実行中に検出されなかったパッケージの一覧です。",
	"assets/variables.json.PREDEFINED_TARGETS_FOLDER": "CMake によって自動的に追加されたターゲットのフォルダーの名前です。",
	"assets/variables.json.PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE": "このグローバル プロパティが \"true\" に設定されている場合、CMAKE_PROJECT_TOP_LEVEL_INCLUDES 変数は、プロジェクト全体のシグネチャを使用する try_compile 呼び出しに伝達されます。ソース ファイル シグネチャの呼び出しは、このプロパティの影響を受けません。PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE は既定では設定されていません。",
	"assets/variables.json.REPORT_UNDEFINED_PROPERTIES": "設定されている場合、このファイルへの未定義のプロパティをすべて報告します。",
	"assets/variables.json.RULE_MESSAGES": "make 規則ごとにメッセージを報告するかどうかを指定します。",
	"assets/variables.json.TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": "共有ライブラリにアーカイブのように名前を付けることができるかどうかを設定します。",
	"assets/variables.json.TARGET_MESSAGES": "各ターゲットの完了を報告するかどうかを指定します。",
	"assets/variables.json.TARGET_SUPPORTS_SHARED_LIBS": "ターゲット プラットフォームは共有ライブラリをサポートします。",
	"assets/variables.json.USE_FOLDERS": "FOLDER ターゲット プロパティを使用してターゲットをフォルダーに整理するかどうかを制御します。最上位レベルの CMakeLists.txt ファイルの最後にある USE_FOLDERS の値は、動作を決定します。",
	"assets/variables.json.XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": "Xcode ジェネレーターによる EFFECTIVE_PLATFORM_NAME の出力を制御します。",
	"assets/variables.json.CPACK_DESKTOP_SHORTCUTS": "このファイルに対してデスクトップ上に作成するショートカット名の一覧を指定します。",
	"assets/variables.json.CPACK_NEVER_OVERWRITE": "インストールまたは再インストール時にこのファイルがオーバーライドされないことを要求します。",
	"assets/variables.json.CPACK_PERMANENT": "このファイルが削除またはアンインストールされないことを要求します。",
	"assets/variables.json.CPACK_STARTUP_SHORTCUTS": "このファイルに対してスタートアップ フォルダー内に作成するショートカット名の一覧を指定します。",
	"assets/variables.json.CPACK_START_MENU_SHORTCUTS": "このファイルに対してスタート メニュー内に作成するショートカット名の一覧を指定します。",
	"assets/variables.json.CPACK_WIX_ACL": "WiX インストーラーでインストールしたファイルまたはディレクトリのアクセス許可を指定します。",
	"assets/variables.json.ABSTRACT": "このソース ファイルは抽象クラスです。",
	"assets/variables.json.AUTORCC_OPTIONS": "AUTORCC 使用時の rcc に対する追加のオプション",
	"assets/variables.json.AUTOUIC_OPTIONS": "AUTOUIC 使用時の uic に対する追加のオプション",
	"assets/variables.json.COMPILE_FLAGS": "このソース ファイルをコンパイルするときに追加する追加のフラグ。",
	"assets/variables.json.CXX_SCAN_FOR_MODULES": "CXX_SCAN_FOR_MODULES は、CMake が C++ モジュールの依存関係のソースをスキャンするかどうかを指定するブール値です。ターゲット全体の設定向けの CXX_SCAN_FOR_MODULES も参照してください。",
	"assets/variables.json.EXTERNAL_OBJECT": "true に設定されている場合、これはオブジェクト ファイルです。",
	"assets/variables.json.Fortran_FORMAT": "Fortran ソース レイアウトを示す FIXED または FREE に設定します。",
	"assets/variables.json.Fortran_PREPROCESS": "Fortran のソース ファイルを無条件に前処理する必要があるかどうかを制御します。",
	"assets/variables.json.GENERATED": "このソース ファイルは、ビルドまたは CMake プロセスの一部として生成されます。",
	"assets/variables.json.HEADER_FILE_ONLY": "このソース ファイルは単なるヘッダー ファイルです。",
	"assets/variables.json.KEEP_EXTENSION": "出力ファイルがソース ファイルと同じ拡張子を持つようにしてください。",
	"assets/variables.json.LANGUAGE": "ソース ファイルが記述されているプログラミング言語を指定します。",
	"assets/variables.json.LOCATION": "ソース ファイルへの完全パスです。",
	"assets/variables.json.MACOSX_PACKAGE_LOCATION": "ソース ファイルをアプリケーション バンドル (MACOSX_BUNDLE)、コア ファンデーション バンドル (BUNDLE)、またはフレームワーク バンドル (FRAMEWORK) 内に配置します。これは macOS と iOS で適用されます。",
	"assets/variables.json.OBJECT_DEPENDS": "コンパイルされたオブジェクト ファイルが依存する追加のファイルです。",
	"assets/variables.json.OBJECT_OUTPUTS": "Ninja または Makefile ジェネレーターの規則の追加の出力です。",
	"assets/variables.json.SKIP_AUTOGEN": "ソース ファイルを AUTOMOC、AUTOUIC、AUTORCC 処理から除外します (Qt プロジェクトの場合)。",
	"assets/variables.json.SKIP_AUTOMOC": "ソース ファイルを AUTOMOC 処理から除外します (Qt プロジェクトの場合)。",
	"assets/variables.json.SKIP_AUTORCC": "ソース ファイルを AUTORCC 処理から除外します (Qt プロジェクトの場合)。",
	"assets/variables.json.SKIP_AUTOUIC": "ソース ファイルを AUTOUIC 処理から除外します (Qt プロジェクトの場合)。",
	"assets/variables.json.SKIP_LINTING": "このプロパティを使用すると、リンティング プロセスから特定のソース ファイルを除外できます。リンティング プロセスでは、<LANG>_CPPLINT、<LANG>_CLANG_TIDY、<LANG>_CPPCHECK、<LANG>_INCLUDE_WHAT_YOU_USE などのツールをソース ファイルに対して実行したり、VERIFY_INTERFACE_HEADER_SETS の一部としてヘッダー ファイルをコンパイルしたりします。ソース ファイルに SKIP_LINTING を設定すると、指定されたリンティング ツールはその特定のファイルに対して実行されません。",
	"assets/variables.json.SKIP_PRECOMPILE_HEADERS": "このソース ファイルは、PRECOMPILE_HEADERS 機能によってスキップされています。",
	"assets/variables.json.SKIP_UNITY_BUILD_INCLUSION": "このプロパティを true に設定すると、関連付けられたターゲットで UNITY_BUILD プロパティが true に設定されている場合に、Unity ビルドによってソース ファイルがスキップされるようになります。ソース ファイルは、Unity ビルドが無効になっている場合と同じように、自動的にコンパイルされます。",
	"assets/variables.json.Swift_DEPENDENCIES_FILE": "このプロパティは、ソースの Swift 依存関係ファイル (swiftdeps) のパスを設定します。指定しない場合、既定では <OBJECT>.swiftdeps が使用されます。",
	"assets/variables.json.Swift_DIAGNOSTICS_FILE": "このプロパティは、Swift 診断をシリアル化する場所を制御します。",
	"assets/variables.json.SYMBOLIC": "これは単なる規則の名前です。",
	"assets/variables.json.UNITY_GROUP": "このプロパティでは、UNITY_BUILD_MODE が GROUP に設定されたときにソースがどのバケットに含まれるかが制御されます。",
	"assets/variables.json.VS_COPY_TO_OUT_DIR": "Visual Studio プロジェクト ファイルのソース ファイルに <CopyToOutputDirectory> タグを設定します。有効な値は、Never、Always、PreserveNewest です。",
	"assets/variables.json.VS_CSHARP_tagname": "Visual Studio と CSharp のソース ファイル固有の構成。",
	"assets/variables.json.VS_DEPLOYMENT_CONTENT": "Visual Studio ジェネレーター <cmake-generators(7)> を使用してビルドした場合は、ソース ファイルを Windows Phone または Windows ストア アプリケーションによる配置のためのコンテンツとしてマークします。値は 1 または 0 に評価される必要があり、ビルド構成に基づいて選択を行うためにジェネレーター式 <cmake-generator-expressions(7)> を使用することができます。ソース ファイルの .vcxproj ファイル エントリは、値 1 および 0 に対してそれぞれ DeploymentContent および ExcludedFromBuild とマークされます。",
	"assets/variables.json.VS_DEPLOYMENT_LOCATION": "Visual Studio ジェネレーター <cmake-generators(7)> を使用してビルドされた場合に、Windows Phone または Windows ストア アプリケーションを使用してコンテンツ ソース ファイルの配置場所を指定します。このプロパティは、VS_DEPLOYMENT_CONTENT を使用している場合にのみ適用されます。値はアプリ パッケージへの相対パスを表し、すべての構成に適用されます。",
	"assets/variables.json.VS_INCLUDE_IN_VSIX": "ファイルを VSIX (Visual Studio Integration Extension) 拡張パッケージに含める必要がある場合に指定するブール値プロパティです。これは、Visual Studio 拡張機能の開発に必要です。",
	"assets/variables.json.VS_RESOURCE_GENERATOR": "このプロパティを使用すると、このファイルに使用されるリソース ジェネレーターを指定できます。設定しない場合は、PublicResXFileCodeGenerator が既定値になります。",
	"assets/variables.json.VS_SETTINGS": "ファイルに任意の項目メタデータを設定します。",
	"assets/variables.json.VS_SHADER_DISABLE_OPTIMIZATIONS": ".hlsl ソース ファイルのコンパイラの最適化を無効にします。これにより、FxCompiler ツールのコマンド ラインに -Od フラグが追加されます。コンパイラの最適化を無効にするには、このプロパティに値 true を指定します。",
	"assets/variables.json.VS_SHADER_ENABLE_DEBUG": ".hlsl ソース ファイルのデバッグ情報を有効にします。これにより、-Zi フラグが FxCompiler ツールのコマンドラインに追加されます。コンパイル済みシェーダーのデバッグ情報を生成するには、値 true を指定します。",
	"assets/variables.json.VS_SHADER_ENTRYPOINT": ".hlsl ソース ファイルのシェーダーのエントリ ポイントの名前を指定します。",
	"assets/variables.json.VS_SHADER_FLAGS": ".hlsl ソース ファイルの追加の Visual Studio シェーダー フラグを設定します。",
	"assets/variables.json.VS_SHADER_MODEL": ".hlsl ソース ファイルのシェーダー モデルを指定します。いくつかのシェーダーの種類は最新のシェーダー モデルでしか使用できません",
	"assets/variables.json.VS_SHADER_OBJECT_FILE_NAME": ".hlsl ソース ファイルのコンパイル済みシェーダー オブジェクト ファイルのファイル名を指定します。これにより、FxCompiler ツールのコマンド ラインに -Fo フラグが追加されます。",
	"assets/variables.json.VS_SHADER_OUTPUT_HEADER_FILE": ".hlsl ソース ファイルのオブジェクト コードを含む出力ヘッダー ファイルのファイル名を設定します。",
	"assets/variables.json.VS_SHADER_TYPE": ".hlsl ソース ファイルの Visual Studio シェーダーの種類を設定します。",
	"assets/variables.json.VS_SHADER_VARIABLE_NAME": ".hlsl ソース ファイルのオブジェクト コードを含むヘッダー ファイルに変数の名前を設定します。",
	"assets/variables.json.VS_TOOL_OVERRIDE": "ファイルの拡張機能に基づいていない新しいツールを使用して、ソース ファイルに適用される既定の Visual Studio ツールをオーバーライドします。",
	"assets/variables.json.VS_XAML_TYPE": "Extensible Application Markup Language (XAML) ソース ファイルを、既定のページとは異なる種類としてマークします。最も一般的な使い方は、既定の App.xaml ファイルを ApplicationDefinition として設定することです。",
	"assets/variables.json.WRAP_EXCLUDE": "このソース ファイルをすべてのコードの折り返し手法から除外します。",
	"assets/variables.json.XCODE_EXPLICIT_FILE_TYPE": "ソース ファイルへの参照に Xcode explicitFileType 属性を設定します。CMake ではファイル拡張子に基づいて既定値が算出されますが、このプロパティを使用することで明示的に指示することができます。",
	"assets/variables.json.XCODE_FILE_ATTRIBUTES": "ソース ファイルへの参照の Xcode ATTRIBUTES 設定に値を追加します。特に、これは .mig ファイルにロールを設定するために使用できます:",
	"assets/variables.json.XCODE_LAST_KNOWN_FILE_TYPE": "ソース ファイルへの参照に Xcode lastKnownFileType 属性を設定します。CMake はファイル拡張子に基づいて既定値を算出しますが、このプロパティを使用することで明示的に指示することができます。",
	"assets/variables.json.ATTACHED_FILES": "ファイルの一覧をダッシュボードの送信に添付します。",
	"assets/variables.json.ATTACHED_FILES_ON_FAIL": "テストが失敗した場合は、ファイルの一覧をダッシュボードの送信に添付します。",
	"assets/variables.json.COST": "このプロパティは、テストのコストを示します。並列テストが有効になっている場合、テスト セット内のテストはコストの降順で実行されます。プロジェクトでは、このプロパティを浮動小数点値に設定することにより、テストのコストを明示的に定義できます。",
	"assets/variables.json.DEPENDS": "このテストを指定されたテスト一覧の後にのみ実行するように指定します。",
	"assets/variables.json.DISABLED": "True に設定されている場合、テストはスキップされ、ステータスは [未実行] になります。無効なテストはテストの総数には含まれず、完了ステータスは [無効] として CDash に報告されます。",
	"assets/variables.json.ENVIRONMENT": "テストを実行するために定義する必要がある環境変数を指定します。",
	"assets/variables.json.ENVIRONMENT_MODIFICATION": "テストを実行するために変更する環境変数を指定します。このプロパティで実行する操作は、ENVIRONMENT プロパティが既に適用された後に実行されることに注意してください。",
	"assets/variables.json.FAIL_REGULAR_EXPRESSION": "テスト出力 (stdout または stderr) がこの正規表現と一致する場合、プロセス終了コードに関係なく、テストは失敗します。TIMEOUT で指定されたタイムアウトを超えるテストは、FAIL_REGULAR_EXPRESSION に関係なく失敗します。ゼロ以外のリターン コードまたはシステム レベルのテスト エラー (セグメント化エラー、シグナル中止、ヒープ エラーなど) は、正規表現が一致しない場合でもテストに失敗します。",
	"assets/variables.json.FIXTURES_CLEANUP": "テストがクリーンアップ テストとして扱われるフィクスチャの一覧を指定します。これらのフィクスチャ名はテスト ケース名とは異なり、それらに関連するテストの名前に類似する必要はありません。",
	"assets/variables.json.FIXTURES_REQUIRED": "テストに必要なフィクスチャの一覧を指定します。フィクスチャ名は大文字と小文字が区別され、テスト名に類似する必要はありません。",
	"assets/variables.json.FIXTURES_SETUP": "テストがセットアップ テストとして扱われるフィクスチャの一覧を指定します。これらのフィクスチャ名はテスト ケース名とは異なり、それらに関連するテストの名前に類似する必要はありません。",
	"assets/variables.json.GENERATED_RESOURCE_SPEC_FILE": "このテストによって生成される、動的に生成されたリソース仕様ファイル <ctest-resource-dynamically-generated-spec-file> へのパス。",
	"assets/variables.json.MEASUREMENT": "テスト時に報告される CDASH の測定と値を指定します。",
	"assets/variables.json.PASS_REGULAR_EXPRESSION": "テスト出力 (stdout または stderr) がテストに合格するには、この正規表現と一致する必要があります。プロセス終了コードは無視されます。TIMEOUT で指定されたタイムアウトを超えるテストは、PASS_REGULAR_EXPRESSION に関係なく失敗します。セグメント化エラー、シグナル中止、ヒープ エラーを含むシステム レベルのテスト エラーは、PASS_REGULAR_EXPRESSION が一致した場合でもテストに失敗する可能性があります。",
	"assets/variables.json.PROCESSORS": "このテストに必要なプロセス スロット数を指定するように設定します。設定しない場合、既定値は 1 プロセッサです。",
	"assets/variables.json.PROCESSOR_AFFINITY": "CTest に、あるプロセッサのセットの CPU アフィニティを使用してテスト プロセスを起動するように依頼するには、true 値に設定します。現在のプラットフォームで有効化され、サポートされている場合、テストプロセスの起動時に、CTest は CPU アフィニティ マスクに配置するプロセッサのセットを選択します。セット内のプロセッサ数は、PROCESSORS テスト プロパティまたは CTest で使用可能なプロセッサ数のうち、どちらか小さい方によって決まります。選択されたプロセッサのセットは、PROCESSOR_AFFINITY プロパティも有効化されている他の同時実行中のテストに割り当てられているプロセッサから分離されます。",
	"assets/variables.json.REQUIRED_FILES": "テストの実行に必要なファイルの一覧です。ファイル名は、絶対パスが指定されていない限り、テスト WORKING_DIRECTORY を基準としています。",
	"assets/variables.json.RESOURCE_GROUPS": "テストに必要なリソースを指定して、テストに有用な方法でグループ化します。このプロパティを CTest リソース割り当て機能に統合する方法の詳細については、リソース割り当て <ctest-resource-allocation> を参照してください。",
	"assets/variables.json.RESOURCE_LOCK": "このテストでロックされているリソースの一覧を指定します。",
	"assets/variables.json.RUN_SERIAL": "このテストは、他のテストと同時に実行しないでください。",
	"assets/variables.json.SKIP_REGULAR_EXPRESSION": "テスト出力 (stderr または stdout) がこの正規表現と一致する場合、プロセス終了コードに関係なく、テストはスキップ済みとしてマークされます。TIMEOUT で指定されたタイムアウトを超えるテストは、SKIP_REGULAR_EXPRESSION に関係なく失敗します。セグメント化エラー、シグナル中止、ヒープ エラーを含むシステム レベルのテスト エラーは、正規表現が一致した場合でもテストに失敗する可能性があります。",
	"assets/variables.json.SKIP_RETURN_CODE": "テストを skipped (スキップ対象) としてマークするためのリターン コードです。",
	"assets/variables.json.TIMEOUT": "このテストに与えられた秒数。",
	"assets/variables.json.TIMEOUT_AFTER_MATCH": "一致する行が出力に見つかった後のテストのタイムアウト期間を変更します。",
	"assets/variables.json.TIMEOUT_SIGNAL_GRACE_PERIOD": "TIMEOUT_SIGNAL_NAME テスト プロパティが設定されている場合、このプロパティは、カスタム シグナルの送信後にテスト プロセスが終了するまで待機する秒数を指定します。それ以外の場合、このプロパティには意味がありません。",
	"assets/variables.json.TIMEOUT_SIGNAL_NAME": "テスト プロセスのタイムアウトに達したときにテスト プロセスに送信するカスタム シグナルを指定します。これは、POSIX シグナルをサポートするプラットフォームでのみ使用できます。Windows では使用できません。",
	"assets/variables.json.WILL_FAIL": "true の場合、合格/不合格テストの条件を反転します。WILL_FAILが true であるテストは、リターン コード 0 で失敗し、0 以外のリターン コードで合格します。TIMEOUT で指定されたタイムアウトを超えるテストは、WILL_FAIL に関係なく失敗します。セグメント化エラー、シグナル中止、ヒープ エラーを含むシステム レベルのテスト エラーは、WILL_FAILが true の場合でもテストに失敗する可能性があります。",
	"assets/variables.json.WORKING_DIRECTORY": "テストの実行可能ファイルの呼び出し元ディレクトリ。",
	"assets/variables.json.AIX_EXPORT_ALL_SYMBOLS": "AIX では、CMake によってすべてのシンボルが、共有ライブラリから、また ENABLE_EXPORTS ターゲット プロパティが設定された実行可能ファイルから自動的にエクスポートされます。動作を抑制し、既定でシンボルがエクスポートされないようにするには、このブール型プロパティを明示的に無効にします。この場合、プロジェクトでは他の方法を使用していくつかのシンボルをエクスポートする必要があります。",
	"assets/variables.json.ALIASED_TARGET": "このターゲットのエイリアスとなっているターゲットの名前。",
	"assets/variables.json.ALIAS_GLOBAL": "ALIAS ターゲットターゲットをグローバルに表示するかどうかを示す読み取り専用プロパティ。",
	"assets/variables.json.ANDROID_ANT_ADDITIONAL_OPTIONS": "Android Ant ビルド システムの追加のオプションを設定します。これは、Ant ビルドのすべてのコマンド ライン オプションを含む文字列値です。ターゲットの作成時に CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_API": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android のクロス コンパイルを実行する場合、このプロパティに Android ターゲット API のバージョン (例: 15) を設定します。バージョン番号は正の 10 進数である必要があります。ターゲットの作成時に CMAKE_ANDROID_API 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_API_MIN": "Android の最小 API バージョン (例: 9) を設定します。バージョン番号は正の 10 進数である必要があります。ターゲットの作成時に CMAKE_ANDROID_API_MIN 変数が設定された場合、このプロパティはその変数の値で初期化されます。ネイティブ コードは、この API バージョンを使用してビルドされます。",
	"assets/variables.json.ANDROID_ARCH": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android のクロス コンパイルを実行する場合、このプロパティに Android ターゲット アーキテクチャを設定します。",
	"assets/variables.json.ANDROID_ASSETS_DIRECTORIES": "ビルドする前にメイン アセット フォルダーにコピーする Android アセット ディレクトリを設定します。これは、ディレクトリのパスをセミコロンで区切って並べた文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_ASSETS_DIRECTORIES 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_GUI": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android のクロス コンパイルを実行する場合、このプロパティは、実行可能ファイルを Android 上のアプリケーション パッケージとしてビルドするかどうかを指定します。",
	"assets/variables.json.ANDROID_JAR_DEPENDENCIES": "JAR の依存関係を指定する Android プロパティを設定します。これは文字列値のプロパティです。ターゲットの作成時に CMAKE_ANDROID_JAR_DEPENDENCIES 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_JAR_DIRECTORIES": "JAR ライブラリの検索先ディレクトリを指定する Android プロパティを設定します。",
	"assets/variables.json.ANDROID_JAVA_SOURCE_DIR": "Java ソース コードのルート ディレクトリを定義する Android プロパティを設定します。これは、ディレクトリのパスをセミコロンで区切って並べた文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_JAVA_SOURCE_DIR 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_NATIVE_LIB_DEPENDENCIES": ".so の依存関係を指定する Android プロパティを設定します。これは文字列のプロパティです。",
	"assets/variables.json.ANDROID_NATIVE_LIB_DIRECTORIES": ".so ライブラリの検索先ディレクトリを指定する Android プロパティを設定します。",
	"assets/variables.json.ANDROID_PROCESS_MAX": "並列実行する Android NDK コンパイラ プロセスの最大数 (例: 4) を定義する Android プロパティを設定します。ターゲットの作成時に CMAKE_ANDROID_PROCESS_MAX 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_PROGUARD": "このプロパティを ture に設定すると、ProGuard ツールが有効になり、コードを圧縮、最適化、難読化するために未使用コードが削除され、クラス、フィールド、メソッドの名前が意味のわかりにくいものに変更されます。ターゲットの作成時に CMAKE_ANDROID_PROGUARD 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_PROGUARD_CONFIG_PATH": "ProGuard 構成ファイルの場所を指定する Android プロパティを設定します。既定のものを使用するには、空のままにします。これは、ProGuard 構成ファイルへのパスを含む文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_PROGUARD_CONFIG_PATH 変数が設定された場合、このプロパティはその値で初期化されます。",
	"assets/variables.json.ANDROID_SECURE_PROPS_PATH": "セキュリティで保護されたプロパティ ファイルの場所を示す Android プロパティを設定します。これは、ファイル パスを含む文字列プロパティです。ターゲットの作成時に CMAKE_ANDROID_SECURE_PROPS_PATH 変数が設定された場合、このプロパティはその変数の値で初期化されます。",
	"assets/variables.json.ANDROID_SKIP_ANT_STEP": "Ant ビルド ステップをスキップするかどうかを定義する Android プロパティを設定します。ターゲットの作成時に CMAKE_ANDROID_SKIP_ANT_STEP 変数が設定された場合、これは、その変数の値で初期化されるブール値プロパティです。",
	"assets/variables.json.ANDROID_STL_TYPE": "NVIDIA Nsight Tegra Visual Studio Edition を使用して Android 用のクロス コンパイルを実行する場合、このプロパティはプロジェクトの STL サポートの種類を指定します。これは、次の値のいずれかに設定する文字列プロパティです。",
	"assets/variables.json.ARCHIVE_OUTPUT_DIRECTORY": "XXX ターゲット ファイルをビルドするための出力ディレクトリです。",
	"assets/variables.json.ARCHIVE_OUTPUT_DIRECTORY_CONFIG": "ARCHIVE ターゲット ファイルの、構成ごとの出力ディレクトリ。",
	"assets/variables.json.ARCHIVE_OUTPUT_NAME": "XXX ターゲット ファイルの出力名です。",
	"assets/variables.json.ARCHIVE_OUTPUT_NAME_CONFIG": "ARCHIVE ターゲット ファイルの、構成ごとの出力名。",
	"assets/variables.json.AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG は、複数構成ジェネレーターの依存関係グラフを向上させるためにターゲットに設定できるブール型プロパティです。このプロパティを有効にすると、CMake によって構成ごとのターゲットが生成されます。したがって、複数構成ジェネレーターの依存関係グラフがより正確になり、一部の再コンパイルは回避されます。",
	"assets/variables.json.AUTOGEN_BUILD_DIR": "AUTOMOC、AUTOUIC、AUTORCC がターゲットのファイルを生成するディレクトリ。",
	"assets/variables.json.AUTOGEN_COMMAND_LINE_LENGTH_MAX": "コマンド ラインにすべての引数を渡すのではなく、Windows での応答ファイルの使用をトリガーする autogen ターゲット (moc または uic など) のコマンド ラインの長さの制限。",
	"assets/variables.json.AUTOGEN_ORIGIN_DEPENDS": "元のターゲットの依存関係を対応する <ORIGIN>_autogen ターゲットに転送するためのスイッチ。",
	"assets/variables.json.AUTOGEN_PARALLEL": "AUTOMOC と AUTOUIC を使用しているときに開始する並列の moc または uic プロセスの数です。",
	"assets/variables.json.AUTOGEN_TARGET_DEPENDS": "対応する <ORIGIN>_autogen ターゲットの追加のターゲット依存関係。",
	"assets/variables.json.AUTOGEN_USE_SYSTEM_INCLUDE": "AUTOGEN_USE_SYSTEM_INCLUDE は、ターゲットに設定できるブール型プロパティであり、autogen ターゲットのインクルード ディレクトリをシステムのインクルード ディレクトリまたは通常のインクルード ディレクトリとしてターゲットに追加する必要があることを示します。",
	"assets/variables.json.AUTOMOC": "ターゲットを auto-moc で処理する必要があります (Qt プロジェクトの場合)。",
	"assets/variables.json.AUTOMOC_COMPILER_PREDEFINES": "コンパイラ事前定義ファイル moc_predefs.h を生成する必要があるかどうかを判断するために AUTOMOC が使用するブール値。",
	"assets/variables.json.AUTOMOC_DEPEND_FILTERS": "ソース ファイルの moc ファイルに対する追加の依存関係として登録されるファイル名をソース ファイルから抽出するために AUTOMOC によって使用されるフィルター定義です。",
	"assets/variables.json.AUTOMOC_EXECUTABLE": "AUTOMOC_EXECUTABLE は、AUTOMOC が有効なファイルに使用する moc 実行可能ファイルを指すファイル パスです。このプロパティを設定すると、CMake では moc バイナリの自動検出がスキップされ、バイナリが利用可能であることと正常に動作していることを確認するためにサニティテストが通常どおり実行されます。",
	"assets/variables.json.AUTOMOC_MACRO_NAMES": "C++ ファイルを moc によって処理する必要があるかどうかを判断するために AUTOMOC によって使用される、マクロ名をセミコロンで区切った一覧。",
	"assets/variables.json.AUTOMOC_MOC_OPTIONS": "AUTOMOC 使用時の moc に対する追加のオプション",
	"assets/variables.json.AUTOMOC_PATH_PREFIX": "このプロパティがオンになっている場合、CMake により AUTOMOC が有効な Qt ターゲットで moc の -p パス プレフィックス オプションが生成されます。",
	"assets/variables.json.AUTORCC": "ターゲットを auto-rcc で処理する必要があります (Qt プロジェクトの場合)。",
	"assets/variables.json.AUTORCC_EXECUTABLE": "AUTORCC_EXECUTABLE は、AUTORCC が有効なファイルに使用する rcc 実行可能ファイルを指すファイル パスです。このプロパティを設定すると、CMake では rcc バイナリの自動検出がスキップされ、バイナリが利用可能であることと正常に動作していることを確認するためにサニティテストが通常どおり実行されます。",
	"assets/variables.json.AUTOUIC": "ターゲットを auto-uic で処理する必要があります (Qt プロジェクトの場合)。",
	"assets/variables.json.AUTOUIC_EXECUTABLE": "AUTOUIC_EXECUTABLE は、AUTOUIC が有効なファイルに使用する uic 実行可能ファイルを指すファイル パスです。このプロパティを設定すると、CMake では uic バイナリの自動検出がスキップされ、バイナリが利用可能であることと正常に動作していることを確認するためにサニティテストが通常どおり実行されます。",
	"assets/variables.json.AUTOUIC_SEARCH_PATHS": "含まれる .ui ファイルを検索するために AUTOUIC によって使用される検索パスの一覧。",
	"assets/variables.json.BUILD_RPATH": "ビルド ツリーにリンクされているバイナリに追加するランタイム パス (RPATH) エントリを指定するセミコロン区切りリスト (サポートするプラットフォーム用)。既定では、CMake は、ビルド ツリー内のバイナリのランタイム パスを設定して、リンクする共有ライブラリを検索するために必要であると認識される検索パスを含みます。プロジェクトでは、追加の検索パスを指定するために BUILD_RPATH を設定できます。",
	"assets/variables.json.BUILD_RPATH_USE_ORIGIN": "ビルド RPATH に相対パスを使用するかどうか。",
	"assets/variables.json.BUILD_WITH_INSTALL_NAME_DIR": "BUILD_WITH_INSTALL_NAME_DIR は、ビルド ツリー内のターゲットの macOS install_name で INSTALL_NAME_DIR によって指定されたディレクトリを使用するかどうかを指定するブール値です。この設定は、macOS 上のターゲットにのみ適用されます。",
	"assets/variables.json.BUILD_WITH_INSTALL_RPATH": "BUILD_WITH_INSTALL_RPATH は、ビルド ツリー内のターゲットを INSTALL_RPATH とリンクするかどうかを指定するブール値です。これは SKIP_BUILD_RPATH より優先され、インストールする前に再リンクする必要がなくなります。",
	"assets/variables.json.BUNDLE": "このターゲットは、macOS 上の CFBundle です。",
	"assets/variables.json.BUNDLE_EXTENSION": "macOS および iOS 上の BUNDLE、FRAMEWORK、MACOSX_BUNDLE のターゲットの名前に対して使用するファイル拡張子。",
	"assets/variables.json.COMMON_LANGUAGE_RUNTIME": "このターゲット プロパティを設定することで、ターゲットは C++/CLI サポートを使用してビルドするように構成されます。",
	"assets/variables.json.COMPATIBLE_INTERFACE_BOOL": "リンク インターフェイスと互換性が必要なプロパティ",
	"assets/variables.json.COMPATIBLE_INTERFACE_NUMBER_MAX": "リンク インターフェイスからの最大値が使用されるプロパティ。",
	"assets/variables.json.COMPATIBLE_INTERFACE_NUMBER_MIN": "リンク インターフェイスからの最小値が使用されるプロパティ。",
	"assets/variables.json.COMPATIBLE_INTERFACE_STRING": "リンク インターフェイスと文字列互換性が必要なプロパティ",
	"assets/variables.json.COMPILE_FEATURES": "このターゲットに対して有効なコンパイラの機能。",
	"assets/variables.json.COMPILE_PDB_NAME": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの出力名。",
	"assets/variables.json.COMPILE_PDB_NAME_CONFIG": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの構成ごとの出力名。",
	"assets/variables.json.COMPILE_PDB_OUTPUT_DIRECTORY": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの出力ディレクトリ。",
	"assets/variables.json.COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG": "ソース ファイルのビルド中にコンパイラによって生成される MS デバッグ シンボル .pdb ファイルの構成ごとの出力ディレクトリ。",
	"assets/variables.json.COMPILE_WARNING_AS_ERROR": "コンパイル時の警告をエラーとして扱うかどうかを指定します。有効にした場合、コンパイル時の警告をエラーとして扱うフラグを追加します。cmake コマンド ラインで cmake --compile-no-warning-as-error オプションが指定されている場合、このプロパティは無視されます。",
	"assets/variables.json.CONFIG_OUTPUT_NAME": "構成ごとのターゲット ファイルの古いベース名です。代わりに OUTPUT_NAME_ を使用してください。",
	"assets/variables.json.CONFIG_POSTFIX": "構成 <CONFIG> のターゲット ファイル名に追加する後置。",
	"assets/variables.json.CROSSCOMPILING_EMULATOR": "指定されたエミュレーターを使用して、クロスコンパイル時に作成された実行可能ファイルを実行します。このコマンドは、ビルドされたターゲット システムの実行可能ファイルに対して add_test、add_custom_command、add_custom_target コマンドにプレフィックスとして追加されます。",
	"assets/variables.json.CUDA_ARCHITECTURES": "デバイス コードを生成するアーキテクチャの一覧です。",
	"assets/variables.json.CUDA_CUBIN_COMPILATION": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .cubin ファイルにコンパイルします。",
	"assets/variables.json.CUDA_EXTENSIONS": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。",
	"assets/variables.json.CUDA_FATBIN_COMPILATION": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .fatbin ファイルにコンパイルします。",
	"assets/variables.json.CUDA_OPTIX_COMPILATION": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .optixir ファイルにコンパイルします。",
	"assets/variables.json.CUDA_PTX_COMPILATION": "CUDA ソースを、オブジェクト ライブラリ内の .obj ファイルではなく .ptx ファイルにコンパイルします。",
	"assets/variables.json.CUDA_RESOLVE_DEVICE_SYMBOLS": "CUDA のみ: 必要に応じて、特定のライブラリ ターゲットへのデバイスのリンクを有効にします。",
	"assets/variables.json.CUDA_RUNTIME_LIBRARY": "CUDA 言語を対象とするコンパイラで使用するための CUDA ランタイム ライブラリを選択します。",
	"assets/variables.json.CUDA_SEPARABLE_COMPILATION": "CUDA のみ: デバイス コードの個別コンパイルを有効にします",
	"assets/variables.json.CUDA_STANDARD": "このターゲットをビルドするように要求された機能の CUDA/C++ 標準。",
	"assets/variables.json.CUDA_STANDARD_REQUIRED": "CUDA_STANDARD の値が必須であるかどうかを示すブール値。",
	"assets/variables.json.CXX_EXTENSIONS": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。",
	"assets/variables.json.CXX_MODULE_DIRS": "ターゲットの既定の C++ モジュール セットの基本ディレクトリのセミコロン区切りのリスト (つまり、名前と型が CXX_MODULES のファイル セット)。このプロパティは、ジェネレーター式 <cmake-generator-expressions(7)> をサポートします。",
	"assets/variables.json.CXX_MODULE_DIRS_NAME": "ターゲットの <NAME> C++ モジュール セットの基本ディレクトリのセミコロン区切りのリストで、セットの型は CXX_MODULES です。このプロパティは、ジェネレーター式 <cmake-generator-expressions(7)> をサポートします。",
	"assets/variables.json.CXX_MODULE_SET": "ターゲットの既定の C++ モジュール セット (すなわち、名前と型が CXX_MODULES であるファイル セット) のファイルのリスト。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。",
	"assets/variables.json.CXX_MODULE_SETS": "ターゲットの PRIVATE および PUBLIC C++ モジュール セットの読み取り専用リスト (つまり、型が CXX_MODULES のすべてのファイル セット)。これらのファイル セットに記載されているファイルは、IDE 統合の目的でソース ファイルとして扱われます。",
	"assets/variables.json.CXX_MODULE_SET_NAME": "ターゲットの <NAME> C++ モジュール セット内のファイルのセミコロン区切りのリストで、セットの型は CXX_MODULES です。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。",
	"assets/variables.json.CXX_MODULE_STD": "CXX_MODULE_STD は、ターゲットがインポート std (つまりその C++ ソース) を使用できるかどうかを指定するブール値。",
	"assets/variables.json.CXX_STANDARD": "このターゲットをビルドするように要求された機能の C++ 標準。",
	"assets/variables.json.CXX_STANDARD_REQUIRED": "CXX_STANDARD の値が必須であるかどうかを示すブール値。",
	"assets/variables.json.C_EXTENSIONS": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。",
	"assets/variables.json.C_STANDARD": "このターゲットをビルドするように要求された機能の C 標準。",
	"assets/variables.json.C_STANDARD_REQUIRED": "C_STANDARD の値が必要であるかどうかを示すブール値。",
	"assets/variables.json.DEBUG_POSTFIX": "ターゲット プロパティ <CONFIG>_POSTFIX を参照します。",
	"assets/variables.json.DEFINE_SYMBOL": "このターゲットのソースをコンパイルするときのシンボルを定義します。",
	"assets/variables.json.DEPLOYMENT_ADDITIONAL_FILES": "Visual Studio ジェネレーターにより生成された .vcproj ファイルに、DeploymentTool の WinCE プロジェクトの AdditionalFiles を設定します。これはリモートの WinCE デバイスでデバッグしたいときに便利です。デバイスにコピーされる追加ファイルを指定します。以下に例を示します。",
	"assets/variables.json.DEPLOYMENT_REMOTE_DIRECTORY": "Visual Studio ジェネレーターによって生成された .vcproj ファイルに、DebuggerTool の DeploymentTool と RemoteExecutable の WinCE プロジェクトの RemoteDirectory を設定します。これはリモートの WinCE デバイスでデバッグしたいときに便利です。以下に例を示します。",
	"assets/variables.json.DEPRECATION": "インポートされたターゲットの開発者からの非推奨メッセージ。",
	"assets/variables.json.DISABLE_PRECOMPILE_HEADERS": "PRECOMPILE_HEADERS プロパティによって指定されたヘッダー ファイルのプリコンパイルを無効にします。",
	"assets/variables.json.DLL_NAME_WITH_SOVERSION": "このプロパティは、WIN32 変数が設定されるときに選択される Windows プラットフォーム用に生成された DLL のファイル名に SOVERSION ターゲット プロパティを追加するかどうかを制御します。",
	"assets/variables.json.DOTNET_SDK": "C# プロジェクトの .NET SDK を指定します。例: Microsoft .NET SDK。",
	"assets/variables.json.DOTNET_TARGET_FRAMEWORK": ".NET ターゲット フレームワークを指定します。",
	"assets/variables.json.DOTNET_TARGET_FRAMEWORK_VERSION": ".NET ターゲット フレームワーク バージョンを指定してください。",
	"assets/variables.json.EchoString": "ターゲットがビルドされるときに表示されるメッセージです。",
	"assets/variables.json.ENABLE_EXPORTS": "実行可能ファイルまたは共有ライブラリのどちらがシンボルをエクスポートするかを指定します。",
	"assets/variables.json.EXCLUDE_FROM_DEFAULT_BUILD": "ターゲットを [ソリューションのビルド] から除外します。",
	"assets/variables.json.EXCLUDE_FROM_DEFAULT_BUILD_CONFIG": "[ソリューションのビルド] から除外するターゲットの構成ごとのバージョンです。",
	"assets/variables.json.EXPORT_COMPILE_COMMANDS": "ターゲットについて生成中にコンパイル コマンドの出力を有効または無効にします。",
	"assets/variables.json.EXPORT_FIND_PACKAGE_NAME": "インストールまたはエクスポートで find_dependency 呼び出しをエクスポートするときに、依存関係ターゲットに関連付けられているパッケージ名を制御します。これを使用して、CMake によってビルドされエクスポートされたパッケージにパッケージ名を割り当てたり、ターゲットを作成した find_package 呼び出しでパッケージをオーバーライドしたりできます。",
	"assets/variables.json.EXPORT_NAME": "ターゲット ファイルのエクスポートされた名前です。",
	"assets/variables.json.EXPORT_NO_SYSTEM": "このプロパティは、インストール コマンドとエクスポート コマンドがそれぞれターゲットをインストールまたはエクスポートする際の動作に影響します。EXPORT_NO_SYSTEMが true に設定されている場合、これらのコマンドは SYSTEM プロパティが false に設定されたインポートされたターゲットを生成します。",
	"assets/variables.json.EXPORT_PROPERTIES": "ターゲットのためにエクスポートする追加のプロパティを一覧表示します。",
	"assets/variables.json.FOLDER": "フォルダー階層を使用してターゲットを表示する IDE の場合、このプロパティはターゲットを配置するフォルダーの名前を指定します。フォルダーを入れ子にするには、フォルダー レベルを区切る / 文字を含む GUI/ダイアログなどの FOLDER 値を使用します。FOLDER プロパティのないターゲットは、最上位レベルのエンティティとして表示されます。同じ FOLDER プロパティ値を持つターゲットがきょうだいと同じフォルダーに表示されます。",
	"assets/variables.json.Fortran_BUILDING_INSTRINSIC_MODULES": "ターゲットが Fortran コンパイラをビルドするために Fortran 組み込みをビルドしていることを CMake Fortran プリプロセッサに指示します。",
	"assets/variables.json.Fortran_MODULE_DIRECTORY": "ターゲットによって提供される Fortran モジュールの出力ディレクトリを指定します。",
	"assets/variables.json.FRAMEWORK": "macOS および iOS 上でフレームワーク バンドルとして共有ライブラリまたはスタティック ライブラリをビルドします。",
	"assets/variables.json.FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG": "マルチ構成ジェネレーター (Xcode および Ninja マルチ構成など) を使用しているときに、構成 <CONFIG> のフレームワーク ファイル名に追加する接尾辞です。",
	"assets/variables.json.FRAMEWORK_VERSION": "FRAMEWORK ターゲット プロパティ (例: A) を使用して作成されたフレームワークのバージョンです。",
	"assets/variables.json.GENERATOR_FILE_NAME": "このターゲットのジェネレーターのファイルです。",
	"assets/variables.json.GHS_INTEGRITY_APP": "実行可能ファイルのターゲットを整合性アプリケーションとして扱うかどうかを決定する ON/OFF ブール値です。",
	"assets/variables.json.GHS_NO_SOURCE_GROUP_FILE": "ターゲットのプロジェクト ファイルが 1 つのファイルまたは複数のファイルであるべきかどうかを制御する ON/OFF ブール値です。",
	"assets/variables.json.GNUtoMS": "GNU インポート ライブラリ (.dll.a) を MS 形式 (.lib) に変換します。",
	"assets/variables.json.HAS_CXX": "C++ リンカー ツール (現在不使用) を使用してターゲットをリンクします。",
	"assets/variables.json.HEADER_DIRS": "ターゲットの既定のヘッダー セット (すなわち、HEADERS 型を持つファイル セット) のベース ディレクトリのセミコロン区切りの一覧。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。",
	"assets/variables.json.HEADER_DIRS_NAME": "ターゲットの <NAME> ヘッダー セットのベース ディレクトリのセミコロン区切りの一覧で、設定の種類は HEADERS です。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。",
	"assets/variables.json.HEADER_SET": "ターゲットの既定のヘッダー セット (すなわち、名前と種類が HEADERS であるファイル セット) のファイルの一覧。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。",
	"assets/variables.json.HEADER_SETS": "ターゲットの PRIVATE および PUBLIC ヘッダー セット (すなわち、HEADERS 型を持つすべてのファイル セット) の読み取り専用の一覧。これらのファイル セットに一覧表示されているファイルは、IDE 統合の目的でソース ファイルとして扱われます。また、ファイルは、HEADER_FILE_ONLY プロパティも TRUE に設定されています。",
	"assets/variables.json.HEADER_SET_NAME": "ターゲットの <NAME> ヘッダー セット内のファイルのセミコロン区切りの一覧で、種類は HEADERS に設定されます。相対パスの場合は、ターゲットのソース ディレクトリに対する相対パスが計算されます。このプロパティは、<cmake-generator-expressions(7)> ジェネレーター式をサポートします。",
	"assets/variables.json.HIP_ARCHITECTURES": "デバイス コードを生成する GPU アーキテクチャの一覧。アーキテクチャ名は、CMAKE_HIP_PLATFORM に基づいて解釈されます。",
	"assets/variables.json.HIP_EXTENSIONS": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。",
	"assets/variables.json.HIP_STANDARD": "HIP/C++ 標準でこのターゲットのビルドが要求されました。",
	"assets/variables.json.HIP_STANDARD_REQUIRED": "HIP_STANDARD の値が必須であるかどうかを示すブール値。",
	"assets/variables.json.IMPORTED": "ターゲットが IMPORTED であるかどうかを示す読み取り専用の表示です。",
	"assets/variables.json.IMPORTED_COMMON_LANGUAGE_RUNTIME": "ターゲットが C++/CLI を使用するかどうかを定義するプロパティです。",
	"assets/variables.json.IMPORTED_CONFIGURATIONS": "インポート済みターゲットに指定された構成です。",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS": "IMPORTED ターゲットの C++ モジュール ソースをコンパイルするためのプリプロセッサ定義。",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_FEATURES": "この IMPORTED ターゲットの C++ モジュールに対してコンパイラ機能が有効になっています。",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_OPTIONS": "この IMPORTED ターゲットの C++ モジュールのコンパイラに渡すオプションの一覧。",
	"assets/variables.json.IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES": "IMPORTED ターゲットの C++ モジュールをコンパイルするときのプリプロセッサ インクルード ファイル検索ディレクトリの一覧。",
	"assets/variables.json.IMPORTED_CXX_MODULES_LINK_LIBRARIES": "ターゲットの C++ モジュール内の C++ モジュールの使用要件に使用する直接依存関係の一覧。",
	"assets/variables.json.IMPORTED_GLOBAL": "IMPORTED ターゲットをグローバルに表示するかどうかを示します。",
	"assets/variables.json.IMPORTED_IMPLIB": "IMPORTED ターゲットのインポート ライブラリへの完全なパスです。",
	"assets/variables.json.IMPORTED_IMPLIB_CONFIG": "<CONFIG>-IMPORTED_IMPLIB プロパティの特定バージョン。",
	"assets/variables.json.IMPORTED_LIBNAME": "インポートされたインターフェイス ライブラリのリンク ライブラリ名を指定します。",
	"assets/variables.json.IMPORTED_LIBNAME_CONFIG": "<CONFIG>-IMPORTED_LIBNAME プロパティの特定バージョン。",
	"assets/variables.json.IMPORTED_LINK_DEPENDENT_LIBRARIES": "インポートされた共有ライブラリの依存共有ライブラリです。",
	"assets/variables.json.IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG": "<CONFIG>-IMPORTED_LINK_DEPENDENT_LIBRARIES の特定バージョン。",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LANGUAGES": "IMPORTED スタティック ライブラリにコンパイルされる言語です。",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG": "<CONFIG>-IMPORTED_LINK_INTERFACE_LANGUAGES の特定バージョン。",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LIBRARIES": "IMPORTED ターゲットの推移的なリンク インターフェイスです。",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG": "<CONFIG>-IMPORTED_LINK_INTERFACE_LIBRARIES の特定バージョン。",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_MULTIPLICITY": "IMPORTED スタティック ライブラリのサイクルの繰り返し回数です。",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG": "<CONFIG>-IMPORTED_LINK_INTERFACE_MULTIPLICITY の特定バージョン。",
	"assets/variables.json.IMPORTED_LOCATION": "IMPORTED ターゲット用のディスク上のメイン ファイルへの完全なパスです。",
	"assets/variables.json.IMPORTED_LOCATION_CONFIG": "<CONFIG>-IMPORTED_LOCATION プロパティの特定バージョン。",
	"assets/variables.json.IMPORTED_NO_SONAME": "IMPORTED 共有ライブラリ ターゲットが soname を持たないように指定します。",
	"assets/variables.json.IMPORTED_NO_SONAME_CONFIG": "<CONFIG>-IMPORTED_NO_SONAME プロパティの特定バージョン。",
	"assets/variables.json.IMPORTED_NO_SYSTEM": "インポートされたターゲットで IMPORTED_NO_SYSTEM を true に設定すると、システム ターゲットではないことを指定することになります。これには、次の効果があります:",
	"assets/variables.json.IMPORTED_OBJECTS": "インポートされたオブジェクト ライブラリのディスク上のオブジェクト ファイルへの絶対パスのセミコロンで区切った一覧です。",
	"assets/variables.json.IMPORTED_OBJECTS_CONFIG": "<CONFIG> に特化したバージョンの IMPORTED_OBJECTS プロパティ。",
	"assets/variables.json.IMPORTED_SONAME": "共有ライブラリの種類の IMPORTED ターゲットの soname です。",
	"assets/variables.json.IMPORTED_SONAME_CONFIG": "<CONFIG>-IMPORTED_SONAME プロパティの特定バージョン。",
	"assets/variables.json.IMPORT_PREFIX": "インポート ライブラリ名の前に付くものです。",
	"assets/variables.json.IMPORT_SUFFIX": "インポート ライブラリ名の後に付くものです。",
	"assets/variables.json.INSTALL_NAME_DIR": "Apple プラットフォーム上にインストールされているターゲットのディレクトリ名。",
	"assets/variables.json.INSTALL_REMOVE_ENVIRONMENT_RPATH": "インストール中に、ツールチェーン定義の rpath を削除する必要があるかどうかを制御します。",
	"assets/variables.json.INSTALL_RPATH": "インストール済みターゲットに使用する rpath。",
	"assets/variables.json.INSTALL_RPATH_USE_LINK_PATH": "リンカー検索のパスとインストール済みの rpath を追加します。",
	"assets/variables.json.INTERFACE_AUTOMOC_MACRO_NAMES": "コンシューマーに反映される AUTOMOC のマクロ名のセミコロン区切りの一覧。",
	"assets/variables.json.INTERFACE_AUTOUIC_OPTIONS": "uic に渡すインターフェイス オプションの一覧です。",
	"assets/variables.json.INTERFACE_COMPILE_DEFINITIONS": "ライブラリ用のパブリック property_name 要件のリストです。",
	"assets/variables.json.INTERFACE_COMPILE_FEATURES": "ライブラリ用のパブリック property_name 要件のリストです。",
	"assets/variables.json.INTERFACE_COMPILE_OPTIONS": "ライブラリ用のパブリック property_name 要件のリストです。",
	"assets/variables.json.INTERFACE_CXX_MODULE_SETS": "ターゲットの PUBLIC C++ モジュール セットの読み取り専用リスト (つまり、型が CXX_MODULES のすべてのファイル セット)。これらの C++ モジュール セットにリストされているファイルは、install でインストールし、install and export を使用してエクスポートできます。",
	"assets/variables.json.INTERFACE_HEADER_SETS": "ターゲットの INTERFACE および PUBLIC ヘッダー セット (すなわち、HEADERS 型を持つすべてのファイル セット) の読み取り専用の一覧。これらのヘッダー セットに一覧表示されているファイルは、インストールを使用してインストールし、インストールとエクスポートを使用してエクスポートできます。",
	"assets/variables.json.INTERFACE_HEADER_SETS_TO_VERIFY": "検証する必要があるターゲットの PUBLIC ヘッダー セットと INTERFACE ヘッダー セットを指定するために使用されます。",
	"assets/variables.json.INTERFACE_INCLUDE_DIRECTORIES": "ライブラリ用のパブリック property_name 要件のリストです。",
	"assets/variables.json.INTERFACE_LINK_DEPENDS": "ターゲット バイナリがリンクのために依存する追加のパブリック インターフェイス ファイルです。",
	"assets/variables.json.INTERFACE_LINK_DIRECTORIES": "ライブラリ用のパブリック property_name 要件のリストです。",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES": "ライブラリ用のパブリック インターフェイス ライブラリを一覧表示します。",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES_DIRECT": "このライブラリのコンシューマーが直接リンクの依存関係として扱うライブラリの一覧。",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE": "このライブラリのコンシューマーが直接リンクの依存関係として扱うべきでないライブラリの一覧。",
	"assets/variables.json.INTERFACE_LINK_OPTIONS": "ライブラリ用のパブリック property_name 要件のリストです。",
	"assets/variables.json.INTERFACE_POSITION_INDEPENDENT_CODE": "コンシューマーが位置に依存しないターゲットを作成する必要があるかどうか",
	"assets/variables.json.INTERFACE_PRECOMPILE_HEADERS": "使用するターゲットにプリコンパイルするインターフェイスのヘッダー ファイルの一覧です。",
	"assets/variables.json.INTERFACE_SOURCES": "使用するターゲットにコンパイルするインターフェイスのソースの一覧です。",
	"assets/variables.json.INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": "ライブラリ用のパブリック システムのインクルード ディレクトリの一覧です。",
	"assets/variables.json.IOS_INSTALL_COMBINED": "インストール時に複合 (デバイスとシミュレーター) のターゲットをビルドします。",
	"assets/variables.json.ISPC_HEADER_DIRECTORY": "ターゲットによって提供される ISPC ヘッダーの相対出力ディレクトリを指定します。",
	"assets/variables.json.ISPC_HEADER_SUFFIX": "ターゲットによって提供される、ISPC で生成されたヘッダーに使用する出力サフィックスを指定します。",
	"assets/variables.json.ISPC_INSTRUCTION_SETS": "コードを生成する命令セット アーキテクチャの一覧です。",
	"assets/variables.json.JOB_POOL_COMPILE": "Ninja のみ: コンパイルに使用されるプールです。",
	"assets/variables.json.JOB_POOL_LINK": "Ninja のみ: リンク設定に使用されるプールです。",
	"assets/variables.json.JOB_POOL_PRECOMPILE_HEADER": "Ninja のみ: プリコンパイル済みヘッダーを生成するために使用されるプールです。",
	"assets/variables.json.LANG_CLANG_TIDY": "このプロパティは、<LANG> が C、CXX、OBJC、または OBJCXX の場合にのみ実装されます。",
	"assets/variables.json.LANG_CLANG_TIDY_EXPORT_FIXES_DIR": "このプロパティは、<LANG> が C、CXX、OBJC、または OBJCXX の場合にのみ実装され、<LANG>_CLANG_TIDY が設定されている場合にのみ効果があります。",
	"assets/variables.json.LANG_COMPILER_LAUNCHER": "このプロパティは、<LANG> が C、CXX、Fortran、HIP、ISPC、OBJC、OBJCXX、または CUDA の場合にのみ実装されます。",
	"assets/variables.json.LANG_CPPCHECK": "このプロパティは、<LANG> が C または CXX の場合にのみサポートされています。",
	"assets/variables.json.LANG_CPPLINT": "このプロパティは、<LANG> が C または CXX の場合にのみサポートされています。",
	"assets/variables.json.LANG_EXTENSIONS": "このバリエーションは次のとおりです。",
	"assets/variables.json.LANG_INCLUDE_WHAT_YOU_USE": "このプロパティは、<LANG> が C または CXX の場合にのみ実装されています。",
	"assets/variables.json.LANG_LINKER_LAUNCHER": "このプロパティは、<LANG> が C、CXX、OBJC、OBJCXX の場合のみ実装されます。",
	"assets/variables.json.LANG_STANDARD": "このバリエーションは次のとおりです。",
	"assets/variables.json.LANG_STANDARD_REQUIRED": "このバリエーションは次のとおりです。",
	"assets/variables.json.LANG_VISIBILITY_PRESET": "シンボル表示コンパイル フラグの値",
	"assets/variables.json.LIBRARY_OUTPUT_DIRECTORY": "XXX ターゲット ファイルをビルドするための出力ディレクトリです。",
	"assets/variables.json.LIBRARY_OUTPUT_DIRECTORY_CONFIG": "ライブラリ ターゲット ファイルの構成ごとの出力ディレクトリ。",
	"assets/variables.json.LIBRARY_OUTPUT_NAME": "XXX ターゲット ファイルの出力名です。",
	"assets/variables.json.LIBRARY_OUTPUT_NAME_CONFIG": "ライブラリ ターゲット ファイルの構成ごとの出力名。",
	"assets/variables.json.LINKER_LANGUAGE": "コンパイラがリンカーを呼び出す言語を指定します。",
	"assets/variables.json.LINKER_TYPE": "リンク ステップに使用するリンカーを指定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。",
	"assets/variables.json.LINK_DEPENDS": "ターゲット バイナリがリンクのために依存する追加のファイル。",
	"assets/variables.json.LINK_DEPENDS_NO_SHARED": "リンクされた共有ライブラリ ファイルに依存しません。",
	"assets/variables.json.LINK_FLAGS": "このターゲットが共有ライブラリ、モジュール ライブラリ、または実行可能ファイルの場合に、そのリンク時に使用する追加のフラグです。スタティック ライブラリでは、STATIC_LIBRARY_OPTIONS または STATIC_LIBRARY_FLAGS プロパティを使用する必要があります。",
	"assets/variables.json.LINK_FLAGS_CONFIG": "SHARED ライブラリ、MODULE、EXECUTABLE ターゲットの構成ごとのリンカー フラグ。",
	"assets/variables.json.LINK_INTERFACE_LIBRARIES": "共有ライブラリまたは実行可能ファイルのパブリック インターフェイス ライブラリを一覧表示します。",
	"assets/variables.json.LINK_INTERFACE_LIBRARIES_CONFIG": "ターゲットの構成ごとのパブリック インターフェイス ライブラリの一覧です。",
	"assets/variables.json.LINK_INTERFACE_MULTIPLICITY": "循環依存関係を持つスタティック ライブラリの繰り返し回数です。",
	"assets/variables.json.LINK_INTERFACE_MULTIPLICITY_CONFIG": "スタティック ライブラリのサイクルの構成ごとの繰り返し回数です。",
	"assets/variables.json.LINK_LIBRARIES": "直接リンクの依存関係の一覧です。",
	"assets/variables.json.LINK_LIBRARIES_ONLY_TARGETS": "ターゲット名にすることができるリンク項目が、実際には既存のターゲットであることを適用します。",
	"assets/variables.json.LINK_LIBRARY_OVERRIDE": "LINK_LIBRARY ジェネレーター式からライブラリに関連付けられたライブラリ機能をオーバーライドします。これは、異なる LINK_LIBRARY ジェネレーター式で同じライブラリに異なる機能を指定した結果、互換性のないライブラリ機能を解決するために使用できます。",
	"assets/variables.json.LINK_LIBRARY_OVERRIDE_LIBRARY": "LINK_LIBRARY ジェネレーター式から <LIBRARY> に関連付けられたライブラリ機能をオーバーライドします。これは、異なる LINK_LIBRARY ジェネレーター式で <LIBRARY> に異なる機能を指定した結果、互換性のないライブラリ機能を解決するために使用できます。",
	"assets/variables.json.LINK_SEARCH_END_STATIC": "スタティック システム ライブラリが使用されるように、リンク行を終了します。",
	"assets/variables.json.LINK_SEARCH_START_STATIC": "既定で、リンカーはスタティック ライブラリを探すと仮定します。",
	"assets/variables.json.LINK_WHAT_YOU_USE": "これはブール値のオプションであり、TRUE に設定すると、リンク後にターゲット上で自動的に変数 CMAKE_LINK_WHAT_YOU_USE_CHECK のコンテンツが実行されます。また、コマンド ラインで指定されたすべてのライブラリがターゲットにリンクされるように、変数 CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG で指定されたリンカー フラグがリンク コマンドによってターゲットに渡されます。これにより、リンクは、このターゲットによって使用されリンクされているシンボルが指定されていないライブラリの一覧を生成します。",
	"assets/variables.json.LOCATION_CONFIG": "ディスク上のターゲットの場所を示す読み取り専用プロパティです。",
	"assets/variables.json.MACHO_COMPATIBILITY_VERSION": "Mach-O バイナリのこのターゲットの互換性バージョン番号です。",
	"assets/variables.json.MACHO_CURRENT_VERSION": "Mach-O バイナリのこのターゲットの現在のバージョン番号です。",
	"assets/variables.json.MACOSX_BUNDLE": "macOS または iOS 上でアプリケーション バンドルとして実行可能ファイルをビルドします。",
	"assets/variables.json.MACOSX_BUNDLE_INFO_PLIST": "macOS と iOS アプリケーション バンドルのカスタムの Info.plist テンプレートを指定します。",
	"assets/variables.json.MACOSX_FRAMEWORK_INFO_PLIST": "macOS と iOS フレームワークのカスタムの Info.plist テンプレートを指定してください。",
	"assets/variables.json.MACOSX_RPATH": "macOS または iOS 上のこのターゲットが、実行時に rpath を使用して検索されるかどうか。",
	"assets/variables.json.MANUALLY_ADDED_DEPENDENCIES": "他のトップレベルのターゲットに手動で追加された依存関係を取得します。",
	"assets/variables.json.MAP_IMPORTED_CONFIG_CONFIG": "プロジェクト構成からインポート済みターゲットの構成にマップします。",
	"assets/variables.json.MSVC_DEBUG_INFORMATION_FORMAT": "MSVC ABI を対象とする場合は、デバッグ情報の形式を選択します。",
	"assets/variables.json.MSVC_RUNTIME_LIBRARY": "MSVC ABI を対象とするコンパイラで使用するための MSVC ランタイム ライブラリを選択します。",
	"assets/variables.json.NAME": "ターゲットの論理名です。",
	"assets/variables.json.NO_SONAME": "共有ライブラリをリンクするときに soname を設定するかどうか。",
	"assets/variables.json.NO_SYSTEM_FROM_IMPORTED": "使用済みのインポートされたターゲットのインターフェイスからのインクルード ディレクトリをシステム ディレクトリとして扱わないでください。",
	"assets/variables.json.OBJCXX_EXTENSIONS": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。",
	"assets/variables.json.OBJCXX_STANDARD": "このターゲットをビルドするように要求された機能の ObjC++ 標準。",
	"assets/variables.json.OBJCXX_STANDARD_REQUIRED": "OBJCXX_STANDARD の値が必要であるかどうかを示すブール値。",
	"assets/variables.json.OBJC_EXTENSIONS": "コンパイラ特有の拡張子を要求するかどうかを指定するブール値です。",
	"assets/variables.json.OBJC_STANDARD": "このターゲットをビルドするように要求された機能の OBJC 標準。",
	"assets/variables.json.OBJC_STANDARD_REQUIRED": "OBJC_STANDARD の値が必要であるかどうかを示すブール値。",
	"assets/variables.json.OPTIMIZE_DEPENDENCIES": "静的およびオブジェクト ライブラリの依存関係の最適化をアクティブにします。",
	"assets/variables.json.OSX_ARCHITECTURES": "macOS の特定のアーキテクチャをターゲットとします。",
	"assets/variables.json.OSX_ARCHITECTURES_CONFIG": "ターゲットの構成ごとの macOS と iOS のバイナリ アーキテクチャです。",
	"assets/variables.json.OUTPUT_NAME": "ターゲット ファイルの出力名です。",
	"assets/variables.json.OUTPUT_NAME_CONFIG": "構成ごとのターゲット ファイルのベース名です。",
	"assets/variables.json.PCH_INSTANTIATE_TEMPLATES": "このプロパティが true に設定されている場合、プリコンパイル済みヘッダーのコンパイラ オプションには、PCH の生成中にテンプレートをインスタンス化するためのフラグが含まれます (サポートされている場合)。これにより、コンパイル時間が大幅に短縮されます。バージョン 11 以降の Clang でサポートされています。",
	"assets/variables.json.PCH_WARN_INVALID": "このプロパティが true に設定されている場合、プリコンパイル ヘッダー コンパイラのオプションには、無効なプリコンパイル済みヘッダー (GNU コンパイラの場合は -Winvalid-pch など) の警告を表示するコンパイラ フラグが含まれます。",
	"assets/variables.json.PDB_NAME": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの出力名です。",
	"assets/variables.json.PDB_NAME_CONFIG": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの構成ごとの出力名です。",
	"assets/variables.json.PDB_OUTPUT_DIRECTORY": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの出力ディレクトリです。",
	"assets/variables.json.PDB_OUTPUT_DIRECTORY_CONFIG": "実行可能ファイルまたは共有ライブラリ ターゲットのリンカーによって生成された MS デバッグ シンボル .pdb ファイルの構成ごとの出力ディレクトリです。",
	"assets/variables.json.POSITION_INDEPENDENT_CODE": "位置に依存しないターゲットを作成するかどうか",
	"assets/variables.json.POST_INSTALL_SCRIPT": "非推奨のインストール サポート。",
	"assets/variables.json.PRECOMPILE_HEADERS": "プリコンパイルするヘッダー ファイルの一覧です。",
	"assets/variables.json.PRECOMPILE_HEADERS_REUSE_FROM": "プリコンパイル済みヘッダー ビルド成果物を再利用元のターゲット。",
	"assets/variables.json.PREFIX": "ライブラリ名の前に付くものです。",
	"assets/variables.json.PRE_INSTALL_SCRIPT": "非推奨のインストール サポート。",
	"assets/variables.json.PRIVATE_HEADER": "FRAMEWORK 共有ライブラリ ターゲットのプライベート ヘッダー ファイルを指定します。",
	"assets/variables.json.PROJECT_LABEL": "IDE 内のターゲットの名前を変更します。",
	"assets/variables.json.PUBLIC_HEADER": "FRAMEWORK 共有ライブラリ ターゲットのパブリック ヘッダー ファイルを指定します。",
	"assets/variables.json.RESOURCE": "FRAMEWORK または BUNDLE 内のリソース ファイルを指定します。",
	"assets/variables.json.RUNTIME_OUTPUT_DIRECTORY": "XXX ターゲット ファイルをビルドするための出力ディレクトリです。",
	"assets/variables.json.RUNTIME_OUTPUT_DIRECTORY_CONFIG": "ランタイム ターゲット ファイルの構成ごとの出力ディレクトリです。",
	"assets/variables.json.RUNTIME_OUTPUT_NAME": "XXX ターゲット ファイルの出力名です。",
	"assets/variables.json.RUNTIME_OUTPUT_NAME_CONFIG": "ランタイム ターゲット ファイルの構成ごとの出力名です。",
	"assets/variables.json.SKIP_BUILD_RPATH": "ビルド ツリーに rpaths を使用する必要があります。",
	"assets/variables.json.SOURCES": "これは、ターゲットのソース ファイルへのパスの一覧を指定します。以下のコマンドはすべて SOURCES ターゲット プロパティに設定または追加され、それを操作する通常の方法です。",
	"assets/variables.json.SOVERSION": "共有ライブラリ ターゲットの ABI バージョン番号。",
	"assets/variables.json.STATIC_LIBRARY_FLAGS": "スタティック ライブラリ ターゲット用のアーカイバー (または MSVC ライブラリアン) フラグです。ターゲットが共有ライブラリ、モジュール、または実行可能ファイルである場合は、LINK_OPTIONS または LINK_FLAGS ターゲット プロパティを使用する必要があります。",
	"assets/variables.json.STATIC_LIBRARY_FLAGS_CONFIG": "スタティック ライブラリ ターゲットの構成ごとのアーカイバー (または MSVC ライブラリアン) フラグです。",
	"assets/variables.json.STATIC_LIBRARY_OPTIONS": "スタティック ライブラリ ターゲットのアーカイバー (または MSVC ライブラリアン) フラグです。ターゲットが共有ライブラリ、モジュール、または実行可能ファイルである場合は、LINK_OPTIONS ターゲット プロパティを使用する必要があります。",
	"assets/variables.json.SUFFIX": "ターゲット名の後に付くものです。",
	"assets/variables.json.Swift_COMPILATION_MODE": "Swift によるターゲットのコンパイル方法を指定します。",
	"assets/variables.json.Swift_LANGUAGE_VERSION": "このプロパティは、ターゲットの Swift ソースの言語バージョンを設定します。指定しない場合、既定では CMAKE_Swift_LANGUAGE_VERSION が使用されます。指定した場合、コンパイラでサポートされている最新バージョンが使用されます。",
	"assets/variables.json.Swift_MODULE_DIRECTORY": "ターゲットによって提供される Swift モジュールの出力ディレクトリを指定します。",
	"assets/variables.json.Swift_MODULE_NAME": "このプロパティは、Swift モジュールの名前を指定します。既定ではターゲットの名前が使用されます。",
	"assets/variables.json.TEST_LAUNCHER": "指定された起動ツールを使用して実行可能ファイルを実行します。このコマンドは、ビルド ターゲット システム実行可能ファイルの add_test コマンドのプレフィックスとして追加され、ホスト コンピューターで実行されることを意図しています。",
	"assets/variables.json.TRANSITIVE_COMPILE_PROPERTIES": "TARGET_PROPERTY ジェネレーター式が、ターゲットとその依存対象について、リンク依存関係の推移的なクロージャから収集された値の和集合として評価されるプロパティ (LINK_ONLYによって保護されたエントリを除く)。",
	"assets/variables.json.TRANSITIVE_LINK_PROPERTIES": "TARGET_PROPERTY ジェネレーター式が、ターゲットとその依存対象について、リンク依存関係の推移的なクロージャから収集された値の和集合として評価されるプロパティ (LINK_ONLYによって保護されたエントリを含む)。",
	"assets/variables.json.UNITY_BUILD": "このプロパティが true に設定されている場合、コンパイルを高速化するために、ターゲットのソース ファイルがバッチに組み込まれます。これは、元のソースを #include する (一連の) Unity ソースを作成してから、元のものではなくそれらの Unity ソースをコンパイルすることによって行われます。これは Unity ビルドまたは Jumbo ビルドとして知られています。",
	"assets/variables.json.UNITY_BUILD_BATCH_SIZE": "Unity ビルドが UNITY_BUILD ターゲット プロパティによって有効になっている場合、1 つの Unity ソース ファイルに組み込むことができるソース ファイルの最大数を指定します。元のソース ファイルは、この制限を遵守するために必要な数の Unity ソース ファイルに分散されます。",
	"assets/variables.json.UNITY_BUILD_CODE_AFTER_INCLUDE": "生成された Unity ソース ファイルの各 #include ステートメントの直後に UNITY_BUILD 機能によって含まれる逐語的なコード スニペットです。例:",
	"assets/variables.json.UNITY_BUILD_CODE_BEFORE_INCLUDE": "生成された Unity ソース ファイルの各 #include ステートメントの直前に UNITY_BUILD 機能によって含まれる逐語的なコード スニペットです。例:",
	"assets/variables.json.UNITY_BUILD_MODE": "CMake は、バケットにグループ化するソースを選択するためのさまざまなアルゴリズムを提供します。このプロパティに基づいて選択されます。使用可能な値は次のとおりです:",
	"assets/variables.json.UNITY_BUILD_UNIQUE_ID": "Unity ビルド中に一意のファイルごとの値に設定される、有効な C 識別子の名前。",
	"assets/variables.json.VERIFY_INTERFACE_HEADER_SETS": "ターゲットの PUBLIC ヘッダー セットと INTERFACE ヘッダー セット内のすべてのヘッダーを独自に含めることができることを確認するために使用されます。",
	"assets/variables.json.VERSION": "共有ライブラリ ターゲットのバージョン番号。",
	"assets/variables.json.VISIBILITY_INLINES_HIDDEN": "インライン関数のシンボルを非表示にするためのコンパイル フラグを追加するかどうか",
	"assets/variables.json.VS_CONFIGURATION_TYPE": "Visual Studio プロジェクト構成の種類。",
	"assets/variables.json.VS_DEBUGGER_COMMAND": "Visual Studio C++ ターゲットのローカル デバッガー コマンドを設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerCommand> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合、変数 CMAKE_VS_DEBUGGER_COMMAND の値によって初期化されます。",
	"assets/variables.json.VS_DEBUGGER_COMMAND_ARGUMENTS": "Visual Studio C++ ターゲットのローカル デバッガー コマンド ライン引数を設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerCommandArguments> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合、変数 CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS の値によって初期化されます。",
	"assets/variables.json.VS_DEBUGGER_ENVIRONMENT": "Visual Studio C++ ターゲットのローカル デバッガー環境を設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerEnvironment> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合は、変数 CMAKE_VS_DEBUGGER_ENVIRONMENT の値によって初期化されます。",
	"assets/variables.json.VS_DEBUGGER_WORKING_DIRECTORY": "Visual Studio C++ ターゲットのローカル デバッガー作業ディレクトリを設定します。このプロパティ値には、ジェネレーター式 <cmake-generator-expressions(7)> を使用できます。これは、Visual Studio プロジェクト ファイルの <LocalDebuggerWorkingDirectory> で定義されます。このプロパティは、ターゲットの作成時に設定されている場合、変数 CMAKE_VS_DEBUGGER_WORKING_DIRECTORY の値によって初期化されます。",
	"assets/variables.json.VS_DESKTOP_EXTENSIONS_VERSION": "Visual Studio の Windows 10 デスクトップ拡張機能のバージョン ",
	"assets/variables.json.VS_DOTNET_DOCUMENTATION_FILE": "Visual Studio マネージド プロジェクトの .NET ドキュメント出力",
	"assets/variables.json.VS_DOTNET_REFERENCEPROP_refname_TAG_tagname": ".NET 参照 <refname> の XML プロパティ <tagname> を定義します。",
	"assets/variables.json.VS_DOTNET_REFERENCES": "Visual Studio マネージド プロジェクトの .NET 参照",
	"assets/variables.json.VS_DOTNET_REFERENCES_COPY_LOCAL": "ターゲット内のすべての .NET ヒント参照に Copy Local プロパティを設定する",
	"assets/variables.json.VS_DOTNET_REFERENCE_refname": "名前 <refname> とヒント パスを持つ Visual Studio マネージド プロジェクトの .NET 参照です。",
	"assets/variables.json.VS_DOTNET_STARTUP_OBJECT": "Visual Studio .NET ターゲットのスタートアップ オブジェクト プロパティを設定します。プロパティ値は、MyCompany.Package.MyStarterClass などの完全な修飾クラス名 (パッケージ名を含む) を定義します。",
	"assets/variables.json.VS_DOTNET_TARGET_FRAMEWORK_VERSION": ".NET ターゲット フレームワーク バージョンを指定してください。",
	"assets/variables.json.VS_DPI_AWARE": "Visual Studio のターゲット プロジェクトのプロパティで [マニフェスト ツール] > [入出力] > [DPI 認識] を設定します。",
	"assets/variables.json.VS_FILTER_PROPS": "Visual Studio C++ プロジェクト フィルター ファイルに含めるフィルター プロパティ ファイルを設定します。",
	"assets/variables.json.VS_GLOBAL_KEYWORD": "Visual Studio プロジェクト キーワード。",
	"assets/variables.json.VS_GLOBAL_PROJECT_TYPES": "Visual Studio プロジェクトの種類。",
	"assets/variables.json.VS_GLOBAL_ROOTNAMESPACE": "Visual Studio プロジェクトのルート名前空間。",
	"assets/variables.json.VS_GLOBAL_variable": "Visual Studio プロジェクト固有のグローバル変数。",
	"assets/variables.json.VS_IOT_EXTENSIONS_VERSION": "Visual Studio の Windows 10 IoT 拡張機能のバージョン",
	"assets/variables.json.VS_IOT_STARTUP_TASK": "Visual Studio の Windows 10 IoT 継続的バックグラウンド タスク",
	"assets/variables.json.VS_JUST_MY_CODE_DEBUGGING": "Visual Studio デバッガーで [マイコードのみ] を有効にします。",
	"assets/variables.json.VS_KEYWORD": "削除されました。これにより、Visual Studio 9 2008 以前のジェネレーターの Visual Studio プロジェクト キーワードが指定されましたが、これらのジェネレーターはすべて削除されました。",
	"assets/variables.json.VS_MOBILE_EXTENSIONS_VERSION": "Visual Studio の Windows 10 モバイル拡張機能のバージョン",
	"assets/variables.json.VS_NO_COMPILE_BATCHING": "ターゲットのコンパイル バッチ処理をオフにします。通常、MSBuild は複数の c/cpp ファイルを使用してコンパイラを呼び出し、コンパイラは各ファイルのサブプロセスを開始してビルドを並列処理します。一度に 1 つのファイルを使用してコンパイラを呼び出す場合は、VS_NO_COMPILE_BATCHING をオンに設定します。このフラグが設定されている場合、MSBuild は一度に 1 つの c/cpp ファイルを使用してコンパイラを呼び出します。コンパイラを置き換えるツール (一部のビルド キャッシュ ツールなど) を使用する場合に便利です。",
	"assets/variables.json.VS_NO_SOLUTION_DEPLOY": "生成される Visual Studio ソリューション内で Windows CE または Windows Phone デバイスへの配置のためにターゲットをマークしないように指定します。",
	"assets/variables.json.VS_PACKAGE_REFERENCES": "NuGet 用の Visual Studio パッケージ参照。",
	"assets/variables.json.VS_PLATFORM_TOOLSET": "ターゲットをビルドするために使用するプラットフォーム ツールセットをオーバーライドします。",
	"assets/variables.json.VS_PROJECT_IMPORT": "Visual Studio マネージド プロジェクトのインポート",
	"assets/variables.json.VS_SCC_AUXPATH": "Visual Studio ソース コード管理の Aux パス。",
	"assets/variables.json.VS_SCC_LOCALPATH": "Visual Studio ソース コード管理のローカル パス。",
	"assets/variables.json.VS_SCC_PROJECTNAME": "Visual Studio ソース コード管理のプロジェクト。",
	"assets/variables.json.VS_SCC_PROVIDER": "Visual Studio ソース コード管理のプロバイダー。",
	"assets/variables.json.VS_SDK_REFERENCES": "Visual Studio プロジェクトの SDK 参照です。Microsoft.AdMediatorWindows81, Version=1.0 のように、生成された Visual Studio プロジェクトに追加される SDK 参照のセミコロンで区切った一覧を指定します。",
	"assets/variables.json.VS_SOLUTION_DEPLOY": "Windows CE、Windows Phone、または Windows ストア アプリケーションを対象としない場合に、ターゲットが配置用にマークされる必要があることを指定します。",
	"assets/variables.json.VS_SOURCE_SETTINGS_tool": "<tool> を使用する、すべてのビルドされていないファイルに対して、任意の項目メタデータを設定します。",
	"assets/variables.json.VS_USER_PROPS": "Visual Studio C++ プロジェクト ファイルに含まれるユーザー props ファイルを設定します。標準のパスは $(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props で、ほとんどの場合 %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props または %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props と同じです。",
	"assets/variables.json.VS_USE_DEBUG_LIBRARIES": "Visual Studio ジェネレーターに、どの構成がデバッグ構成と見なされるかを指示します。これにより、.vcxproj ファイルの各構成の UseDebugLibraries 設定が制御されます。",
	"assets/variables.json.VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": "Visual Studio の Windows ターゲット プラットフォームの最小バージョン",
	"assets/variables.json.VS_WINRT_COMPONENT": "ターゲットを Visual Studio ジェネレーターの Windows ランタイム コンポーネントとしてマークします。Windows ランタイム用の C++/CX 言語拡張機能を使用してターゲットをコンパイルします。共有ライブラリおよびモジュール ライブラリの場合は、_WINRT_DLL プリプロセッサ マクロも定義します。",
	"assets/variables.json.VS_WINRT_EXTENSIONS": "非推奨です。VS_WINRT_COMPONENT を使用してください。このプロパティは、そのプロパティの試験的な部分実装でした。",
	"assets/variables.json.VS_WINRT_REFERENCES": "Visual Studio プロジェクトの Windows ランタイム メタデータ参照",
	"assets/variables.json.WATCOM_RUNTIME_LIBRARY": "Watcom ABI を対象とするコンパイラで使用するための Watcom ランタイム ライブラリを選択します。",
	"assets/variables.json.WIN32_EXECUTABLE": "Windows 上で WinMain エントリ ポイントのある実行可能ファイルをビルドします。",
	"assets/variables.json.WINDOWS_EXPORT_ALL_SYMBOLS": "このプロパティは、Windows 上の MS と互換性のあるツールに対してのみ実装されます。",
	"assets/variables.json.XCODE_ATTRIBUTE_an-attribute": "Xcode のターゲット属性を直接設定します。",
	"assets/variables.json.XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY": "Xcode ジェネレーターに対して、XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> プロパティを使用して埋め込まれたすべてのフレームワークとライブラリのコード署名を実行するように指示します。",
	"assets/variables.json.XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY": "Xcode ジェネレーターに対して、XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>> プロパティを使用して埋め込まれたすべてのフレームワークからヘッダーを削除するように指示します。",
	"assets/variables.json.XCODE_EMBED_type": "指定された項目のリストをターゲット バンドルに埋め込むように Xcode ジェネレーターに指示します。<type> は使用する埋め込みビルド フェーズを指定します。各 <type> の基本の場所については、Xcode のドキュメントを参照してください。",
	"assets/variables.json.XCODE_EMBED_type_CODE_SIGN_ON_COPY": "Xcode ジェネレーターでのみ使用されるブール型プロパティ。XCODE_EMBED_ プロパティを使用して埋め込まれたアイテムにコード署名を行うか否かを指定します。",
	"assets/variables.json.XCODE_EMBED_type_PATH": "このプロパティは、Xcode ジェネレーターでのみ使用されます。定義する場合、XCODE_EMBED_ で指定された項目を埋め込むときに使用する相対パスを指定します。パスは、<type> に関連付けられている埋め込み XXX ビルド フェーズの基本の場所に対する相対パスです。各 <type> の基本の場所については、Xcode のドキュメントを参照してください。",
	"assets/variables.json.XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY": "Xcode ジェネレーターでのみ使用されるブール型プロパティ。XCODE_EMBED_ プロパティを使用して埋め込まれたすべてのフレームワークからヘッダーを削除するかどうかを指定します。",
	"assets/variables.json.XCODE_GENERATE_SCHEME": "これが有効な場合、Xcode ジェネレーターによってスキーマ ファイルが生成されます。これらは、コマンド ラインからの分析の起動、アーカイブ、テスト目的のビルド、テスト アクションのために役立ちます。",
	"assets/variables.json.XCODE_LINK_BUILD_PHASE_MODE": "Xcode ジェネレーターを使用する場合、リンクするライブラリは、\"Link Binary With Libraries\" ビルド フェーズを使用するか、またはリンカー フラグとして直接、Xcode プロジェクト ファイルに指定します。前者では、Xcode でビルド パスを管理することができます。これは、Xcode アーカイブを作成するときに必要になることがあります。通常のビルドに対して異なるビルド パスが使用されることがあるためです。",
	"assets/variables.json.XCODE_PRODUCT_TYPE": "ターゲットへの参照に Xcode productType 属性を設定します。CMake はターゲットの種類に基づいて既定値を算出しますが、このプロパティを使用することで明示的に指示することができます。",
	"assets/variables.json.XCODE_SCHEME_ADDRESS_SANITIZER": "生成された Xcode スキームの [Diagnostics] セクションで [Address Sanitizer] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": "生成された Xcode スキームの [Diagnostics] セクションで [Detect use of stack after return] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_ARGUMENTS": "生成された Xcode スキームの [引数] セクションに追加する必要があるコマンド ライン引数を指定します。",
	"assets/variables.json.XCODE_SCHEME_DEBUG_AS_ROOT": "ターゲットを 'root' としてデバッグするかどうか。",
	"assets/variables.json.XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": "生成される Xcode スキームの [オプション] セクションでドキュメントのバージョン ブラウザーを使用しているときに、デバッグを許可するかどうか。",
	"assets/variables.json.XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] を無効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Library Loads] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": "生成された Xcode スキームの [Diagnostics] セクションで [Dynamic Linker API usage] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": "生成された Xcode スキームの Options セクションの Metal: API Validation のプロパティ値。",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": "生成された Xcode スキームの [オプション] セクションにある GPU フレーム キャプチャのプロパティ値。値の例は Metal と Disabled です。",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": "生成された Xcode スキームの Options セクションの Metal: Shader Validation のプロパティ値。",
	"assets/variables.json.XCODE_SCHEME_ENVIRONMENT": "生成された Xcode スキームの [引数] セクションに追加する必要のある環境変数を指定します。",
	"assets/variables.json.XCODE_SCHEME_EXECUTABLE": "生成された Xcode スキームの [情報] セクションで、実行可能ファイルへのパスを指定します。設定しない場合、スキーマ ジェネレーターは現在のターゲットが実際に実行可能である場合に、そのターゲットを選択します。",
	"assets/variables.json.XCODE_SCHEME_GUARD_MALLOC": "生成された Xcode スキームの [Diagnostics] セクションで [Guard Malloc] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_LAUNCH_CONFIGURATION": "ターゲットを実行するようにビルド構成を設定します。",
	"assets/variables.json.XCODE_SCHEME_LAUNCH_MODE": "生成された Xcode スキームの Info セクションの Launch のプロパティ値。",
	"assets/variables.json.XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": "生成された Xcode スキームの [Diagnostics] セクションで [Main Thread Checker] オプションの [Pause on issues] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_MALLOC_GUARD_EDGES": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Guard Edges] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_MALLOC_SCRIBBLE": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Scribble] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_MALLOC_STACK": "生成された Xcode スキームの [Diagnostics] セクションで [Malloc Stack] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_THREAD_SANITIZER": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_THREAD_SANITIZER_STOP": "生成された Xcode スキームの [Diagnostics] セクションで [Thread Sanitizer] - [Pause on issues] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": "生成された Xcode スキームの [Diagnostics] セクションで [Undefined Behavior Sanitizer] オプションの [Pause on issues] を有効にするかどうか。",
	"assets/variables.json.XCODE_SCHEME_WORKING_DIRECTORY": "生成される Xcode スキーム内に、実行およびプロファイル操作の作業ディレクトリを指定します。値にジェネレーター式が含まれている場合、それらが評価されます。",
	"assets/variables.json.XCODE_SCHEME_ZOMBIE_OBJECTS": "生成された Xcode スキームの [Diagnostics] セクションで [Zombie Objects] を有効にするかどうか。",
	"assets/variables.json.XCODE_XCCONFIG": "設定されている場合、Xcode ジェネレーターは指定されたファイルをターゲット レベル XCConfig ファイルとして登録します。グローバル XCConfig ファイルについては、CMAKE_XCODE_XCCONFIG 変数を参照してください。",
	"assets/variables.json.XCTEST": "このターゲットは Mac 上の XCTest CFBundle です。"
}