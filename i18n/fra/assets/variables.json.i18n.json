/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/variables.json.ANDROID": "A la valeur 1 quand le système cible (CMAKE_SYSTEM_NAME) est Android.",
	"assets/variables.json.APPLE": "La valeur est True quand le système cible est une plateforme Apple (macOS, iOS, tvOS, visionOS ou watchOS).",
	"assets/variables.json.BORLAND": "La valeur est True si le compilateur Borland est utilisé.",
	"assets/variables.json.BSD": "Défini sur une valeur de chaîne lorsque le système cible est BSD. Cette valeur peut être l'une des suivantes : DragonFlyBSD, FreeBSD, OpenBSD ou NetBSD.",
	"assets/variables.json.BUILD_SHARED_LIBS": "Indique à add_library d’utiliser par défaut les bibliothèques PARTAGÉES, au lieu des bibliothèques STATIQUES, lorsqu’il est appelé sans type de bibliothèque explicite.",
	"assets/variables.json.CACHE": "Opérateur permettant de lire les variables de cache.",
	"assets/variables.json.CMAKE_ABSOLUTE_DESTINATION_FILES": "Liste des fichiers qui ont été installés à l'aide d'un chemin de DESTINATION ABSOLU.",
	"assets/variables.json.CMAKE_ADD_CUSTOM_COMMAND_DEPENDS_EXPLICIT_ONLY": "Indique si l’option DEPENDS_EXPLICIT_ONLY doit être activée par défaut dans add_custom_command.",
	"assets/variables.json.CMAKE_ADSP_ROOT": "Quand :ref:`Cross Compiling for ADSP SHARC/Blackfin`, cette variable conserve le chemin absolu de la dernière installation CCES ou VDSP++. Le répertoire doit contenir les compilateurs cc21k.exe et ccblkfn.exe. Cette option est définie automatiquement si une installation par défaut de CCES ou VDSP++ est disponible.",
	"assets/variables.json.CMAKE_AIX_EXPORT_ALL_SYMBOLS": "Valeur par défaut de la propriété cible AIX_EXPORT_ALL_SYMBOLS. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création.",
	"assets/variables.json.CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": "Valeur par défaut de la propriété cible ANDROID_ANT_ADDITIONAL_OPTIONS. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_API": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, cette variable peut être définie pour spécifier la valeur par défaut de la propriété cible ANDROID_API. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_API_MIN": "Valeur par défaut de la propriété cible ANDROID_API_MIN. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_ARCH": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, vous pouvez définir cette variable afin de spécifier la valeur par défaut de la propriété cible ANDROID_ARCH. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_ARCH_ABI": "Quand vous effectuez une compilation croisée pour Android, cette variable spécifie l'architecture cible et l'ABI à utiliser. Valeurs valides :",
	"assets/variables.json.CMAKE_ANDROID_ARM_MODE": "Quand vous effectuez une compilation croisée pour Android, et que CMAKE_ANDROID_ARCH_ABI a la valeur de l'une des architectures armeabi, affectez la valeur ON à CMAKE_ANDROID_ARM_MODE pour cibler les processeurs ARM 32 bits (-marm). Sinon, la valeur par défaut consiste à cibler les processeurs Thumb 16 bits (-mthumb).",
	"assets/variables.json.CMAKE_ANDROID_ARM_NEON": "Quand vous effectuez une compilation croisée pour Android, et que CMAKE_ANDROID_ARCH_ABI a la valeur armeabi-v7a, affectez la valeur ON à CMAKE_ANDROID_ARM_NEON pour cibler les appareils ARM NEON.",
	"assets/variables.json.CMAKE_ANDROID_ASSETS_DIRECTORIES": "Valeur par défaut de la propriété cible ANDROID_ASSETS_DIRECTORIES. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_EXCEPTIONS": "Quand vous effectuez une compilation croisée pour Android avec le NDK, vous pouvez définir cette variable afin de spécifier si les exceptions sont activées.",
	"assets/variables.json.CMAKE_ANDROID_GUI": "Valeur par défaut de la propriété cible ANDROID_GUI des exécutables. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_JAR_DEPENDENCIES": "Valeur par défaut de la propriété cible ANDROID_JAR_DEPENDENCIES. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_JAR_DIRECTORIES": "Valeur par défaut de la propriété cible ANDROID_JAR_DIRECTORIES. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_JAVA_SOURCE_DIR": "Valeur par défaut de la propriété cible ANDROID_JAVA_SOURCE_DIR. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": "Valeur par défaut de la propriété cible ANDROID_NATIVE_LIB_DEPENDENCIES. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": "Valeur par défaut de la propriété cible ANDROID_NATIVE_LIB_DIRECTORIES. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_NDK": "Quand vous effectuez une compilation croisée pour Android avec le NDK, cette variable contient le chemin absolu du répertoire racine du NDK. Le répertoire doit contenir un sous-répertoire platforms contenant les répertoires android-<api>.",
	"assets/variables.json.CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": "Quand vous effectuez une compilation croisée pour Android avec le NDK, vous pouvez définir cette variable afin de spécifier l'utilisation ou non des en-têtes par niveau d'api (lesquels sont dépréciés) à la place des en-têtes unifiés.",
	"assets/variables.json.CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": "Quand vous effectuez une compilation croisée pour Android avec le NDK, cette variable fournit l'\"étiquette hôte\" du NDK, qui permet de construire le chemin des chaînes d'outils prégénérées exécutées sur l'hôte.",
	"assets/variables.json.CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": "Quand vous effectuez une compilation croisée pour Android avec le NDK, vous pouvez définir cette variable afin de spécifier la version de la chaîne d'outils à utiliser en tant que compilateur.",
	"assets/variables.json.CMAKE_ANDROID_NDK_VERSION": "Quand vous effectuez une compilation croisée pour Android avec le NDK et que vous utilisez une version Android NDK 11 ou ultérieure, cette variable est fournie par CMake pour signaler le numéro de version du NDK.",
	"assets/variables.json.CMAKE_ANDROID_PROCESS_MAX": "Valeur par défaut de la propriété cible ANDROID_PROCESS_MAX. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_PROGUARD": "Valeur par défaut de la propriété cible ANDROID_PROGUARD. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_PROGUARD_CONFIG_PATH": "Valeur par défaut de la propriété cible ANDROID_PROGUARD_CONFIG_PATH. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_RTTI": "Quand vous effectuez une compilation croisée pour Android avec le NDK, vous pouvez définir cette variable afin de spécifier si les informations RTTI sont activées.",
	"assets/variables.json.CMAKE_ANDROID_SECURE_PROPS_PATH": "Valeur par défaut de la propriété cible ANDROID_SECURE_PROPS_PATH. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_SKIP_ANT_STEP": "Valeur par défaut de la propriété cible ANDROID_SKIP_ANT_STEP. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_ANDROID_STANDALONE_TOOLCHAIN": "Quand vous effectuez une compilation croisée pour Android avec une chaîne d'outils autonome, cette variable contient le chemin absolu du répertoire racine de la chaîne d'outils. Le répertoire spécifié doit contenir un sous-répertoire sysroot.",
	"assets/variables.json.CMAKE_ANDROID_STL_TYPE": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, cette variable peut être définie pour spécifier la valeur par défaut de la propriété cible ANDROID_STL_TYPE. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_APPBUNDLE_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour les bundles d'applications macOS utilisés par les commandes find_program et find_package.",
	"assets/variables.json.CMAKE_APPLE_SILICON_PROCESSOR": "Sur les hôtes Apple Silicon exécutant macOS, définissez cette variable pour indiquer à CMake l'architecture à utiliser pour CMAKE_HOST_SYSTEM_PROCESSOR. La valeur doit être arm64 ou x86_64.",
	"assets/variables.json.CMAKE_AR": "Nom de l'outil d'archivage pour les bibliothèques statiques.",
	"assets/variables.json.CMAKE_ARCHIVE_OUTPUT_DIRECTORY": "Emplacement de l'ensemble des fichiers cibles d'ARCHIVE, une fois leur génération effectuée.",
	"assets/variables.json.CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG": "Emplacement de l'ensemble des fichiers cibles d'ARCHIVE, une fois leur génération effectuée pour une configuration spécifique.",
	"assets/variables.json.CMAKE_ARGC": "Nombre d'arguments de ligne de commande passés à CMake en mode script.",
	"assets/variables.json.CMAKE_ARGV0": "Argument de ligne de commande passé à CMake en mode script.",
	"assets/variables.json.CMAKE_AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": "Cette variable est utilisée pour initialiser la propriété AUTOGEN_BETTER_GRAPH_MULTI_CONFIG sur toutes les cibles lors de leur création. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_AUTOGEN_COMMAND_LINE_LENGTH_MAX": "Limite de longueur de ligne de commande pour les cibles autogen, c’est-à-dire moc ou uic, qui déclenche l’utilisation de fichiers réponse sur Windows au lieu de passer tous les arguments à la ligne de commande.",
	"assets/variables.json.CMAKE_AUTOGEN_ORIGIN_DEPENDS": "Commutateur permettant de transmettre les dépendances des cibles d’origine aux cibles <ORIGIN>_autogènes correspondantes.",
	"assets/variables.json.CMAKE_AUTOGEN_PARALLEL": "Nombre de processus moc ou uic parallèles à démarrer avec AUTOMOC et AUTOUIC.",
	"assets/variables.json.CMAKE_AUTOGEN_USE_SYSTEM_INCLUDE": "Cette variable est utilisée pour initialiser la propriété AUTOGEN_USE_SYSTEM_INCLUDE sur toutes les cibles lors de leur création. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_AUTOGEN_VERBOSE": "Définit la verbosité d'AUTOMOC, d'AUTOUIC et d'AUTORCC. Une valeur entière positive ou la valeur booléenne true permet aux générateurs AUTO* d'émettre en sortie des informations de traitement supplémentaires.",
	"assets/variables.json.CMAKE_AUTOMOC": "Spécifie le traitement automatique ou non de moc pour les cibles Qt.",
	"assets/variables.json.CMAKE_AUTOMOC_COMPILER_PREDEFINES": "Cette variable est utilisée pour initialiser la propriété AUTOMOC_COMPILER_PREDEFINES sur toutes les cibles. Pour plus d'informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_AUTOMOC_DEPEND_FILTERS": "Filtrez les définitions utilisées par CMAKE_AUTOMOC pour extraire les noms de fichiers du code source en tant que dépendances supplémentaires du fichier moc.",
	"assets/variables.json.CMAKE_AUTOMOC_EXECUTABLE": "Cette variable est utilisée pour initialiser la propriété AUTOMOC_EXECUTABLE sur toutes les cibles. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_AUTOMOC_MACRO_NAMES": "Liste de noms de macros séparés par des points-virgules et utilisés par CMAKE_AUTOMOC pour déterminer si un fichier C++ doit être traité par moc.",
	"assets/variables.json.CMAKE_AUTOMOC_MOC_OPTIONS": "Options supplémentaires pour moc quand CMAKE_AUTOMOC est utilisé.",
	"assets/variables.json.CMAKE_AUTOMOC_PATH_PREFIX": "Indique si l'option de préfixe de chemin -p doit être générée pour moc sur les cibles Qt AUTOMOC.",
	"assets/variables.json.CMAKE_AUTOMOC_RELAXED_MODE": "Passez du mode strict au mode souple (ou inversement) d'automoc.",
	"assets/variables.json.CMAKE_AUTORCC": "Spécifie le traitement automatique ou non de rcc pour les cibles Qt.",
	"assets/variables.json.CMAKE_AUTORCC_EXECUTABLE": "Cette variable est utilisée pour initialiser la propriété AUTORCC_EXECUTABLE sur toutes les cibles. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_AUTORCC_OPTIONS": "Options supplémentaires pour rcc quand CMAKE_AUTORCC est utilisé.",
	"assets/variables.json.CMAKE_AUTOUIC": "Spécifie le traitement automatique ou non d'uic pour les cibles Qt.",
	"assets/variables.json.CMAKE_AUTOUIC_EXECUTABLE": "Cette variable est utilisée pour initialiser la propriété AUTOUIC_EXECUTABLE sur toutes les cibles. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_AUTOUIC_OPTIONS": "Options supplémentaires pour uic quand CMAKE_AUTOUIC est utilisé.",
	"assets/variables.json.CMAKE_AUTOUIC_SEARCH_PATHS": "Liste de chemins de recherche utilisée par CMAKE_AUTOUIC pour trouver les fichiers .ui inclus.",
	"assets/variables.json.CMAKE_BACKWARDS_COMPATIBILITY": "Déprécié. Consultez la documentation relative à la stratégie CMake CMP0001.",
	"assets/variables.json.CMAKE_BINARY_DIR": "Chemin du niveau supérieur de l'arborescence de build.",
	"assets/variables.json.CMAKE_BUILD_RPATH": "Liste de valeurs séparées par des points-virgules, qui spécifie les entrées de chemin de runtime (RPATH) à ajouter aux fichiers binaires liés dans l'arborescence de build (pour les plateformes qui le prennent en charge). Les entrées ne sont pas utilisées pour les fichiers binaires dans l'arborescence d'installation. Consultez également la variable CMAKE_INSTALL_RPATH.",
	"assets/variables.json.CMAKE_BUILD_RPATH_USE_ORIGIN": "Indique s'il est nécessaire d'utiliser des chemins relatifs pour le RPATH de la build.",
	"assets/variables.json.CMAKE_BUILD_TOOL": "Cette variable existe uniquement pour des raisons de compatibilité descendante. Elle contient la même valeur que CMAKE_MAKE_PROGRAM. Utilisez cette variable à la place.",
	"assets/variables.json.CMAKE_BUILD_TYPE": "Spécifie le type de build sur les générateurs à configuration unique (par exemple, Générateurs Makefile ou Ninja). Les valeurs standard incluent Debug, Release, RelWithDebInfo et MinSizeRel, mais des types de build personnalisés peuvent également être définis.",
	"assets/variables.json.CMAKE_BUILD_WITH_INSTALL_NAME_DIR": "Spécifie l'utilisation ou non d'INSTALL_NAME_DIR sur les cibles de l'arborescence de build.",
	"assets/variables.json.CMAKE_BUILD_WITH_INSTALL_RPATH": "Utilisez le chemin d'installation pour RPATH.",
	"assets/variables.json.CMAKE_CACHEFILE_DIR": "Cette variable est utilisée en interne par CMake et ne peut pas être définie lors de la première configuration d’une arborescence de build. Lorsqu’il est défini, il a la même valeur que CMAKE_BINARY_DIR. Utilisez cette variable à la place.",
	"assets/variables.json.CMAKE_CACHE_MAJOR_VERSION": "Version principale de CMake utilisée pour créer le fichier CMakeCache.txt",
	"assets/variables.json.CMAKE_CACHE_MINOR_VERSION": "Version mineure de CMake utilisée pour créer le fichier CMakeCache.txt",
	"assets/variables.json.CMAKE_CACHE_PATCH_VERSION": "Version corrective de CMake utilisée pour créer le fichier CMakeCache.txt",
	"assets/variables.json.CMAKE_CFG_INTDIR": "Référence de build au sous-répertoire de sortie par configuration.",
	"assets/variables.json.CMAKE_CLANG_VFS_OVERLAY": "Quad vous effectuez une compilation pour Windows avec clang-cl, cette variable peut être un chemin absolu pointant vers un fichier YAML de système de fichiers virtuel Clang, ce qui permet à clang-cl de résoudre les noms d'en-têtes Windows sur un système de fichiers respectant la casse.",
	"assets/variables.json.CMAKE_CL_64": "Déconseillé. Utilisez CMAKE_SIZEOF_VOID_P à la place.",
	"assets/variables.json.CMAKE_CODEBLOCKS_COMPILER_ID": "Changez l'ID de compilateur dans les fichiers projet CodeBlocks générés.",
	"assets/variables.json.CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": "Changez la manière dont le générateur CodeBlocks crée les fichiers projet.",
	"assets/variables.json.CMAKE_CODELITE_USE_TARGETS": "Changez la manière dont le générateur CodeLite crée les fichiers projet.",
	"assets/variables.json.CMAKE_COLOR_DIAGNOSTICS": "Activez les diagnostics de couleur tout au long de l’opération.",
	"assets/variables.json.CMAKE_COLOR_MAKEFILE": "Active la sortie couleur durant l'utilisation des générateurs Makefile.",
	"assets/variables.json.CMAKE_COMMAND": "Chemin complet de l'exécutable cmake.",
	"assets/variables.json.CMAKE_COMPILER_2005": "Utilisation du compilateur Visual Studio 2005 de Microsoft",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUCC": "Vrai si le compilateur C est GNU.",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUCXX": "Vrai si le compilateur C++ (CXX) est GNU.",
	"assets/variables.json.CMAKE_COMPILER_IS_GNUG77": "Vrai si le compilateur Fortran est GNU.",
	"assets/variables.json.CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": "Répertoire de sortie des fichiers .pdb de symboles de débogage Microsoft générés par le compilateur durant la génération des fichiers sources.",
	"assets/variables.json.CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration des fichiers .pdb de symboles de débogage Microsoft générés par le compilateur durant la génération des fichiers sources.",
	"assets/variables.json.CMAKE_COMPILE_WARNING_AS_ERROR": "Spécifiez s’il faut traiter les avertissements lors de la compilation comme des erreurs.",
	"assets/variables.json.CMAKE_CONFIGURATION_TYPES": "Spécifie les types de build disponibles (configurations) sur les générateurs multi-config (par exemple, Visual Studio , Xcode ou Ninja Multi-Config) sous forme de liste séparée par des points-virgules . Les entrées typiques incluent Debug, Release, RelWithDebInfo et MinSizeRel, mais des types de construction personnalisés peuvent également être définis.",
	"assets/variables.json.CMAKE_CONFIG_POSTFIX": "Suffixe de nom de fichier par défaut des bibliothèques dans la configuration <CONFIG>.",
	"assets/variables.json.CMAKE_CPACK_COMMAND": "Chemin complet de la commande cpack installée avec CMake.",
	"assets/variables.json.CMAKE_CROSSCOMPILING": "Cette variable est définie par CMake pour indiquer s’il s’agit d’une compilation croisée, mais notez les limitations décrites ci-dessous.",
	"assets/variables.json.CMAKE_CROSSCOMPILING_EMULATOR": "Cette variable est utilisée uniquement quand CMAKE_CROSSCOMPILING est activé. Elle doit pointer vers une commande du système hôte pouvant exécuter un fichier exécutable généré pour le système cible.",
	"assets/variables.json.CMAKE_CROSS_CONFIGS": "Spécifie une liste de valeurs séparées par des points-virgules, qui correspondent aux configurations disponibles dans tous les fichiers build-<Config>.ninja au sein du générateur multiconfiguration Ninja. Cette variable active le mode de configuration croisée. Les cibles de chaque configuration spécifiée dans cette variable peuvent être générées à partir de n'importe quel fichier build-<Config>.ninja. Les commandes personnalisées utilisent la configuration native de build-<Config>.ninja. Si cette variable a la valeur all, toutes les configurations de CMAKE_CONFIGURATION_TYPES sont des configurations croisées. Si cette variable n'est pas spécifiée, ou si aucune valeur ne lui est affectée, chaque fichier build-<Config>.ninja contient uniquement les règles de génération de sa propre configuration.",
	"assets/variables.json.CMAKE_CTEST_ARGUMENTS": "Affectez à cette variable une liste d'arguments de ligne de commande séparés par des points-virgules à passer à ctest durant l'exécution de tests via la cible de test (ou RUN_TESTS) du système de build généré.",
	"assets/variables.json.CMAKE_CTEST_COMMAND": "Chemin complet de la commande ctest installée avec CMake.",
	"assets/variables.json.CMAKE_CUDA_ARCHITECTURES": "Valeur par défaut de la propriété CUDA_ARCHITECTURES des cibles.",
	"assets/variables.json.CMAKE_CUDA_COMPILE_FEATURES": "Liste des fonctionnalités connues du compilateur CUDA",
	"assets/variables.json.CMAKE_CUDA_EXTENSIONS": "Valeur par défaut pour la propriété cible CUDA_EXTENSIONS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_CUDA_HOST_COMPILER": "Il s’agit du nom d’origine spécifique à CUDA pour la variable CMAKE_<LANG>_HOST_COMPILER plus générale. Pour plus d’informations, consultez ce dernier.",
	"assets/variables.json.CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": "Valeur par défaut pour la propriété cible CUDA_RESOLVE_DEVICE_SYMBOLS lorsqu'elle est définie. Par défaut cette variable n'est pas définie.",
	"assets/variables.json.CMAKE_CUDA_RUNTIME_LIBRARY": "Sélectionnez la bibliothèque runtime CUDA à utiliser au moment de la compilation et de l'édition des liens CUDA. Cette variable est utilisée pour initialiser la propriété CUDA_RUNTIME_LIBRARY sur toutes les cibles au moment de leur création.",
	"assets/variables.json.CMAKE_CUDA_SEPARABLE_COMPILATION": "Valeur par défaut de la propriété cible CUDA_SEPARABLE_COMPILATION. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création.",
	"assets/variables.json.CMAKE_CUDA_STANDARD": "Valeur par défaut pour la propriété cible CUDA_STANDARD si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_CUDA_STANDARD_REQUIRED": "Valeur par défaut pour la propriété cible CUDA_STANDARD_REQUIRED si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": "Une fois le langage CUDA activé, une liste de répertoires include séparés par des points-virgules est fournie par le kit de ressources CUDA. Cette valeur permet aux fichiers sources C++ d'inclure les en-têtes CUDA.",
	"assets/variables.json.CMAKE_CURRENT_BINARY_DIR": "Chemin du répertoire binaire en cours de traitement.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION": "Quand du code est exécuté dans une fonction, cette variable contient le nom de la fonction active. Cela peut être utile pour les messages de diagnostic ou de débogage.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_DIR": "Quand du code est exécuté dans une fonction, cette variable contient le répertoire complet du fichier de liste défini dans la fonction active.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_FILE": "Quand du code est exécuté dans une fonction, cette variable contient le chemin complet du fichier de liste défini dans la fonction active.",
	"assets/variables.json.CMAKE_CURRENT_FUNCTION_LIST_LINE": "Quand du code est exécuté dans une fonction, cette variable contient le numéro de ligne du fichier de liste où la fonction active a été définie.",
	"assets/variables.json.CMAKE_CURRENT_LIST_DIR": "Répertoire complet du fichier de liste en cours de traitement.",
	"assets/variables.json.CMAKE_CURRENT_LIST_FILE": "Chemin complet du fichier de liste en cours de traitement.",
	"assets/variables.json.CMAKE_CURRENT_LIST_LINE": "Numéro de ligne du fichier en cours de traitement.",
	"assets/variables.json.CMAKE_CURRENT_SOURCE_DIR": "Chemin du répertoire source en cours de traitement.",
	"assets/variables.json.CMAKE_CXX_COMPILER_IMPORT_STD": "Une liste des niveaux standards C++ pour lesquels la prise en charge d'import std existe pour la chaîne d'outils C++ actuelle. La prise en charge de C++<NN> peut être détectée à l'aide d'un prédicat <NN> IN_LIST CMAKE_CXX_COMPILER_IMPORT_STD avec la commande if.",
	"assets/variables.json.CMAKE_CXX_COMPILE_FEATURES": "Liste des fonctionnalités connues du compilateur C++",
	"assets/variables.json.CMAKE_CXX_EXTENSIONS": "Valeur par défaut pour la propriété cible CXX_EXTENSIONS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_CXX_MODULE_STD": "S'il faut ajouter des cibles utilitaires en tant que dépendances aux cibles avec au moins cxx_std_23 ou non.",
	"assets/variables.json.CMAKE_CXX_SCAN_FOR_MODULES": "S'il faut analyser les fichiers source C++ pour les dépendances de module.",
	"assets/variables.json.CMAKE_CXX_STANDARD": "Valeur par défaut pour la propriété cible CXX_STANDARD si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_CXX_STANDARD_REQUIRED": "Valeur par défaut pour la propriété cible CXX_STANDARD_REQUIRED si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_C_COMPILE_FEATURES": "Liste des fonctionnalités connues du compilateur C",
	"assets/variables.json.CMAKE_C_EXTENSIONS": "Valeur par défaut pour la propriété cible C_EXTENSIONS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_C_STANDARD": "Valeur par défaut pour la propriété cible C_STANDARD si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_C_STANDARD_REQUIRED": "Valeur par défaut pour la propriété cible C_STANDARD_REQUIRED si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_DEBUG_POSTFIX": "Consultez les informations relatives à la variable CMAKE_<CONFIG>_POSTFIX.",
	"assets/variables.json.CMAKE_DEBUG_TARGET_PROPERTIES": "Active la sortie de traçage pour les propriétés cibles.",
	"assets/variables.json.CMAKE_DEFAULT_BUILD_TYPE": "Spécifie la configuration à utiliser par défaut dans un fichier build.ninja au sein du générateur multiconfiguration Ninja. Si cette variable est spécifiée, build.ninja utilise les règles de build de build-<Config>.ninja par défaut. Toutes les commandes personnalisées sont exécutées avec cette configuration. Si la variable n'est pas spécifiée, le premier élément de CMAKE_CONFIGURATION_TYPES est utilisé à la place.",
	"assets/variables.json.CMAKE_DEFAULT_CONFIGS": "Spécifie une liste de valeurs séparées par des points-virgules, qui correspondent aux configurations à générer pour une cible dans build.ninja si aucun suffixe :<Config> n'est spécifié dans le générateur multiconfiguration Ninja. Si cette variable a la valeur all, toutes les configurations de CMAKE_CROSS_CONFIGS sont utilisées. Si aucune valeur n'est spécifiée pour cette variable, sa valeur par défaut est CMAKE_DEFAULT_BUILD_TYPE.",
	"assets/variables.json.CMAKE_DEPENDS_IN_PROJECT_ONLY": "Quand la valeur est TRUE pour un répertoire, le système de build produit par les générateurs Makefile est configuré pour prendre en compte uniquement les dépendances des fichiers sources qui apparaissent dans les répertoires de fichiers sources ou binaires. Les changements apportés aux fichiers sources en dehors de ces répertoires n'entraînent pas de regénération.",
	"assets/variables.json.CMAKE_DEPENDS_USE_COMPILER": "En ce qui concerne les générateurs Makefile, les dépendances sources sont désormais, pour une sélection de compilateurs, générées par le compilateur lui-même. En assignant à cette variable la valeur FALSE, vous pouvez restaurer le comportement hérité (c'est-à-dire utiliser CMake pour la découverte des dépendances).",
	"assets/variables.json.CMAKE_DIRECTORY_LABELS": "Spécifiez les étiquettes du répertoire actif.",
	"assets/variables.json.CMAKE_DISABLE_FIND_PACKAGE_PackageName": "Variable pour la désactivation des appels de find_package.",
	"assets/variables.json.CMAKE_DISABLE_PRECOMPILE_HEADERS": "Valeur par défaut de DISABLE_PRECOMPILE_HEADERS pour les cibles.",
	"assets/variables.json.CMAKE_DLL_NAME_WITH_SOVERSION": "Cette variable est utilisée pour initialiser la propriété DLL_NAME_WITH_SOVERSION sur les cibles de bibliothèque partagée pour la plateforme Windows, qui est sélectionnée lorsque la variable WIN32 est définie.",
	"assets/variables.json.CMAKE_DL_LIBS": "Nom de la bibliothèque contenant dlopen et dlclose.",
	"assets/variables.json.CMAKE_DOTNET_SDK": "Valeur par défaut de la propriété DOTNET_SDK des cibles",
	"assets/variables.json.CMAKE_DOTNET_TARGET_FRAMEWORK": "Valeur par défaut de la propriété DOTNET_TARGET_FRAMEWORK des cibles.",
	"assets/variables.json.CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": "Valeur par défaut de la propriété DOTNET_TARGET_FRAMEWORK_VERSION des cibles.",
	"assets/variables.json.CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": "Cette variable de cache est utilisée par le générateur de projet Eclipse. Consultez les informations relatives au générateurs cmake.",
	"assets/variables.json.CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": "Cette variable de cache est utilisée par le générateur de projet Eclipse. Consultez les informations relatives au générateurs cmake.",
	"assets/variables.json.CMAKE_ECLIPSE_MAKE_ARGUMENTS": "Cette variable de cache est utilisée par le générateur de projet Eclipse. Consultez les informations relatives au générateurs cmake.",
	"assets/variables.json.CMAKE_ECLIPSE_RESOURCE_ENCODING": "Cette variable de cache indique au générateur de projet Eclipse CDT4 de définir l'encodage des ressources en fonction de la valeur spécifiée dans les fichiers projet générés. Si aucune valeur n'est fournie, aucun encodage n'est défini.",
	"assets/variables.json.CMAKE_ECLIPSE_VERSION": "Cette variable de cache est utilisée par le générateur de projet Eclipse. Consultez les informations relatives au générateurs cmake.",
	"assets/variables.json.CMAKE_EDIT_COMMAND": "Chemin d’accès complet à cmake-gui ou ccmake. Défini uniquement pour les générateurs Makefile et les générateurs Ninja lorsque vous n’utilisez pas de générateurs supplémentaires.",
	"assets/variables.json.CMAKE_ENABLE_EXPORTS": "Spécifie si les exécutables exportent les symboles des modules chargeables.",
	"assets/variables.json.CMAKE_ERROR_DEPRECATED": "Spécifie si des erreurs doivent être émises pour une fonctionnalité dépréciée.",
	"assets/variables.json.CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "Demandez au script cmake_install.cmake de générer une erreur en cas de détection d'un fichier avec une DESTINATION D'INSTALLATION absolue.",
	"assets/variables.json.CMAKE_EXECUTABLE_ENABLE_EXPORTS": "Spécifie si les exécutables exportent les symboles des modules chargeables.",
	"assets/variables.json.CMAKE_EXECUTABLE_SUFFIX": "Suffixe des exécutables sur cette plateforme.",
	"assets/variables.json.CMAKE_EXECUTABLE_SUFFIX_LANG": "Suffixe à utiliser pour la fin d’un nom de fichier exécutable de <LANG> architecture cible du compilateur, le cas échéant.",
	"assets/variables.json.CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": "Si cette variable a la valeur STDERR, STDOUT ou NONE, les commandes des appels de execute_process sont affichées dans stderr, stdout ou pas du tout.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS": "Indicateurs de l'éditeur de liens à utiliser pour créer des exécutables.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_CONFIG": "Indicateurs à utiliser au moment de l'édition des liens d'un exécutable.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_EXE_LINKER_FLAGS_ la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_EXE_LINKER_FLAGS_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_EXE_LINKER_FLAGS la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_EXPORT_COMPILE_COMMANDS": "Active/désactive la sortie des commandes de compilation durant la génération.",
	"assets/variables.json.CMAKE_EXPORT_FIND_PACKAGE_NAME": "Initialise la valeur de EXPORT_FIND_PACKAGE_NAME.",
	"assets/variables.json.CMAKE_EXPORT_NO_PACKAGE_REGISTRY": "Désactive la commande d'exportation quand CMP0090 n'a pas la valeur NEW.",
	"assets/variables.json.CMAKE_EXPORT_PACKAGE_REGISTRY": "Active la commande d'exportation quand CMP0090 a la valeur NEW.",
	"assets/variables.json.CMAKE_EXTRA_GENERATOR": "Générateur supplémentaire utilisé pour générer le projet. Consultez les informations relatives aux générateurs cmake.",
	"assets/variables.json.CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": "Suffixes supplémentaires pour les bibliothèques partagées.",
	"assets/variables.json.CMAKE_FIND_APPBUNDLE": "Cette variable affecte la manière dont les commandes find_* choisissent entre les bundles d'applications macOS et les composants de package de style unix.",
	"assets/variables.json.CMAKE_FIND_DEBUG_MODE": "Affiche des informations supplémentaires sur les appels de recherche pour les commandes suivantes dans l'erreur standard :",
	"assets/variables.json.CMAKE_FIND_FRAMEWORK": "Cette variable affecte la manière dont les commandes find_* choisissent entre les frameworks macOS et les composants de package de style unix.",
	"assets/variables.json.CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": "Spécifiez un <suffixe> pour indiquer à la commande find_library d'effectuer les recherches dans un répertoire lib<suffixe> avant chaque répertoire lib devant faire normalement l'objet de recherches.",
	"assets/variables.json.CMAKE_FIND_LIBRARY_PREFIXES": "Préfixes à indiquer durant la recherche de bibliothèques.",
	"assets/variables.json.CMAKE_FIND_LIBRARY_SUFFIXES": "Suffixes à ajouter durant la recherche de bibliothèques.",
	"assets/variables.json.CMAKE_FIND_NO_INSTALL_PREFIX": "Excluez les valeurs des variables CMAKE_INSTALL_PREFIX et CMAKE_STAGING_PREFIX de CMAKE_SYSTEM_PREFIX_PATH. CMake ajoute ces préfixes de destination de projet à CMAKE_SYSTEM_PREFIX_PATH par défaut pour permettre la prise en charge de la génération d'une série de packages dépendants et leur installation dans un préfixe commun. Affectez la valeur TRUE à CMAKE_FIND_NO_INSTALL_PREFIX pour supprimer ce comportement.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NAME": "Défini par la commande find_package durant le chargement d'un module de recherche pour enregistrer le nom de package spécifié par l'appelant. Pour plus d'informations, consultez la commande relative à la commande.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": "Par défaut, cette variable n'est pas définie. Si CMAKE_FIND_USE_PACKAGE_REGISTRY ou CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY n'est pas défini, find_package() utilise le registre de packages utilisateur, sauf si l'option NO_CMAKE_PACKAGE_REGISTRY est fournie.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": "Par défaut, cette variable n'est pas définie. Si CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY ou CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY n'est pas défini, find_package() utilise le registre de packages système, sauf si l'option NO_CMAKE_SYSTEM_PACKAGE_REGISTRY est fournie.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_PREFER_CONFIG": "Indique à find_package d'essayer le mode \"Config\" avant le mode \"Module\" si aucun mode n'a été spécifié.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_REDIRECTS_DIR": "Cette variable en lecture seule spécifie un répertoire que la commande find_package doit d’abord vérifier avant de rechercher ailleurs un module ou un fichier de package de configuration. Un fichier de package de configuration de ce répertoire est toujours trouvé dans la préférence de tout autre fichier de module Rechercher ou fichier de package de configuration.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": "A la valeur TRUE pour indiquer aux appels de find_package de résoudre les liens symboliques dans la valeur de <PackageName>_DIR.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_SORT_DIRECTION": "Sens du tri utilisé par CMAKE_FIND_PACKAGE_SORT_ORDER. Il peut prendre l'une des valeurs suivantes :",
	"assets/variables.json.CMAKE_FIND_PACKAGE_SORT_ORDER": "Ordre par défaut de tri des packages trouvés à l'aide de find_package. Il peut prendre l'une des valeurs suivantes :",
	"assets/variables.json.CMAKE_FIND_PACKAGE_TARGETS_GLOBAL": "La valeur VRAI permet de promouvoir toutes les cibles IMPORTÉES découvertes par find_package en une étendue GLOBALE.",
	"assets/variables.json.CMAKE_FIND_PACKAGE_WARN_NO_MODULE": "Indiquez à find_package d'émettre un avertissement s'il est appelé sans mode explicite.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH": "Liste de chemins racines séparés par des points-virgules, à utiliser pour les recherches dans le système de fichiers.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": "Cette variable contrôle si CMAKE_FIND_ROOT_PATH et CMAKE_SYSROOT sont utilisés par FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": "Cette variable contrôle si CMAKE_FIND_ROOT_PATH et CMAKE_SYSROOT sont utilisés par FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": "Cette variable contrôle si CMAKE_FIND_ROOT_PATH et CMAKE_SYSROOT sont utilisés par FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": "Cette variable contrôle si CMAKE_FIND_ROOT_PATH et CMAKE_SYSROOT sont utilisés par FIND_XXX.",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": "Contrôle le comportement par défaut des commandes suivantes pour déterminer s'il est nécessaire de rechercher ou non les chemins fournis par les variables d'environnement spécifiques à cmake :",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_PATH": "Contrôle le comportement par défaut des commandes suivantes pour déterminer s'il est nécessaire de rechercher ou non les chemins fournis par les variables de cache spécifiques à cmake :",
	"assets/variables.json.CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": "Contrôle le comportement par défaut des commandes suivantes pour déterminer s'il est nécessaire de rechercher ou non les chemins fournis par les variables cmake spécifiques à la plateforme :",
	"assets/variables.json.CMAKE_FIND_USE_INSTALL_PREFIX": "Contrôle le comportement par défaut des commandes suivantes pour rechercher ou non les emplacements dans les variables CMAKE_INSTALL_PREFIX et CMAKE_STAGING_PREFIX.",
	"assets/variables.json.CMAKE_FIND_USE_PACKAGE_REGISTRY": "Contrôle le comportement par défaut de la commande find_package pour déterminer s'il est nécessaire de rechercher ou non les chemins fournis par le registre de packages utilisateur.",
	"assets/variables.json.CMAKE_FIND_USE_PACKAGE_ROOT_PATH": "Contrôle le comportement par défaut des commandes suivantes pour déterminer s'il est nécessaire de rechercher ou non les chemins fournis par les variables <PackageName>_ROOT :",
	"assets/variables.json.CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": "Contrôle le comportement par défaut des commandes suivantes pour déterminer s'il est nécessaire de rechercher ou non les chemins fournis par les variables d'environnement système standard :",
	"assets/variables.json.CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": "Contrôle la recherche dans le registre de packages système à l'aide de la commande find_package.",
	"assets/variables.json.CMAKE_FOLDER": "Définit le nom de dossier. À utiliser pour organiser les cibles dans un IDE.",
	"assets/variables.json.CMAKE_Fortran_FORMAT": "A la valeur FIXED ou FREE pour indiquer la disposition des fichiers sources Fortran.",
	"assets/variables.json.CMAKE_Fortran_MODDIR_DEFAULT": "Répertoire de sortie du module par défaut Fortran.",
	"assets/variables.json.CMAKE_Fortran_MODDIR_FLAG": "Indicateur Fortran pour le répertoire de sortie du module.",
	"assets/variables.json.CMAKE_Fortran_MODOUT_FLAG": "Indicateur Fortran permettant d'activer la sortie du module.",
	"assets/variables.json.CMAKE_Fortran_MODULE_DIRECTORY": "Répertoire de sortie du module Fortran.",
	"assets/variables.json.CMAKE_Fortran_PREPROCESS": "Valeur par défaut de Fortran_PREPROCESS pour les cibles.",
	"assets/variables.json.CMAKE_FRAMEWORK": "Valeur par défaut de FRAMEWORK pour les cibles.",
	"assets/variables.json.CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG": "Suffixe de nom de fichier de framework par défaut sous la configuration <CONFIG> en cas d'utilisation d'un générateur multiconfiguration.",
	"assets/variables.json.CMAKE_FRAMEWORK_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour les frameworks macOS utilisés par les commandes find_library, find_package, find_path et find_file.",
	"assets/variables.json.CMAKE_GENERATOR": "Générateur utilisé pour générer le projet. Consultez les informations relatives aux générateurs cmake.",
	"assets/variables.json.CMAKE_GENERATOR_INSTANCE": "Spécification d'instance spécifique au générateur fournie par l'utilisateur.",
	"assets/variables.json.CMAKE_GENERATOR_PLATFORM": "Spécification de plateforme cible spécifique au générateur fournie par l'utilisateur.",
	"assets/variables.json.CMAKE_GENERATOR_TOOLSET": "Spécification d'ensemble d'outils du système de build natif fournie par l'utilisateur.",
	"assets/variables.json.CMAKE_GHS_NO_SOURCE_GROUP_FILE": "Valeur booléenne ON/OFF, qui permet de contrôler si le fichier projet d'une cible doit correspondre à un seul fichier ou plusieurs fichiers. Pour plus d'informations, consultez GHS_NO_SOURCE_GROUP_FILE.",
	"assets/variables.json.CMAKE_GLOBAL_AUTOGEN_TARGET": "Commutateur permettant d'activer la génération d'une cible autogen globale.",
	"assets/variables.json.CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": "Changez le nom de la cible autogen globale.",
	"assets/variables.json.CMAKE_GLOBAL_AUTORCC_TARGET": "Commutateur permettant d'activer la génération d'une cible autorcc globale.",
	"assets/variables.json.CMAKE_GLOBAL_AUTORCC_TARGET_NAME": "Changez le nom de la cible autorcc globale.",
	"assets/variables.json.CMAKE_GNUtoMS": "Convertissez les bibliothèques d'importation GNU (.dll.a) au format MS (.lib).",
	"assets/variables.json.CMAKE_HIP_ARCHITECTURES": "Liste des architectures de GPU pour lesquelles générer le code de l'appareil. Les noms d’architecture sont interprétés en fonction de CMAKE_HIP_PLATFORM.",
	"assets/variables.json.CMAKE_HIP_COMPILE_FEATURES": "Liste des fonctionnalités connues du compilateur HIP",
	"assets/variables.json.CMAKE_HIP_EXTENSIONS": "Valeur par défaut pour la propriété cible HIP_EXTENSIONS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_HIP_PLATFORM": "Plateforme GPU pour laquelle les sources de langage HIP doivent être compilées.",
	"assets/variables.json.CMAKE_HIP_STANDARD": "Valeur par défaut pour la propriété cible HIP_STANDARD si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_HIP_STANDARD_REQUIRED": "Valeur par défaut pour la propriété cible HIP_STANDARD_REQUIRED si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_HOME_DIRECTORY": "Chemin du niveau supérieur de l'arborescence source. Identique à CMAKE_SOURCE_DIR.",
	"assets/variables.json.CMAKE_HOST_APPLE": "Valeur True pour les systèmes d'exploitation Apple macOS.",
	"assets/variables.json.CMAKE_HOST_BSD": "Défini sur une valeur de chaîne lorsque le système hôte est BSD. Cette valeur peut être l'une des suivantes : DragonFlyBSD, FreeBSD, OpenBSD ou NetBSD.",
	"assets/variables.json.CMAKE_HOST_LINUX": "Défini sur true lorsque le système hôte est Linux.",
	"assets/variables.json.CMAKE_HOST_SOLARIS": "Valeur True pour les systèmes d'exploitation Oracle Solaris.",
	"assets/variables.json.CMAKE_HOST_SYSTEM": "Nom composite du système d'exploitation sur lequel CMake est exécuté.",
	"assets/variables.json.CMAKE_HOST_SYSTEM_NAME": "Nom du système d'exploitation sur lequel CMake est exécuté.",
	"assets/variables.json.CMAKE_HOST_SYSTEM_PROCESSOR": "Nom du CPU sur lequel CMake est exécuté.",
	"assets/variables.json.CMAKE_HOST_SYSTEM_VERSION": "Version du système d'exploitation sur laquelle CMake est exécuté.",
	"assets/variables.json.CMAKE_HOST_UNIX": "La valeur est True pour UNIX et les systèmes d'exploitation similaires à UNIX.",
	"assets/variables.json.CMAKE_HOST_WIN32": "La valeur est True si le système hôte exécute Windows, notamment Windows 64 bits et MSYS.",
	"assets/variables.json.CMAKE_IGNORE_PATH": "Liste de répertoires séparés par des points-virgules à ignorer par les différents éléments de recherche... () commandes",
	"assets/variables.json.CMAKE_IGNORE_PREFIX_PATH": "Liste de préfixes de recherche séparés par des points-virgules à ignorer par les commandes find_program, find_library, find_file et find_path. Les préfixes sont également ignorés par le mode Config de la commande find_package (le mode Module n’est pas affecté). Pour ignorer des répertoires spécifiques à la place, consultez CMAKE_IGNORE_NONPREFIX_VAR.",
	"assets/variables.json.CMAKE_IMPORT_LIBRARY_PREFIX": "Préfixe des bibliothèques d'importation que vous liez.",
	"assets/variables.json.CMAKE_IMPORT_LIBRARY_SUFFIX": "Suffixe des bibliothèques d'importation que vous liez.",
	"assets/variables.json.CMAKE_INCLUDE_CURRENT_DIR": "Ajoutez automatiquement les répertoires source et de build actuels au chemin include.",
	"assets/variables.json.CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": "Ajoutez automatiquement les répertoires source et de build actuels à la propriété cible INTERFACE_INCLUDE_DIRECTORIES.",
	"assets/variables.json.CMAKE_INCLUDE_DIRECTORIES_BEFORE": "Spécifiez si les répertoires doivent être suffixés ou préfixés par défaut dans include_directories.",
	"assets/variables.json.CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": "Spécifiez si les répertoires include du projet doivent être préfixés de force.",
	"assets/variables.json.CMAKE_INCLUDE_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour les commandes find_file et find_path. Par défaut, elle est vide et doit être définie par le projet.",
	"assets/variables.json.CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": "Composant par défaut utilisé dans les commandes d'installation.",
	"assets/variables.json.CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": "Autorisations par défaut pour les répertoires créés implicitement durant l'installation des fichiers par install et file.",
	"assets/variables.json.CMAKE_INSTALL_MESSAGE": "Spécifiez la verbosité du code de script d'installation généré par la commande install (à l'aide de la commande file). Pour les chemins récemment installés ou mis à jour, l'installation peut afficher des lignes telles que :",
	"assets/variables.json.CMAKE_INSTALL_NAME_DIR": "Nom du répertoire pour les cibles installées sur les plateformes Apple.",
	"assets/variables.json.CMAKE_INSTALL_PREFIX": "Répertoire d'installation utilisé par install.",
	"assets/variables.json.CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": "CMake donne à cette variable la valeur TRUE lorsque la variable d’environnement CMAKE_INSTALL_PREFIX vient d’être initialisée à sa valeur par défaut, typiquement lors de la première exécution de CMake dans un nouvel arbre de compilation et que la variable d’environnement CMAKE_INSTALL_PREFIX n’est pas définie lors de la première exécution de CMake. Ceci peut être utilisé par le code de projet pour changer la valeur par défaut sans remplacer une valeur fournie par l’utilisateur(-trice) :",
	"assets/variables.json.CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": "Définit la valeur par défaut indiquant si les rpath définis par la chaîne d'outils doivent être supprimés durant l'installation.",
	"assets/variables.json.CMAKE_INSTALL_RPATH": "Rpath à utiliser pour les cibles installées.",
	"assets/variables.json.CMAKE_INSTALL_RPATH_USE_LINK_PATH": "Ajoute des chemins à la recherche de l'éditeur de liens et au rpath installé.",
	"assets/variables.json.CMAKE_INTERNAL_PLATFORM_ABI": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_INTERPROCEDURAL_OPTIMIZATION": "Valeur par défaut de la propriété INTERPROCEDURAL_OPTIMIZATION des cibles.",
	"assets/variables.json.CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG": "Valeur par défaut de la propriété INTERPROCEDURAL_OPTIMIZATION_ des cibles.",
	"assets/variables.json.CMAKE_IOS_INSTALL_COMBINED": "Valeur par défaut de la propriété IOS_INSTALL_COMBINED des cibles.",
	"assets/variables.json.CMAKE_ISPC_HEADER_DIRECTORY": "Répertoire de sortie de l'en-tête généré par ISPC.",
	"assets/variables.json.CMAKE_ISPC_HEADER_SUFFIX": "Suffixe de sortie à utiliser pour les en-têtes générés par ISPC.",
	"assets/variables.json.CMAKE_ISPC_INSTRUCTION_SETS": "Valeur par défaut de la propriété ISPC_INSTRUCTION_SETS des cibles.",
	"assets/variables.json.CMAKE_JOB_POOLS": "Si la propriété globale JOB_POOLS n'est pas définie, la valeur de cette variable est utilisée à la place. Pour plus d'informations, consultez JOB_POOLS.",
	"assets/variables.json.CMAKE_JOB_POOL_COMPILE": "Cette variable est utilisée pour initialiser la propriété JOB_POOL_COMPILE sur toutes les cibles. Pour plus d'informations, consultez JOB_POOL_COMPILE.",
	"assets/variables.json.CMAKE_JOB_POOL_LINK": "Cette variable est utilisée pour initialiser la propriété JOB_POOL_LINK sur toutes les cibles. Pour plus d'informations, consultez JOB_POOL_LINK.",
	"assets/variables.json.CMAKE_JOB_POOL_PRECOMPILE_HEADER": "Cette variable est utilisée pour initialiser la propriété JOB_POOL_PRECOMPILE_HEADER sur toutes les cibles. Pour plus d'informations, consultez JOB_POOL_PRECOMPILE_HEADER.",
	"assets/variables.json.CMAKE_KATE_FILES_MODE": "Cette variable de cache est utilisée par le générateur de projet Kate et contrôle le mode d’entrée des fichiers dans le fichier de projet. Consultez les informations relatives au générateurs cmake.",
	"assets/variables.json.CMAKE_KATE_MAKE_ARGUMENTS": "Cette variable de cache est utilisée par le générateur de projet Kate. Consultez les informations relatives au générateurs cmake.",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE": "Quand vous effectuez une compilation croisée pour Android, cette variable contient le nom de machine binutils de la chaîne d'outils (par exemple gcc -dumpmachine). Les outils binutils comportent généralement <machine>- au début de leur nom.",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX": "Quand vous effectuez une compilation croisée pour Android, cette variable contient le chemin absolu qui préfixe le compilateur GNU de la chaîne d'outils et ses outils binutils.",
	"assets/variables.json.CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX": "Quand vous effectuez une compilation croisée pour Android, cette variable contient le suffixe de plateforme hôte du compilateur GNU de la chaîne d'outils et ses outils binutils.",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_APPEND": "Variable de règle à ajouter à une archive statique.",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_CREATE": "Variable de règle permettant de créer une archive statique.",
	"assets/variables.json.CMAKE_LANG_ARCHIVE_FINISH": "Variable de règle permettant de mettre fin à une archive statique existante.",
	"assets/variables.json.CMAKE_LANG_BYTE_ORDER": "Ordre d'octet de l'architecture cible du compilateur <LANG>, si l'information est connue. Si la valeur est définie et n'est pas vide, elle peut correspondre à l'un des choix suivants :",
	"assets/variables.json.CMAKE_LANG_CLANG_TIDY": "Valeur par défaut de la propriété cible <LANG>_CLANG_TIDY quand <LANG> a la valeur C, CXX, OBJC ou OBJCXX.",
	"assets/variables.json.CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR": "Valeur par défaut pour la propriété cible <LANG>_CLANG_TIDY_EXPORT_FIXES_DIR lorsque <LANG> est C, CXX, OBJC ou OBJCXX.",
	"assets/variables.json.CMAKE_LANG_COMPILER": "Chemin complet du compilateur pour LANG.",
	"assets/variables.json.CMAKE_LANG_COMPILER_ABI": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_LANG_COMPILER_AR": "Wrapper autour de ar ajoutant l'option --plugin appropriée pour le compilateur.",
	"assets/variables.json.CMAKE_LANG_COMPILER_ARCHITECTURE_ID": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN": "Chaîne d'outils externe pour la compilation croisée, si elle est prise en charge.",
	"assets/variables.json.CMAKE_LANG_COMPILER_FRONTEND_VARIANT": "Chaîne d’identification de la variante frontend du compilateur.",
	"assets/variables.json.CMAKE_LANG_COMPILER_ID": "Chaîne d'identification du compilateur.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LAUNCHER": "Valeur par défaut de la propriété cible <LANG>_COMPILER_LAUNCHER. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création. Cela se produit uniquement quand <LANG> a la valeur C, CXX, Fortran, HIP, ISPC, OBJC, OBJCXX ou CUDA.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER": "Le chemin complet vers l’éditeur de liens pour LANG.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_FRONTEND_VARIANT": "Chaîne d’identification de la variante du frontend de l’éditeur de liens.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_ID": "Chaîne d’identification de l’éditeur de liens.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LINKER_VERSION": "Chaîne de la version de l’éditeur de liens.",
	"assets/variables.json.CMAKE_LANG_COMPILER_LOADED": "À la valeur true, si le langage est activé.",
	"assets/variables.json.CMAKE_LANG_COMPILER_PREDEFINES_COMMAND": "Commande qui génère une sortie des prédéfinitions du compilateur.",
	"assets/variables.json.CMAKE_LANG_COMPILER_RANLIB": "Wrapper autour de ranlib ajoutant l'option --plugin appropriée pour le compilateur.",
	"assets/variables.json.CMAKE_LANG_COMPILER_TARGET": "Cible de la compilation croisée, si elle est prise en charge.",
	"assets/variables.json.CMAKE_LANG_COMPILER_VERSION": "Chaîne de version du compilateur.",
	"assets/variables.json.CMAKE_LANG_COMPILER_VERSION_INTERNAL": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_LANG_COMPILE_OBJECT": "Variable de règle permettant de compiler un seul fichier objet.",
	"assets/variables.json.CMAKE_LANG_CPPCHECK": "Valeur par défaut de la propriété cible <LANG>_CPPCHECK. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création. Cela se produit uniquement quand <LANG> a la valeur C ou CXX.",
	"assets/variables.json.CMAKE_LANG_CPPLINT": "Valeur par défaut de la propriété cible <LANG>_CPPLINT. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création. Cela se produit uniquement quand <LANG> a la valeur C ou CXX.",
	"assets/variables.json.CMAKE_LANG_CREATE_SHARED_LIBRARY": "Variable de règle permettant de créer une bibliothèque partagée.",
	"assets/variables.json.CMAKE_LANG_CREATE_SHARED_MODULE": "Variable de règle permettant de créer un module partagé.",
	"assets/variables.json.CMAKE_LANG_CREATE_STATIC_LIBRARY": "Variable de règle permettant de créer une bibliothèque statique.",
	"assets/variables.json.CMAKE_LANG_EXTENSIONS": "Les variantes sont :",
	"assets/variables.json.CMAKE_LANG_EXTENSIONS_DEFAULT": "Mode des extensions par défaut du compilateur. Utilisé par défaut pour la propriété cible <LANG>_EXTENSIONS lorsque CMAKE_<LANG>_EXTENSIONS n’est pas défini (voir CMP0128).",
	"assets/variables.json.CMAKE_LANG_FLAGS": "Indicateurs à l’échelle de la langue pour la langue <LANG> utilisés lors de la génération pour toutes les configurations. Ces indicateurs seront passés à tous les appels du compilateur. Cela inclut les invocations qui pilotent la compilation et celles qui pilotent l'édition de liens.",
	"assets/variables.json.CMAKE_LANG_FLAGS_CONFIG": "Indicateurs à l’échelle du langage pour le langage <LANG> utilisés lors de la génération pour la configuration <CONFIG>. Ces indicateurs seront passés à tous les appels du compilateur dans la configuration correspondante. Cela inclut les invocations qui pilotent la compilation et celles qui pilotent l'édition de liens.",
	"assets/variables.json.CMAKE_LANG_FLAGS_CONFIG_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_<LANG>_FLAGS_ la première fois qu'une arborescence de build est configurée pour le langage <LANG>. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_LANG_FLAGS_DEBUG": "Cette variable est la variante Debug de la variable CMAKE_<LANG>_FLAGS_.",
	"assets/variables.json.CMAKE_LANG_FLAGS_DEBUG_INIT": "Cette variable est la variante Debug de la variable CMAKE_<LANG>_FLAGS_<CONFIG>_INIT.",
	"assets/variables.json.CMAKE_LANG_FLAGS_INIT": "Valeur utilisée pour initialiser l’entrée de cache CMAKE_<LANG>_FLAGS la première fois qu’une arborescence de builds est configurée pour le langage <LANG>. Cette variable est destinée à être définie par un fichier de chaîne d’outils . CMake peut ajouter ou joindre du contenu à la valeur en fonction de l’environnement et de la plateforme cible. Par exemple, le contenu d’une variable d’environnement xxxFLAGS est ajouté, où xxx est spécifique à la langue, mais pas nécessairement identique à <LANG> (par exemple, CXXFLAGS pour CXX, FFLAGS pour Fortran, etc.). Cette valeur est un fragment de chaîne de ligne de commande. Par conséquent, plusieurs options doivent être séparées par des espaces, et les options avec des espaces doivent être entre guillemets.",
	"assets/variables.json.CMAKE_LANG_FLAGS_MINSIZEREL": "Cette variable est la variante MinSizeRel de la variable CMAKE_<LANG>_FLAGS_.",
	"assets/variables.json.CMAKE_LANG_FLAGS_MINSIZEREL_INIT": "Cette variable est la variante MinSizeRel de la variable CMAKE_<LANG>_FLAGS_<CONFIG>_INIT.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELEASE": "Cette variable est la variante Release de la variable CMAKE_<LANG>_FLAGS_.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELEASE_INIT": "Cette variable est la variante Release de la variable CMAKE_<LANG>_FLAGS_<CONFIG>_INIT.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELWITHDEBINFO": "Cette variable est la variante RelWithDebInfo de la variable CMAKE_<LANG>_FLAGS_.",
	"assets/variables.json.CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT": "Cette variable est la variante RelWithDebInfo de la variable CMAKE_<LANG>_FLAGS_<CONFIG>_INIT.",
	"assets/variables.json.CMAKE_LANG_HOST_COMPILER": "Cette variable est disponible quand <LANG> est CUDA ou HIP.",
	"assets/variables.json.CMAKE_LANG_IGNORE_EXTENSIONS": "Extensions de fichier à ignorer par la build.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES": "Répertoires recherchés implicitement par le compilateur pour les fichiers d'en-tête.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES": "Chemin de recherche de l'éditeur de liens implicite détecté pour le langage <LANG>.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": "Chemin de recherche du framework de l'éditeur de liens implicite détecté pour le langage <LANG>.",
	"assets/variables.json.CMAKE_LANG_IMPLICIT_LINK_LIBRARIES": "Bibliothèques et indicateurs de liens implicites détectés pour le langage <LANG>.",
	"assets/variables.json.CMAKE_LANG_INCLUDE_WHAT_YOU_USE": "Valeur par défaut de la propriété cible <LANG>_INCLUDE_WHAT_YOU_USE. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création. Cela se produit uniquement quand <LANG> a la valeur C ou CXX.",
	"assets/variables.json.CMAKE_LANG_LIBRARY_ARCHITECTURE": "Nom du répertoire de bibliothèque d'architecture cible détecté pour <LANG>.",
	"assets/variables.json.CMAKE_LANG_LINKER_LAUNCHER": "Valeur par défaut pour la propriété cible <LANG>_LINKER_LAUNCHER. Cette variable est utilisée pour initialiser la propriété sur chaque cible lors de sa création. Cette opération est effectuée uniquement lorsque <LANG> est C, CXX, OBJC ou OBJCXX.",
	"assets/variables.json.CMAKE_LANG_LINKER_PREFERENCE": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_LANG_LINKER_WRAPPER_FLAG": "Définit la syntaxe de l'option du pilote du compilateur pour passer les options à l'outil Éditeur de liens. Permet de traduire le préfixe LINKER: dans les options d'édition de liens (consultez add_link_options et target_link_options).",
	"assets/variables.json.CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP": "Cette variable est utilisée avec la variable CMAKE_<LANG>_LINKER_WRAPPER_FLAG pour mettre en forme le préfixe LINKER: dans les options d'édition de liens (consultez add_link_options et target_link_options).",
	"assets/variables.json.CMAKE_LANG_LINK_EXECUTABLE": "Variable de règle permettant de lier un exécutable.",
	"assets/variables.json.CMAKE_LANG_LINK_GROUP_USING_FEATURE": "Cette variable définit comment lier une bibliothèque ou un groupe de bibliothèque pour le <FEATURE> spécifié lorsqu’une expression de générateur LINK_GROUP est utilisée et que le langage de lien de la cible est <LANG>. Pour que cette variable ait un effet quelconque, la variable CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED associée doit avoir la valeur vrai.",
	"assets/variables.json.CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED": "Cette variable spécifie si le <FEATURE> est pris en charge pour le langage de lien <LANG>. Si cette variable a la valeur vrai, le <FEATURE> doit être défini par CMAKE_<LANG>_LINK_GROUP_USING_ et les variables plus génériques CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED et CMAKE_LINK_GROUP_USING_ ne sont pas utilisées.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FEATURE_ATTRIBUTES": "Cette variable définit la sémantique de la bibliothèque de liens spécifiée <FEATURE> lors de la liaison avec le langage de lien <LANG>. Il a priorité sur CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES si cette variable est également définie pour la même <FEATURE>, mais a par ailleurs des effets similaires. Voir CMAKE_LINK_LIBRARY_<FEATURE>_ATTRIBUTES pour plus de détails.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FILE_FLAG": "Indicateur spécifique au langage à utiliser pour lier une bibliothèque spécifiée par un chemin à son fichier.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_FLAG": "Indicateur à utiliser pour lier une bibliothèque à une bibliothèque partagée ou un exécutable.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_SUFFIX": "Suffixe spécifique au langage des bibliothèques que vous liez.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_USING_FEATURE": "Cette variable définit comment lier une bibliothèque ou un framework pour le <FEATURE> spécifié lorsqu’une expression de générateur LINK_LIBRARY est utilisée et que le langage de lien de la cible est <LANG>. Pour que cette variable ait un effet quelconque, la variable CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED associée doit avoir la valeur vrai.",
	"assets/variables.json.CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED": "Affectez la valeur VRAI si le <FEATURE>, tel que défini par la variable CMAKE_<LANG>_LINK_LIBRARY_USING_, est pris en charge pour le langage de l’éditeur de liens <LANG>.",
	"assets/variables.json.CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG": "Indicateur d’éditeur de liens à utiliser pour configurer l’éditeur de liens afin que toutes les bibliothèques spécifiées sur la ligne de commande soient liées à la cible.",
	"assets/variables.json.CMAKE_LANG_OUTPUT_EXTENSION": "Extension de la sortie d'une compilation pour un seul fichier.",
	"assets/variables.json.CMAKE_LANG_PLATFORM_ID": "Variable interne susceptible de changer.",
	"assets/variables.json.CMAKE_LANG_SIMULATE_ID": "Chaîne d'identification du compilateur « simulé ».",
	"assets/variables.json.CMAKE_LANG_SIMULATE_VERSION": "Chaîne de version du compilateur \"simulé\".",
	"assets/variables.json.CMAKE_LANG_SIZEOF_DATA_PTR": "Taille des types pointeur vers données pour le langage <LANG>.",
	"assets/variables.json.CMAKE_LANG_SOURCE_FILE_EXTENSIONS": "Extensions des fichiers sources pour le langage donné.",
	"assets/variables.json.CMAKE_LANG_STANDARD": "Les variantes sont :",
	"assets/variables.json.CMAKE_LANG_STANDARD_DEFAULT": "Norme par défaut du compilateur pour le langage <LANG>. Vide si le compilateur n’a pas de conception des niveaux standard.",
	"assets/variables.json.CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES": "Répertoires include à utiliser pour chaque fichier source compilé avec le compilateur <LANG>. Cela permet de spécifier les répertoires include système nécessaires au langage pour la plateforme active. Les répertoires apparaissent toujours à la fin du chemin include passé au compilateur.",
	"assets/variables.json.CMAKE_LANG_STANDARD_LATEST": "Cette variable représente le minimum entre la dernière version de la norme pour le langage <LANG> qui est prise en charge par le compilateur actuel et la dernière version qui est prise en charge par CMake. Sa valeur sera définie sur l'une des valeurs prises en charge de la propriété cible <LANG>_STANDARD correspondante ; consultez la documentation de cette propriété pour obtenir une liste des langues prises en charge.",
	"assets/variables.json.CMAKE_LANG_STANDARD_LIBRARIES": "Bibliothèques liées à chaque exécutable et bibliothèques partagées liées pour le langage <LANG>. Cela permet de spécifier les bibliothèques système nécessaires au langage pour la plateforme active.",
	"assets/variables.json.CMAKE_LANG_STANDARD_REQUIRED": "Les variantes sont :",
	"assets/variables.json.CMAKE_LANG_USING_LINKER_MODE": "Contrôle la manière dont la valeur de la variable<LANG>_USING_LINKER_ CMAKE_ doit être interprétée. Les valeurs de mode de l’éditeur de liens prises en charge sont :",
	"assets/variables.json.CMAKE_LANG_USING_LINKER_TYPE": "Cette variable définit comment spécifier l’éditeur de liens <TYPE> pour l’étape de lien, tel que contrôlé par la variable CMAKE_LINKER_TYPE ou la propriété cible LINKER_TYPE. Selon la valeur de la variable<LANG>_USING_LINKER_MODE CMAKE_, CMAKE_<LANG>_USING_LINKER_<TYPE> peut contenir des indicateurs de compilateur pour l’étape de liaison ou des indicateurs à donner directement à l’outil éditeur de liens.",
	"assets/variables.json.CMAKE_LANG_VISIBILITY_PRESET": "Valeur par défaut de la propriété cible <LANG>_VISIBILITY_PRESET quand une cible est créée.",
	"assets/variables.json.CMAKE_LIBRARY_ARCHITECTURE": "Nom de répertoire de la bibliothèque d'architecture cible, si elle est détectée.",
	"assets/variables.json.CMAKE_LIBRARY_ARCHITECTURE_REGEX": "Regex correspondant aux noms de répertoires possibles de la bibliothèque d'architecture cible.",
	"assets/variables.json.CMAKE_LIBRARY_OUTPUT_DIRECTORY": "Emplacement de l'ensemble des fichiers cibles LIBRARY, une fois leur génération effectuée.",
	"assets/variables.json.CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG": "Emplacement de l'ensemble des fichiers cibles LIBRARY, une fois leur génération effectuée pour une configuration spécifique.",
	"assets/variables.json.CMAKE_LIBRARY_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour la commande find_library. Par défaut, elle est vide et doit être définie par le projet.",
	"assets/variables.json.CMAKE_LIBRARY_PATH_FLAG": "Indicateur à utiliser pour ajouter un chemin de recherche de bibliothèque à un compilateur.",
	"assets/variables.json.CMAKE_LINKER_TYPE": "Spécifiez l’éditeur de liens à utiliser pour l’étape de liaison.",
	"assets/variables.json.CMAKE_LINK_DEF_FILE_FLAG": "Indicateur d'éditeur de liens à utiliser pour spécifier un fichier .def pour la création d'une dll.",
	"assets/variables.json.CMAKE_LINK_DEPENDS_NO_SHARED": "Indique si les dépendances des liens des fichiers de bibliothèque partagée doivent être ignorées ou non.",
	"assets/variables.json.CMAKE_LINK_DEPENDS_USE_LINKER": "Pour les générateurs Makefile et Ninja, les dépendances de liens sont désormais générées par l’éditeur de liens proprement dit pour une sélection d’éditeurs de liens. En définissant cette variable avec la valeur FALSE, vous pouvez désactiver cette fonctionnalité.",
	"assets/variables.json.CMAKE_LINK_DIRECTORIES_BEFORE": "Spécifiez si les répertoires doivent être suffixés ou préfixés par défaut dans link_directories.",
	"assets/variables.json.CMAKE_LINK_GROUP_USING_FEATURE": "Cette variable définit comment lier une groupe de bibliothèques pour le <FEATURE> spécifié lorsqu’une expression de générateur LINK_GROUP est utilisée. Les deux conditions suivantes doivent être remplies pour que cette variable ait un effet :",
	"assets/variables.json.CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED": "Cette variable spécifie si le <FEATURE> est pris en charge, quel que soit le langage de lien. Si cette variable a la valeur vrai, la <FEATURE> doit être définie par CMAKE_LINK_GROUP_USING_.",
	"assets/variables.json.CMAKE_LINK_INTERFACE_LIBRARIES": "Valeur par défaut de la propriété LINK_INTERFACE_LIBRARIES des cibles.",
	"assets/variables.json.CMAKE_LINK_LIBRARIES_ONLY_TARGETS": "Définissez cette variable pour initialiser la propriété LINK_LIBRARIES_ONLY_TARGETS des cibles non importées lors de leur création. Si la valeur est true, vous pouvez vérifier que tous les éléments nommés par target_link_libraries qui peuvent être des noms cibles sont réellement des noms de cibles existantes. Pour plus d’informations, consultez la documentation sur les propriétés cibles.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FEATURE_ATTRIBUTES": "Cette variable définit le comportement de la bibliothèque de liens spécifiée <FEATURE>. Il spécifie comment la <FEATURE> interagit avec d'autres fonctionnalités, quand la <FEATURE> doit être appliquée et les aspects de la manière dont la <FEATURE> doit être gérée lorsque CMake assemble la ligne de commande finale du linker (par exemple, la déduplication).",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FILE_FLAG": "Indicateur à utiliser pour lier une bibliothèque spécifiée par un chemin à son fichier.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_FLAG": "Indicateur à utiliser pour lier une bibliothèque à un exécutable.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_SUFFIX": "Suffixe des bibliothèques liées.",
	"assets/variables.json.CMAKE_LINK_LIBRARY_USING_FEATURE": "Cette variable définit comment lier une bibliothèque ou un framework pour le <FEATURE> spécifié lorsqu’une expression de générateur LINK_LIBRARY est utilisée. Les deux conditions suivantes doivent être remplies pour que cette variable ait un effet :",
	"assets/variables.json.CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED": "Affectez la valeur VRAI si le <FEATURE>, tel que défini par la variable CMAKE_LINK_LIBRARY_USING_, est pris en charge indépendamment du langage de l’éditeur de liens.",
	"assets/variables.json.CMAKE_LINK_SEARCH_END_STATIC": "Finit une ligne de lien pour permettre l'utilisation des bibliothèques système statiques.",
	"assets/variables.json.CMAKE_LINK_SEARCH_START_STATIC": "Suppose que l'éditeur de liens recherche les bibliothèques statiques par défaut.",
	"assets/variables.json.CMAKE_LINK_WHAT_YOU_USE": "Valeur par défaut de la propriété cible LINK_WHAT_YOU_USE. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création.",
	"assets/variables.json.CMAKE_LINK_WHAT_YOU_USE_CHECK": "Définit la commande exécutée après l’étape de lien pour vérifier l’utilisation des bibliothèques. Cette vérification est actuellement définie uniquement sur les plateformes ELF avec la valeur ldd -u -r.",
	"assets/variables.json.CMAKE_MACOSX_BUNDLE": "Valeur par défaut de la propriété MACOSX_BUNDLE des cibles.",
	"assets/variables.json.CMAKE_MACOSX_RPATH": "Spécifie l'utilisation ou non de rpath sur macOS et iOS.",
	"assets/variables.json.CMAKE_MAJOR_VERSION": "Premier composant de numéro de version de la variable CMAKE_VERSION.",
	"assets/variables.json.CMAKE_MAKE_PROGRAM": "Outil permettant de lancer le système de build natif. La valeur peut être le chemin complet d'un exécutable ou simplement le nom de l'outil, s'il est censé se trouver dans PATH.",
	"assets/variables.json.CMAKE_MAP_IMPORTED_CONFIG_CONFIG": "Valeur par défaut de la propriété MAP_IMPORTED_CONFIG_ des cibles.",
	"assets/variables.json.CMAKE_MATCH_COUNT": "Nombre de correspondances avec la dernière expression régulière.",
	"assets/variables.json.CMAKE_MATCH_n": "Groupe de capture <n> auquel correspond la dernière expression régulière, pour les groupes allant de 0 à 9. Le groupe 0 représente la correspondance complète. Les groupes allant de 1 à 9 sont les sous-expressions capturées par la syntaxe ().",
	"assets/variables.json.CMAKE_MAXIMUM_RECURSION_DEPTH": "Profondeur de récursivité maximale pour les scripts CMake. Elle doit être définie sur la ligne de commande avec -DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>, ou dans CMakeLists.txt par les projets qui nécessitent une grande profondeur de récursivité. Les projets qui définissent cette variable doivent fournir à l'utilisateur un moyen de la substituer. Exemple :",
	"assets/variables.json.CMAKE_MESSAGE_CONTEXT": "Lorsqu'elle est activée par l'option de ligne de commande cmake --log-context ou la variable CMAKE_MESSAGE_CONTEXT_SHOW, la commande message convertit la liste CMAKE_MESSAGE_CONTEXT en une chaîne séparée par des points entourée de crochets et l'ajoute au début de chaque ligne pour les messages des niveaux de journalisation NOTICE et inférieurs.",
	"assets/variables.json.CMAKE_MESSAGE_CONTEXT_SHOW": "L'affectation de la valeur true à cette variable permet d'afficher un contexte avec chaque ligne journalisée par la commande message (consultez CMAKE_MESSAGE_CONTEXT pour savoir comment le contexte lui-même est spécifié).",
	"assets/variables.json.CMAKE_MESSAGE_INDENT": "La commande message joint les chaînes de cette liste aux niveaux de journalisation NOTICE et inférieurs. Elle ajoute la chaîne résultante à chaque ligne du message.",
	"assets/variables.json.CMAKE_MESSAGE_LOG_LEVEL": "Lorsqu'elle est définie, cette variable spécifie le niveau de journalisation utilisé par la commande message. Les valeurs valides sont les mêmes que celles de l'option de ligne de commande --log-level <cmake --log-level> du programme cmake. Si cette variable est définie et que l'option de ligne de commande --log-level <cmake --log-level> est donnée, l'option de ligne de commande est prioritaire.",
	"assets/variables.json.CMAKE_MFC_FLAG": "Permet d'utiliser la bibliothèque MFC pour un exécutable ou une dll.",
	"assets/variables.json.CMAKE_MINIMUM_REQUIRED_VERSION": "La <min>version de CMake donnée à l’appel le plus récent à la commande cmake_minimum_required dans l’étendue de variable actuelle ou toute étendue de variable parente.",
	"assets/variables.json.CMAKE_MINOR_VERSION": "Deuxième composant de numéro de version de la variable CMAKE_VERSION.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS": "Indicateurs de l'éditeur de liens à utiliser pour créer des modules.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_CONFIG": "Indicateurs à utiliser au moment de l'édition des liens d'un module.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_MODULE_LINKER_FLAGS_ la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_MODULE_LINKER_FLAGS_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_MODULE_LINKER_FLAGS la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_MODULE_PATH": "Liste de répertoires séparés par des points-virgules, représentés par des barres obliques, spécifiant un chemin de recherche pour les modules CMake à charger par les commandes inclure ou find_package avant de vérifier les modules par défaut fournis avec CMake. Par défaut c'est vide. Il est destiné à être défini par le projet.",
	"assets/variables.json.CMAKE_MSVCIDE_RUN_PATH": "Emplacements PATH supplémentaires qui doivent être utilisés lors de l’exécution de add_custom_command ou add_custom_target lors de l’utilisation du générateur Visual Studio 12 2013 (ou supérieur). Cela permet d'exécuter des commandes et d'utiliser des DLL dont l'environnement IDE n'est pas conscient.",
	"assets/variables.json.CMAKE_MSVC_DEBUG_INFORMATION_FORMAT": "Sélectionnez le format d'informations de débogage MSVC ciblant l'ABI MSVC. Cette variable est utilisée pour initialiser la propriété MSVC_DEBUG_INFORMATION_FORMAT sur toutes les cibles lors de leur création. Il est également propagé par des appels à la commande try_compile dans le projet de test.",
	"assets/variables.json.CMAKE_MSVC_RUNTIME_LIBRARY": "Permet de sélectionner la bibliothèque runtime MSVC à utiliser par les compilateurs ciblant l'ABI MSVC. Cette variable est utilisée pour initialiser la propriété MSVC_RUNTIME_LIBRARY sur toutes les cibles au moment de leur création. Elle est également propagée par les appels à la commande try_compile dans le projet de test.",
	"assets/variables.json.CMAKE_NETRC": "Cette variable est utilisée pour initialiser l'option NETRC des commandes file et file. Pour plus d'informations, consultez ces commandes.",
	"assets/variables.json.CMAKE_NETRC_FILE": "Cette variable est utilisée pour initialiser l'option NETRC_FILE des commandes file et file. Pour plus d'informations, consultez ces commandes.",
	"assets/variables.json.CMAKE_NINJA_OUTPUT_PATH_PREFIX": "Demandez aux générateurs Ninja d’ajouter un préfixe à chaque chemin de sortie dans build.ninja. Une barre oblique de fin est ajoutée au préfixe, si elle est manquante.",
	"assets/variables.json.CMAKE_NOT_USING_CONFIG_FLAGS": "Les indicateurs _BUILD_TYPE sont ignorés, si la valeur est true.",
	"assets/variables.json.CMAKE_NO_BUILTIN_CHRPATH": "N'utilisez pas l'éditeur binaire intégré pour corriger les chemins de recherche de bibliothèque runtime durant l'installation.",
	"assets/variables.json.CMAKE_NO_SYSTEM_FROM_IMPORTED": "Valeur par défaut de la propriété NO_SYSTEM_FROM_IMPORTED des cibles.",
	"assets/variables.json.CMAKE_OBJCXX_EXTENSIONS": "Valeur par défaut pour la propriété cible OBJCXX_EXTENSIONS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_OBJCXX_STANDARD": "Valeur par défaut pour la propriété cible OBJCXX_STANDARD si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_OBJCXX_STANDARD_REQUIRED": "Valeur par défaut pour la propriété cible OBJCXX_STANDARD_REQUIRED si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_OBJC_EXTENSIONS": "Valeur par défaut pour la propriété cible OBJC_EXTENSIONS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_OBJC_STANDARD": "Valeur par défaut pour la propriété cible OBJC_STANDARD si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_OBJC_STANDARD_REQUIRED": "Valeur par défaut pour la propriété cible OBJC_STANDARD_REQUIRED si elle est définie lors de la création d’une cible.",
	"assets/variables.json.CMAKE_OBJECT_PATH_MAX": "Longueur maximale du chemin complet de fichier objet autorisée par les outils de build natifs.",
	"assets/variables.json.CMAKE_OPTIMIZE_DEPENDENCIES": "Initialise la propriété cible OPTIMIZE_DEPENDENCIES.",
	"assets/variables.json.CMAKE_OSX_ARCHITECTURES": "Ciblez des architectures spécifiques pour macOS et iOS.",
	"assets/variables.json.CMAKE_OSX_DEPLOYMENT_TARGET": "Spécifiez la version minimale de la plateforme cible (par exemple macOS ou iOS) sur laquelle les fichiers binaires cibles doivent être déployés. CMake utilise cette valeur de variable pour l'indicateur -mmacosx-version-min ou les équivalents respectifs des plateformes cibles. Pour les anciennes versions de Xcode ayant fourni plusieurs kits SDK macOS, cette variable permet également de choisir le kit SDK au cas où CMAKE_OSX_SYSROOT ne serait pas défini.",
	"assets/variables.json.CMAKE_OSX_SYSROOT": "Spécifiez l'emplacement ou le nom du kit SDK de plateforme macOS à utiliser. CMake utilise cette valeur pour calculer la valeur de l'indicateur -isysroot ou son équivalent, et pour permettre aux commandes find_* de localiser des fichiers dans le kit SDK.",
	"assets/variables.json.CMAKE_PARENT_LIST_FILE": "Chemin complet du fichier CMake contenant le fichier actuel.",
	"assets/variables.json.CMAKE_PATCH_VERSION": "Troisième composant de numéro de version de la variable CMAKE_VERSION.",
	"assets/variables.json.CMAKE_PCH_INSTANTIATE_TEMPLATES": "Cette variable est utilisée pour initialiser la propriété PCH_INSTANTIATE_TEMPLATES des cibles au moment de leur création.",
	"assets/variables.json.CMAKE_PCH_WARN_INVALID": "Cette variable est utilisée pour initialiser la propriété PCH_WARN_INVALID des cibles au moment de leur création.",
	"assets/variables.json.CMAKE_PDB_OUTPUT_DIRECTORY": "Répertoire de sortie des fichiers .pdb de symboles de débogage Microsoft générés par l'éditeur de liens pour les cibles d'exécutables et de bibliothèques partagées.",
	"assets/variables.json.CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration des fichiers .pdb de symboles de débogage Microsoft générés par l'éditeur de liens pour les cibles d'exécutables et de bibliothèques partagées.",
	"assets/variables.json.CMAKE_PLATFORM_NO_VERSIONED_SONAME": "Cette variable est utilisée pour contrôler globalement si les propriétés cible VERSION et SOVERSION doivent être utilisées pour les bibliothèques partagées. Quand la valeur est true, l’ajout d’informations de version à chaque cible de bibliothèque partagée est désactivé.",
	"assets/variables.json.CMAKE_POLICY_DEFAULT_CMPNNNN": "Valeur par défaut de la stratégie CMake CMP<NNNN> quand elle n'est pas définie.",
	"assets/variables.json.CMAKE_POLICY_WARNING_CMPNNNN": "Activez ou désactivez explicitement l’avertissement lorsque CMP de stratégie CMake<NNNN> n’a pas été défini explicitement par cmake_policy ou implicitement par cmake_minimum_required. Cela est significatif uniquement pour les stratégies qui n’avertissent pas par défaut :",
	"assets/variables.json.CMAKE_POSITION_INDEPENDENT_CODE": "Valeur par défaut de la propriété POSITION_INDEPENDENT_CODE des cibles.",
	"assets/variables.json.CMAKE_PREFIX_PATH": "Liste de répertoires séparés par des points-virgules spécifiant les préfixes d'installation à rechercher par les commandes find_package, find_program, find_library, find_file et find_path. Chaque commande ajoute les sous-répertoires appropriés (par exemple bin, lib ou include), comme indiqué dans la documentation correspondante.",
	"assets/variables.json.CMAKE_PROGRAM_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour la commande find_program. Par défaut, elle est vide et doit être définie par le projet.",
	"assets/variables.json.CMAKE_PROJECT_DESCRIPTION": "Description du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_HOMEPAGE_URL": "URL de la page d'accueil du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_INCLUDE": "Fichier de langage CMake à inclure comme dernière étape de tous les appels de commande de projet. Cela permet d’injecter du code personnalisé dans les builds de projet sans modifier leur source. Consultez la rubrique Injection de code pour une discussion plus détaillée des fichiers potentiellement inclus lors d’un appel à projet.",
	"assets/variables.json.CMAKE_PROJECT_INCLUDE_BEFORE": "Fichier de langage CMake à inclure comme première étape de tous les appels de commande de projet. Cela permet d’injecter du code personnalisé dans les builds de projet sans modifier leur source. Consultez la rubrique Injection de code pour une discussion plus détaillée des fichiers potentiellement inclus lors d’un appel à projet.",
	"assets/variables.json.CMAKE_PROJECT_NAME": "Nom du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_PROJECT-NAME_INCLUDE": "Fichier de langage CMake à inclure en tant que dernière étape des appels de commande de projet qui spécifient <PROJECT-NAME> en tant que nom de projet. Cela permet d’injecter du code personnalisé dans les builds de projet sans modifier leur source. Consultez la rubrique Injection de code pour une discussion plus détaillée des fichiers potentiellement inclus lors d’un appel à projet.",
	"assets/variables.json.CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE": "Fichier de langage CMake à inclure en tant que première étape des appels de commande de projet qui spécifient <PROJECT-NAME> en tant que nom de projet. Cela permet d’injecter du code personnalisé dans les builds de projet sans modifier leur source. Consultez la rubrique Injection de code pour une discussion plus détaillée des fichiers potentiellement inclus lors d’un appel à projet.",
	"assets/variables.json.CMAKE_PROJECT_TOP_LEVEL_INCLUDES": "Liste de fichiers de langage CMake séparés par des points-virgules à inclure dans le cadre du tout premier appel de projet. Les fichiers seront inclus immédiatement après la lecture du fichier de chaîne d’outils (le cas échéant) et la définition des variables de plateforme, mais avant l’activation des langues. Par conséquent, il est possible que les variables spécifiques à la langue, notamment des éléments tels que CMAKE_<LANG>_COMPILER, ne soient pas définies. Consultez l’injection de code pour obtenir une discussion plus détaillée des fichiers potentiellement inclus lors d’un appel de projet.",
	"assets/variables.json.CMAKE_PROJECT_VERSION": "Version du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_MAJOR": "Version principale du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_MINOR": "Version mineure du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_PATCH": "Version corrective du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_PROJECT_VERSION_TWEAK": "Version adaptée du projet de niveau supérieur.",
	"assets/variables.json.CMAKE_RANLIB": "Nom de l'outil de randomisation pour les bibliothèques statiques.",
	"assets/variables.json.CMAKE_REQUIRE_FIND_PACKAGE_PackageName": "Variable permettant de rendre l'appel à find_package REQUIRED.",
	"assets/variables.json.CMAKE_ROOT": "Répertoire d'installation pour l'exécution de cmake.",
	"assets/variables.json.CMAKE_RULE_MESSAGES": "Spécifie si un message doit être affiché pour chaque règle make.",
	"assets/variables.json.CMAKE_RUNTIME_OUTPUT_DIRECTORY": "Emplacement de l'ensemble des fichiers cibles RUNTIME, une fois leur génération effectuée.",
	"assets/variables.json.CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG": "Emplacement de l'ensemble des fichiers cibles RUNTIME, une fois leur génération effectuée pour une configuration spécifique.",
	"assets/variables.json.CMAKE_SCRIPT_MODE_FILE": "Chemin complet du fichier de script -P cmake en cours de traitement.",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_ENABLE_EXPORTS": "Spécifiez si la bibliothèque partagée génère un fichier d’importation.",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_PREFIX": "Préfixe des bibliothèques partagées liées.",
	"assets/variables.json.CMAKE_SHARED_LIBRARY_SUFFIX": "Suffixe des bibliothèques partagées liées.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS": "Indicateurs de l'éditeur de liens à utiliser pour créer des bibliothèques partagées.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_CONFIG": "Indicateurs à utiliser au moment de l'édition des liens d'une bibliothèque partagée.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_SHARED_LINKER_FLAGS_ la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_SHARED_LINKER_FLAGS_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_SHARED_LINKER_FLAGS la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_SHARED_MODULE_PREFIX": "Préfixe des modules chargeables liées.",
	"assets/variables.json.CMAKE_SHARED_MODULE_SUFFIX": "Suffixe des bibliothèques partagées liées.",
	"assets/variables.json.CMAKE_SIZEOF_VOID_P": "Taille d'un pointeur void.",
	"assets/variables.json.CMAKE_SKIP_BUILD_RPATH": "N'incluez pas de RPATH dans l'arborescence de build.",
	"assets/variables.json.CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": "Ne faites pas dépendre la cible de install de la cible de all.",
	"assets/variables.json.CMAKE_SKIP_INSTALL_RPATH": "N'incluez pas de RPATH dans l'arborescence d'installation.",
	"assets/variables.json.CMAKE_SKIP_INSTALL_RULES": "Spécifie la désactivation ou non de la génération de règles d'installation.",
	"assets/variables.json.CMAKE_SKIP_RPATH": "Si la valeur est true, aucune information relative au chemin du runtime n'est ajoutée.",
	"assets/variables.json.CMAKE_SKIP_TEST_ALL_DEPENDENCY": "Contrôlez si la cible de test dépend de toutes les cibles.",
	"assets/variables.json.CMAKE_SOURCE_DIR": "Chemin du niveau supérieur de l'arborescence source.",
	"assets/variables.json.CMAKE_STAGING_PREFIX": "Cette variable peut avoir comme valeur un chemin d'installation à utiliser durant la compilation croisée. Cela peut être utile si le chemin dans CMAKE_SYSROOT est en lecture seule, ou s'il doit rester vierge.",
	"assets/variables.json.CMAKE_STATIC_LIBRARY_PREFIX": "Préfixe des bibliothèques statiques liées.",
	"assets/variables.json.CMAKE_STATIC_LIBRARY_SUFFIX": "Suffixe des bibliothèques statiques liées.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS": "Indicateurs à utiliser pour créer des bibliothèques statiques. Ces indicateurs sont passés à l'archiviste au moment de la création d'une bibliothèque statique.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_CONFIG": "Indicateurs à utiliser pour créer des bibliothèques statiques. Ces indicateurs sont passés à l'archiviste au moment de la création d'une bibliothèque statique dans la configuration <CONFIG>.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_STATIC_LINKER_FLAGS_ la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_STATIC_LINKER_FLAGS_INIT": "Valeur utilisée pour initialiser l'entrée de cache CMAKE_STATIC_LINKER_FLAGS la première fois qu'une arborescence de build est configurée. Cette variable est censée être définie par un fichier de chaîne d'outils. CMake peut ajouter du contenu au début ou à la fin de la valeur en fonction de l'environnement et de la plateforme cible.",
	"assets/variables.json.CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": "Cette variable contient une liste de variables d'environnement sous forme de liste de jetons avec la syntaxe var=valeur.",
	"assets/variables.json.CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": "Si cette variable a la valeur ON à la fin du fichier CMakeLists.txt de niveau supérieur, le générateur supplémentaire de Sublime Text 2 exclut l'arborescence de build du projet .sublime, si elle se trouve à l'intérieur de l'arborescence source.",
	"assets/variables.json.CMAKE_SUPPRESS_REGENERATION": "Si CMAKE_SUPPRESS_REGENERATION a la valeur OFF (valeur par défaut), CMake ajoute une cible spéciale dont dépendent toutes les autres cibles. Elle vérifie le système de build et réexécute éventuellement CMake pour regénérer le système de build quand la source de la spécification de cible change.",
	"assets/variables.json.CMAKE_Swift_COMPILATION_MODE": "Spécifiez comment Swift compile une cible. Cette variable est utilisée pour initialiser la propriété Swift_COMPILATION_MODE sur les cibles lors de leur création.",
	"assets/variables.json.CMAKE_Swift_LANGUAGE_VERSION": "Permet de définir le numéro de version du langage Swift. S'il n'est pas défini, la version héritée la plus ancienne disponible dans la version Xcode de l'hôte est prise en compte :",
	"assets/variables.json.CMAKE_Swift_MODULE_DIRECTORY": "Répertoire de sortie du module Swift.",
	"assets/variables.json.CMAKE_Swift_NUM_THREADS": "Nombre de threads pour la compilation parallèle des cibles Swift.",
	"assets/variables.json.CMAKE_SYSROOT": "Chemin à passer au compilateur dans l'indicateur --sysroot.",
	"assets/variables.json.CMAKE_SYSROOT_COMPILE": "Chemin à passer au compilateur dans l'indicateur --sysroot durant la compilation des fichiers sources. Ceci est identique à CMAKE_SYSROOT mais sert uniquement à la compilation des sources et non à l'édition des liens.",
	"assets/variables.json.CMAKE_SYSROOT_LINK": "Chemin à passer au compilateur dans l'indicateur --sysroot au moment de l'édition des liens. Ceci est identique à CMAKE_SYSROOT mais sert uniquement à l'édition des liens et non à la compilation des sources.",
	"assets/variables.json.CMAKE_SYSTEM": "Nom composite du système d'exploitation pour lequel CMake effectue la compilation.",
	"assets/variables.json.CMAKE_SYSTEM_APPBUNDLE_PATH": "Chemin de recherche des bundles d'applications macOS utilisés par les commandes find_program et find_package. Contient par défaut les répertoires standard du système actuel. Il n'est pas destiné à être modifié par le projet. Pour cela, utilisez CMAKE_APPBUNDLE_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_FRAMEWORK_PATH": "Chemin de recherche des frameworks macOS utilisés par les commandes find_library, find_package, find_path et find_file. Contient par défaut les répertoires standard du système actuel. Il n'est pas destiné à être modifié par le projet. Pour cela, utilisez CMAKE_FRAMEWORK_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_IGNORE_PATH": "Liste de répertoires séparés par des points-virgules à ignorer par les différents éléments de recherche... () commandes",
	"assets/variables.json.CMAKE_SYSTEM_IGNORE_PREFIX_PATH": "Liste de préfixes de recherche séparés par des points-virgules à ignorer par les commandes find_program, find_library, find_file et find_path. Les préfixes sont également ignorés par le mode Config de la commande find_package (le mode Module n’est pas affecté). Pour ignorer des répertoires spécifiques à la place, consultez CMAKE_IGNORE_NONPREFIX_VAR.",
	"assets/variables.json.CMAKE_SYSTEM_INCLUDE_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour les commandes find_file et find_path. Contient par défaut les répertoires standard du système actuel. Il n'est pas destiné à être modifié par le projet. Pour cela, utilisez CMAKE_INCLUDE_PATH. Voir aussi CMAKE_SYSTEM_PREFIX_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_LIBRARY_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour la commande find_library. Contient par défaut les répertoires standard du système actuel. Il n'est pas destiné à être modifié par le projet. Pour cela, utilisez CMAKE_LIBRARY_PATH. Voir aussi CMAKE_SYSTEM_PREFIX_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_NAME": "Nom du système d'exploitation pour lequel CMake effectue la génération. Pour la version du système d'exploitation, consultez les informations relatives à la variable CMAKE_SYSTEM_VERSION.",
	"assets/variables.json.CMAKE_SYSTEM_PREFIX_PATH": "Liste de répertoires séparés par des points-virgules spécifiant les préfixes d'installation à rechercher par les commandes find_package, find_program, find_library, find_file et find_path. Chaque commande ajoute les sous-répertoires appropriés (par exemple bin, lib ou include), comme indiqué dans la documentation correspondante.",
	"assets/variables.json.CMAKE_SYSTEM_PROCESSOR": "Quand vous n'effectuez pas de compilation croisée, cette variable a la même valeur que la variable CMAKE_HOST_SYSTEM_PROCESSOR. Dans de nombreux cas, cela correspond à l'architecture cible de la build, mais ce n'est pas garanti. (Par exemple, sur Windows, l'hôte peut être AMD64 même quand vous utilisez un compilateur cl MSVC avec une cible 32 bits.)",
	"assets/variables.json.CMAKE_SYSTEM_PROGRAM_PATH": "Liste de répertoires séparés par des points-virgules spécifiant un chemin de recherche pour la commande find_program. Contient par défaut les répertoires standard du système actuel. Il n'est pas destiné à être modifié par le projet. Pour cela, utilisez CMAKE_PROGRAM_PATH. Voir aussi CMAKE_SYSTEM_PREFIX_PATH.",
	"assets/variables.json.CMAKE_SYSTEM_VERSION": "Version du système d'exploitation pour lequel CMake effectue la génération. Pour le nom du système d'exploitation, consultez les informations relatives à la variable CMAKE_SYSTEM_NAME.",
	"assets/variables.json.CMAKE_TASKING_TOOLSET": "Sélectionnez le jeu d'outils Tasking qui fournit le compilateur",
	"assets/variables.json.CMAKE_TEST_LAUNCHER": "Cette variable est utilisée pour initialiser la propriété cible TEST_LAUNCHER des cibles exécutables lors de leur création. Elle est utilisée pour spécifier un lanceur pour l’exécution des tests, ajoutés par la commande add_test, qui exécutent une cible exécutable.",
	"assets/variables.json.CMAKE_TLS_CAINFO": "Spécifiez la valeur par défaut des options de TLS_CAINFO du fichier et des commandes de fichier. Il n’est pas défini par défaut.",
	"assets/variables.json.CMAKE_TLS_VERIFY": "Spécifiez la valeur par défaut pour les options TLS_VERIFY des commandes de fichier et de fichier. Si cette variable n'est pas définie, les commandes vérifient la variable d'environnement CMAKE_TLS_VERIFY. Si aucun des deux n'est défini, la valeur par défaut est désactivée.",
	"assets/variables.json.CMAKE_TLS_VERSION": "Spécifiez la valeur par défaut pour le fichier et l'option TLS_VERSION des commandes de fichier. Si cette variable n'est pas définie, les commandes vérifient la variable d'environnement CMAKE_TLS_VERSION.",
	"assets/variables.json.CMAKE_TOOLCHAIN_FILE": "Chemin du fichier de chaîne d'outils fourni à cmake.",
	"assets/variables.json.CMAKE_TRY_COMPILE_CONFIGURATION": "Configuration de build utilisée pour les projets try_compile et try_run.",
	"assets/variables.json.CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES": "Affectez une valeur vrai pour indiquer à la commande try_compile de ne pas propager de variables de plateforme dans le projet de test.",
	"assets/variables.json.CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": "Liste des variables que la signature de fichier source de la commande try_compile doit propager dans le projet de test pour cibler la même plateforme que le projet hôte.",
	"assets/variables.json.CMAKE_TRY_COMPILE_TARGET_TYPE": "Type de cible généré pour les appels de try_compile à l'aide de la signature de fichier source. Valeurs valides :",
	"assets/variables.json.CMAKE_TWEAK_VERSION": "Défini à 0 afin de garantir une compatibilité avec le code écrit pour les anciennes versions de CMake pouvant avoir défini des valeurs plus élevées.",
	"assets/variables.json.CMAKE_UNITY_BUILD": "Cette variable est utilisée pour initialiser la propriété UNITY_BUILD des cibles au moment de leur création. Si sa valeur est true, la compilation par lot de plusieurs sources est activée dans chaque cible. Cette fonctionnalité est connue sous le nom de build Unity ou Jumbo.",
	"assets/variables.json.CMAKE_UNITY_BUILD_BATCH_SIZE": "Cette variable est utilisée pour initialiser la propriété UNITY_BUILD_BATCH_SIZE des cibles au moment de leur création. Elle spécifie la limite supérieure par défaut du nombre de fichiers sources qui peuvent être combinés dans un fichier source unity quand les builds unity sont activées pour une cible.",
	"assets/variables.json.CMAKE_UNITY_BUILD_UNIQUE_ID": "Cette variable est utilisée pour initialiser la propriété UNITY_BUILD_UNIQUE_ID des cibles au moment de leur création. Elle spécifie le nom de l'identificateur unique généré pour chaque fichier dans une build Unity.",
	"assets/variables.json.CMAKE_USER_MAKE_RULES_OVERRIDE": "Spécifiez un fichier CMake qui remplace les informations de plateforme.",
	"assets/variables.json.CMAKE_USER_MAKE_RULES_OVERRIDE_LANG": "Spécifiez un fichier CMake qui remplace les informations de plateforme pour <LANG>.",
	"assets/variables.json.CMAKE_USE_RELATIVE_PATHS": "Cette variable n'a aucun effet. L'effet partiellement implémenté dans les versions antérieures a été supprimé de CMake 3.4.",
	"assets/variables.json.CMAKE_VERBOSE_MAKEFILE": "Activez la sortie détaillée des builds Makefile.",
	"assets/variables.json.CMAKE_VERIFY_INTERFACE_HEADER_SETS": "Cette variable est utilisée pour initialiser la propriété VERIFY_INTERFACE_HEADER_SETS des cibles lors de leur création. Si la valeur est vrai, la vérification du jeu d’en-têtes est activée.",
	"assets/variables.json.CMAKE_VERSION": "La chaîne de version de CMake a trois composants entiers non négatifs séparés par . et éventuellement suivis de - et d'autres informations. Les deux premiers composants représentent le niveau de fonctionnalité et le troisième composant représente un niveau de résolution de bogue ou une date de développement.",
	"assets/variables.json.CMAKE_VISIBILITY_INLINES_HIDDEN": "Valeur par défaut de la propriété cible VISIBILITY_INLINES_HIDDEN quand une cible est créée.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_COMMAND": "Cette variable est utilisée pour initialiser la propriété VS_DEBUGGER_COMMAND sur chaque cible lors de sa création. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS": "Cette variable est utilisée pour initialiser la propriété VS_DEBUGGER_COMMAND_ARGUMENTS sur chaque cible lors de sa création. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_ENVIRONMENT": "Cette variable est utilisée pour initialiser la propriété VS_DEBUGGER_ENVIRONMENT sur chaque cible lors de sa création. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_VS_DEBUGGER_WORKING_DIRECTORY": "Cette variable est utilisée pour initialiser la propriété VS_DEBUGGER_WORKING_DIRECTORY sur chaque cible lors de sa création. Pour plus d’informations, consultez cette propriété cible.",
	"assets/variables.json.CMAKE_VS_DEVENV_COMMAND": "Les générateurs pour Visual Studio 12 2013 et versions ultérieures définissent cette variable sur la commande devenv.com installée avec la version de Visual Studio correspondante. Notez que cette variable peut être vide sur les éditions de Visual Studio Express car elles ne fournissent pas cet outil.",
	"assets/variables.json.CMAKE_VS_GLOBALS": "Liste d'enregistrements Key=Value à définir par cible en tant que propriétés cibles VS_GLOBAL_ avec la variable=Key et la valeur Value.",
	"assets/variables.json.CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": "Incluez la cible d'INSTALL dans la build par défaut.",
	"assets/variables.json.CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": "Incluez la cible de PACKAGE dans la build par défaut.",
	"assets/variables.json.CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": "Lors de la génération pour Visual Studio 12 2013 ou version ultérieure avec le plug-in Intel Fortran installé, cela spécifie la version du format de fichier de projet .vfproj. Ceci est destiné à un usage interne par CMake et ne doit pas être utilisé par le code du projet.",
	"assets/variables.json.CMAKE_VS_JUST_MY_CODE_DEBUGGING": "Activez Uniquement mon code avec le débogueur Visual Studio.",
	"assets/variables.json.CMAKE_VS_MSBUILD_COMMAND": "Les générateurs pour Visual Studio 12 2013 et versions ultérieures définissent cette variable sur la commande MSBuild.exe installée avec la version correspondante de Visual Studio.",
	"assets/variables.json.CMAKE_VS_NO_COMPILE_BATCHING": "Désactivez le traitement par lot de compilation lors de l’utilisation de générateurs Visual Studio.",
	"assets/variables.json.CMAKE_VS_NsightTegra_VERSION": "Quand vous utilisez un générateur Visual Studio avec la variable CMAKE_SYSTEM_NAME ayant la valeur Android, cette variable contient le numéro de version du logiciel NVIDIA Nsight Tegra Visual Studio Edition installé.",
	"assets/variables.json.CMAKE_VS_NUGET_PACKAGE_RESTORE": "Quand vous utilisez un générateur Visual Studio, cette variable de cache contrôle si msbuild doit tenter automatiquement de restaurer NuGet packages avant une génération. Les packages NuGet peuvent être définis à l’aide de la propriété VS_PACKAGE_REFERENCES sur une cible. Si aucune référence de package n’est définie, ce paramètre ne fait rien.",
	"assets/variables.json.CMAKE_VS_PLATFORM_NAME": "Nom de la plateforme cible Visual Studio utilisée par le générateur actuel.",
	"assets/variables.json.CMAKE_VS_PLATFORM_NAME_DEFAULT": "Valeur par défaut du nom de la plateforme cible Visual Studio pour le générateur actuel sans prise en compte de la valeur de la variable CMAKE_GENERATOR_PLATFORM. Pour les générateurs Visual Studio de VS 2017 et des versions antérieures, il s'agit toujours de Win32. Pour VS 2019 et les versions ultérieures, cette valeur dépend de la plateforme hôte.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET": "Nom de l'ensemble d'outils de plateforme Visual Studio.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_CUDA": "Version du kit de ressources NVIDIA CUDA dont l'ensemble d'outils Visual Studio est à utiliser.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": "Chemin du kit de ressources NVIDIA CUDA autonome (par exemple, celui extrait du programme d'installation).",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_FORTRAN": "Compilateur Fortran à utiliser par Visual Studio projets.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": "Architecture d'outils par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_PLATFORM_TOOLSET_VERSION": "Version de l'ensemble d'outils de plateforme Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": "Cette variable permet de remplacer les répertoires à exclure par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": "Cette variable permet de remplacer les répertoires d'exécutables par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_INCLUDE_DIRECTORIES": "Cette variable permet de remplacer les répertoires Include par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_LIBRARY_DIRECTORIES": "Cette variable permet de remplacer les répertoires de bibliothèques par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": "Cette variable permet de remplacer les répertoires WinRT de bibliothèques par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_REFERENCE_DIRECTORIES": "Cette variable permet de remplacer les répertoires de référence par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_SDK_SOURCE_DIRECTORIES": "Cette variable permet de remplacer les répertoires sources par défaut de Visual Studio.",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER": "Identificateur de version cible de .Net Framework Visual Studio.",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION": "version cible de .Net Framework Visual Studio.",
	"assets/variables.json.CMAKE_VS_TARGET_FRAMEWORK_VERSION": "Version cible de .Net Framework Visual Studio.",
	"assets/variables.json.CMAKE_VS_USE_DEBUG_LIBRARIES": "Indiquez aux générateurs Visual Studio quelles configurations sont considérées comme des configurations de débogage. Ceci contrôle le paramètre UseDebugLibraries dans chaque configuration d'un fichier .vcxproj.",
	"assets/variables.json.CMAKE_VS_VERSION_BUILD_NUMBER": "Version Visual Studio.",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": "Indiquez aux générateurs Visual Studio d’utiliser la version minimale de la plateforme cible Windows donnée.",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": "Version de plateforme cible Windows de Visual Studio.",
	"assets/variables.json.CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM": "Remplacez la version maximale du kit SDK Windows 10 pour VS 2015 et les versions ultérieures.",
	"assets/variables.json.CMAKE_VS_WINRT_BY_DEFAULT": "Permet d'informer les générateurs Visual Studio de VS 2010 et des versions ultérieures que la plateforme cible permet la compilation WinRT par défaut, et que celle-ci doit être explicitement désactivée si /ZW ou VS_WINRT_COMPONENT est omis (ou qu'elle doit être activée quand l'une de ces options est présente)",
	"assets/variables.json.CMAKE_WARN_DEPRECATED": "Spécifie si des avertissements doivent être émis pour une fonctionnalité dépréciée.",
	"assets/variables.json.CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "Demandez au script cmake_install.cmake de vous avertir chaque fois qu'un fichier avec une DESTINATION D'INSTALLATION absolue est rencontré.",
	"assets/variables.json.CMAKE_WATCOM_RUNTIME_LIBRARY": "Permet de sélectionner la bibliothèque runtime Watcom à utiliser par les compilateurs ciblant l'ABI Watcom. Cette variable est utilisée pour initialiser la propriété WATCOM_RUNTIME_LIBRARY sur toutes les cibles au moment de leur création. Elle est également propagée par les appels à la commande try_compile dans le projet de test.",
	"assets/variables.json.CMAKE_WIN32_EXECUTABLE": "Valeur par défaut de la propriété WIN32_EXECUTABLE des cibles.",
	"assets/variables.json.CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": "Valeur par défaut de la propriété cible WINDOWS_EXPORT_ALL_SYMBOLS. Cette variable est utilisée pour initialiser la propriété sur chaque cible au fur et à mesure de sa création.",
	"assets/variables.json.CMAKE_XCODE_ATTRIBUTE_an-attribute": "Définit directement les attributs de cible Xcode.",
	"assets/variables.json.CMAKE_XCODE_BUILD_SYSTEM": "Sélection du système de build Xcode.",
	"assets/variables.json.CMAKE_XCODE_GENERATE_SCHEME": "En cas d'activation, le générateur Xcode génère des fichiers de schéma. Ceux-ci permettent d'appeler des actions d'analyse, d'archivage, de génération à des fins de test et de test à partir de la ligne de commande.",
	"assets/variables.json.CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": "En cas d'activation, le générateur Xcode génère uniquement un fichier projet Xcode pour la commande project() de niveau supérieur au lieu d'en générer un pour chaque commande project().",
	"assets/variables.json.CMAKE_XCODE_LINK_BUILD_PHASE_MODE": "Cette variable est utilisée pour initialiser la propriété XCODE_LINK_BUILD_PHASE_MODE sur les cibles. Elle affecte les méthodes utilisées par le générateur Xcode pour lier les différents genres de bibliothèque. Sa valeur par défaut est NONE.",
	"assets/variables.json.CMAKE_XCODE_PLATFORM_TOOLSET": "Sélection du compilateur Xcode.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": "Indique si Address Sanitizer doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": "Indique si la détection de l'utilisation de la pile après un retour doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": "Indique si le débogage doit être autorisé avec l'Explorateur de versions de documents dans la section Options du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": "Indique si Main Thread Checker doit être désactivé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": "Indique si les chargements de bibliothèques dynamiques doivent être activés dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": "Indique si l'utilisation de l'API d'éditeur de liens dynamique doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": "Valeur de propriété pour Metal : Validation de l'API dans la section Options du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": "Valeur de propriété pour la capture de cadre GPU dans la section Options du schéma de Xcode généré. Les exemples de valeurs sont Metal et Disabled.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": "Valeur de propriété pour Metal : Shader Validation dans la section Options du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ENVIRONMENT": "Spécifiez les variables d'environnement à ajouter à la section Arguments du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_GUARD_MALLOC": "Indique si Guard Malloc doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION": "Définissez la configuration de génération pour exécuter la cible.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_LAUNCH_MODE": "Valeur de propriété pour Launch dans la section Info du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": "Indique si l'option Pause en cas de problème de Main Thread Checker doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": "Indique si Malloc Guard Edges doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": "Indique si Malloc Scribble doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_MALLOC_STACK": "Indique si Malloc Stack doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_THREAD_SANITIZER": "Indique si Thread Sanitizer doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": "Indique si l'option d'interruption en cas de problème de Thread Sanitizer doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": "Indique si Undefined Behavior Sanitizer doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": "Indique si l'option d'interruption en cas de problème d'Undefined Behavior Sanitizer doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_WORKING_DIRECTORY": "Permet de spécifier le répertoire de travail des actions Run et Profile dans le schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": "Indique si l'option relative aux objets Zombie doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.CMAKE_XCODE_XCCONFIG": "Si cette option est définie, le générateur Xcode inscrit le fichier spécifié en tant que fichier XCConfig global. Pour les fichiers XCConfig au niveau cible, consultez la propriété cible XCODE_XCCONFIG.",
	"assets/variables.json.CPACK_ABSOLUTE_DESTINATION_FILES": "Liste des fichiers qui ont été installés à l'aide d'un chemin de DESTINATION ABSOLU.",
	"assets/variables.json.CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": "Valeur booléenne permettant d'inclure/exclure le répertoire de niveau supérieur (cas des composants).",
	"assets/variables.json.CPACK_CUSTOM_INSTALL_VARIABLES": "Les variables CPack (définies par exemple, CPack-D, CPackConfig. cmake ou CPACK_PROJECT_CONFIG_FILE scripts) ne sont pas directement visibles dans les scripts d’installation. À la place, il est possible de transférer une liste de paires varName = value dans la variable CPACK_CUSTOM_INSTALL_VARIABLES. Au moment de l’installation, chaque élément de liste générera une variable du nom spécifié (varName) défini sur la valeur donnée. Le = peut être omis pour une valeur vide.",
	"assets/variables.json.CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "Demandez à CPack de générer une erreur en cas de détection d'un fichier avec une DESTINATION D'INSTALLATION absolue.",
	"assets/variables.json.CPACK_INCLUDE_TOPLEVEL_DIRECTORY": "Valeur booléenne permettant d'inclure/exclure le répertoire de niveau supérieur.",
	"assets/variables.json.CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": "Autorisations par défaut pour les répertoires créés implicitement durant le packaging.",
	"assets/variables.json.CPACK_PACKAGING_INSTALL_PREFIX": "Préfixe utilisé dans le package généré.",
	"assets/variables.json.CPACK_SET_DESTDIR": "Valeur booléenne autorisant ou non CPack à utiliser le mécanisme DESTDIR durant le packaging.",
	"assets/variables.json.CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "Demandez à CPack de vous avertir chaque fois qu'un fichier avec une DESTINATION D'INSTALLATION absolue est rencontré.",
	"assets/variables.json.CTEST_BINARY_DIRECTORY": "Spécifiez le paramètre CTest BuildDirectory dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_BUILD_COMMAND": "Spécifiez le paramètre CTest MakeCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_BUILD_NAME": "Spécifiez le paramètre CTest BuildName dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_BZR_COMMAND": "Spécifiez le paramètre CTest BZRCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_BZR_UPDATE_OPTIONS": "Spécifiez le paramètre CTest BZRUpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CHANGE_ID": "Spécifiez le paramètre CTest ChangeId dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CHECKOUT_COMMAND": "Indiquez à la commande ctest_start comment extraire ou initialiser le répertoire source dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CONFIGURATION_TYPE": "Spécifiez le paramètre CTest DefaultCTestConfigurationType dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CONFIGURE_COMMAND": "Spécifiez le paramètre CTest ConfigureCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_COVERAGE_COMMAND": "Spécifiez le paramètre CTest CoverageCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_COVERAGE_EXTRA_FLAGS": "Spécifiez le paramètre CTest CoverageExtraFlags dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CURL_OPTIONS": "Spécifiez le paramètre CTest CurlOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CUSTOM_COVERAGE_EXCLUDE": "Liste d'expressions régulières à utiliser pour exclure certains fichiers en fonction de leur chemin dans la sortie de couverture émise par la commande ctest_coverage.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_EXCEPTION": "Une liste d'expressions régulières qui seront utilisées pour exclure lors de la détection de messages d'erreur dans les sorties de construction par la commande ctest_build.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_MATCH": "Une liste d'expressions régulières qui seront utilisées pour détecter les messages d'erreur dans les sorties de construction par la commande ctest_build.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_POST_CONTEXT": "Le nombre de lignes à inclure comme contexte qui suivent un message d'erreur par la commande ctest_build. La valeur par défaut est 10.",
	"assets/variables.json.CTEST_CUSTOM_ERROR_PRE_CONTEXT": "Le nombre de lignes à inclure comme contexte qui précèdent un message d'erreur par la commande ctest_build. La valeur par défaut est 10.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": "Quand vous enregistrez la sortie d'un test non réussi, ceci représente la taille maximale, en octets, collectée par la commande ctest_test. La valeur par défaut est 307 200 (300 Kio). Consultez CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION pour connaître les modes de troncation possibles.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": "Nombre maximal d'erreurs détectées dans une seule étape de build. Au-delà, la commande ctest_test tronque la sortie. La valeur par défaut est 50.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": "Nombre maximal d'avertissements détectés dans une seule étape de build. Au-delà, la commande ctest_test tronque la sortie. La valeur par défaut est 50.",
	"assets/variables.json.CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": "Quand vous enregistrez la sortie d'un test réussi, ceci représente la taille maximale, en octets, collectée par la commande ctest_test. La valeur par défaut est 1024 (1 Kio). Consultez CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION pour connaître les modes de troncation possibles.",
	"assets/variables.json.CTEST_CUSTOM_MEMCHECK_IGNORE": "Liste d'expressions régulières à utiliser pour exclure certains tests durant l'exécution de la commande ctest_memcheck.",
	"assets/variables.json.CTEST_CUSTOM_POST_MEMCHECK": "Liste de commandes à exécuter à la fin de la commande ctest_memcheck.",
	"assets/variables.json.CTEST_CUSTOM_POST_TEST": "Liste de commandes à exécuter à la fin de la commande ctest_test.",
	"assets/variables.json.CTEST_CUSTOM_PRE_MEMCHECK": "Liste de commandes à exécuter au début de la commande ctest_memcheck.",
	"assets/variables.json.CTEST_CUSTOM_PRE_TEST": "Liste de commandes à exécuter au début de la commande ctest_test.",
	"assets/variables.json.CTEST_CUSTOM_TESTS_IGNORE": "Liste des noms de tests à exclure de l’ensemble de tests exécutés par la commande ctest_test.",
	"assets/variables.json.CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION": "Définissez le mode de troncation de sortie de test au cas où une taille maximale est configurée via les variables CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE ou CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE. Par défaut, la fin de la sortie est tronquée. Les autres valeurs possibles sont milieu et en-tête.",
	"assets/variables.json.CTEST_CUSTOM_WARNING_EXCEPTION": "Liste d'expressions régulières à utiliser pour exclure la détection de certains messages d'avertissement dans les sorties de build émises par la commande ctest_build.",
	"assets/variables.json.CTEST_CUSTOM_WARNING_MATCH": "Liste d'expressions régulières à utiliser pour détecter certains messages d'avertissement dans les sorties de build émises par la commande ctest_build.",
	"assets/variables.json.CTEST_CVS_CHECKOUT": "Déprécié. Utilisez CTEST_CHECKOUT_COMMAND à la place.",
	"assets/variables.json.CTEST_CVS_COMMAND": "Spécifiez le paramètre CTest CVSCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_CVS_UPDATE_OPTIONS": "Spécifiez le paramètre CTest CVSUpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_DROP_LOCATION": "Spécifiez le paramètre CTest DropLocation dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_DROP_METHOD": "Spécifiez le paramètre CTest DropMethod dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_DROP_SITE": "Spécifiez le paramètre CTest DropSite dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_DROP_SITE_CDASH": "Spécifiez le paramètre CTest IsCDash dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_DROP_SITE_PASSWORD": "Spécifiez le paramètre CTest DropSitePassword dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_DROP_SITE_USER": "Spécifiez le paramètre CTest DropSiteUser dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_EXTRA_COVERAGE_GLOB": "Liste d'expressions régulières à utiliser pour rechercher les fichiers qui doivent être couverts par la commande ctest_coverage.",
	"assets/variables.json.CTEST_GIT_COMMAND": "Spécifiez le paramètre CTest GITCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_GIT_INIT_SUBMODULES": "Spécifiez le paramètre CTest GITInitSubmodules dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_GIT_UPDATE_CUSTOM": "Spécifiez le paramètre CTest GITUpdateCustom dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_GIT_UPDATE_OPTIONS": "Spécifiez le paramètre CTest GITUpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_HG_COMMAND": "Spécifiez le paramètre CTest HGCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_HG_UPDATE_OPTIONS": "Spécifiez le paramètre CTest HGUpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_LABELS_FOR_SUBPROJECTS": "Spécifiez le paramètre CTest LabelsForSubprojects dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_MEMORYCHECK_COMMAND": "Spécifiez le paramètre CTest MemoryCheckCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_MEMORYCHECK_COMMAND_OPTIONS": "Spécifiez le paramètre CTest MemoryCheckCommandOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_MEMORYCHECK_SANITIZER_OPTIONS": "Spécifiez le paramètre CTest MemoryCheckSanitizerOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": "Spécifiez le paramètre CTest MemoryCheckSuppressionFile dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_MEMORYCHECK_TYPE": "Permet de spécifier le paramètre CTest MemoryCheckType dans un script client de tableau de bord ctest. Les valeurs valides sont Valgrind, Purify, BoundsChecker, DrMemory, CudaSanitizer, ThreadSanitizer, AddressSanitizer, LeakSanitizer, MemorySanitizer et UndefinedBehaviorSanitizer.",
	"assets/variables.json.CTEST_NIGHTLY_START_TIME": "Spécifiez le paramètre CTest NightlyStartTime dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_P4_CLIENT": "Spécifiez le paramètre CTest P4Client dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_P4_COMMAND": "Spécifiez le paramètre CTest P4Command dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_P4_OPTIONS": "Spécifiez le paramètre CTest P4Options dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_P4_UPDATE_OPTIONS": "Spécifiez le paramètre CTest P4UpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_RESOURCE_SPEC_FILE": "Permet de spécifier le paramètre CTest ResourceSpecFile dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_RUN_CURRENT_SCRIPT": "Si vous affectez la valeur 0, ctest ne peut plus être exécuté quand il atteint la fin d'un script exécuté via l'appel de ctest -S.",
	"assets/variables.json.CTEST_SCP_COMMAND": "Option héritée. Non utilisée.",
	"assets/variables.json.CTEST_SCRIPT_DIRECTORY": "Répertoire contenant le script CTest de niveau supérieur. Le concept est similaire à celui de CMAKE_SOURCE_DIR.",
	"assets/variables.json.CTEST_SITE": "Spécifiez le paramètre CTest Site dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_SOURCE_DIRECTORY": "Spécifiez le paramètre CTest SourceDirectory dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_SUBMIT_INACTIVITY_TIMEOUT": "Spécifiez le paramètre CTest SubmitInactivityTimeout dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_SUBMIT_URL": "Permet de spécifier le paramètre CTest SubmitURL dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_SVN_COMMAND": "Spécifiez le paramètre CTest SVNCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_SVN_OPTIONS": "Spécifiez le paramètre CTest SVNOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_SVN_UPDATE_OPTIONS": "Spécifiez le paramètre CTest SVNUpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_TEST_LOAD": "Spécifiez le paramètre TestLoad dans l'étape de test CTest d'un script client de tableau de bord ctest. Cela permet de définir la valeur par défaut de l'option TEST_LOAD de la commande ctest_test.",
	"assets/variables.json.CTEST_TEST_TIMEOUT": "Spécifiez le paramètre CTest TimeOut dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_TLS_VERIFY": "Spécifiez le paramètre CTest TLSVerify dans un script client de tableau de bord ctest ou dans le code du projet CMakeLists.txt avant d'inclure le module CTest. La valeur est un booléen indiquant s'il faut vérifier le certificat du serveur lors de la soumission à un tableau de bord via les URL https://.",
	"assets/variables.json.CTEST_TLS_VERSION": "Spécifiez le paramètre CTest TLSVersion dans un script client de tableau de bord ctest ou dans le code CMakeLists.txt du projet avant d'inclure le module CTest. La valeur est une version TLS minimale autorisée lors de la soumission à un tableau de bord via des URL https://.",
	"assets/variables.json.CTEST_TRIGGER_SITE": "Option héritée. Non utilisée.",
	"assets/variables.json.CTEST_UPDATE_COMMAND": "Spécifiez le paramètre CTest UpdateCommand dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_UPDATE_OPTIONS": "Spécifiez le paramètre CTest UpdateOptions dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_UPDATE_VERSION_ONLY": "Permet de spécifier le paramètre CTest UpdateVersionOnly dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_UPDATE_VERSION_OVERRIDE": "Permet de spécifier le paramètre CTest UpdateVersionOverride dans un script client de tableau de bord ctest.",
	"assets/variables.json.CTEST_USE_LAUNCHERS": "Spécifiez le paramètre CTest UseLaunchers dans un script client de tableau de bord ctest.",
	"assets/variables.json.CYGWIN": "Valeur True pour Cygwin.",
	"assets/variables.json.ENV": "Opérateur permettant de lire les variables d'environnement.",
	"assets/variables.json.EXECUTABLE_OUTPUT_PATH": "Ancienne variable de l'emplacement de l'exécutable.",
	"assets/variables.json.GHSMULTI": "La valeur est 1 quand vous utilisez le générateur MULTI de Green Hills.",
	"assets/variables.json.IOS": "A la valeur 1 quand le système cible (CMAKE_SYSTEM_NAME) est iOS.",
	"assets/variables.json.LIBRARY_OUTPUT_PATH": "Ancienne variable de l'emplacement des bibliothèques.",
	"assets/variables.json.LINUX": "Défini sur true lorsque le système cible est Linux.",
	"assets/variables.json.MINGW": "Affectez la valeur true quand au moins une langue est activée avec un compilateur ciblant l’ABI GNU sur Windows (MinGW).",
	"assets/variables.json.MSVC": "A la valeur true quand le compilateur correspond à une version de Microsoft Visual C++ ou à un compilateur simulant la syntaxe de ligne de commande cl de Visual C++.",
	"assets/variables.json.MSVC10": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC11": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC12": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC14": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC60": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC70": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC71": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC80": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC90": "Déconseillé. Utilisez la variable MSVC_VERSION à la place.",
	"assets/variables.json.MSVC_IDE": "La valeur est True quand l'IDE de Microsoft Visual C++ est utilisé.",
	"assets/variables.json.MSVC_TOOLSET_VERSION": "Version de l'ensemble d'outils Microsoft Visual C/C++ utilisé, le cas échéant. Si un ensemble d'outils MSVC est utilisé, cette variable a la valeur de la version du compilateur, telle qu'elle est fournie par la variable MSVC_VERSION.",
	"assets/variables.json.MSVC_VERSION": "Version utilisée de Microsoft Visual C/C++, le cas échéant. Si un compilateur simulant Visual C++ est utilisé, cette variable a la valeur de la version d'ensemble d'outils simulée, telle qu'elle est fournie par la définition de préprocesseur _MSC_VER.",
	"assets/variables.json.MSYS": "True en cas d'utilisation du générateur MSYS Makefiles.",
	"assets/variables.json.PackageName_ROOT": "Les appels à find_package(<PackageName>) rechercheront dans les préfixes spécifiés par la variable <PackageName>_ROOT CMake, où <PackageName> est le nom (avec casse préservée) donné à l'appel find_package et _ROOT est littéral. Par exemple, find_package(Foo) recherchera les préfixes spécifiés dans la variable Foo_ROOT CMake (si définie). Voir la politique CMP0074.",
	"assets/variables.json.PROJECT-NAME_BINARY_DIR": "Répertoire binaire de niveau supérieur pour le projet nommé.",
	"assets/variables.json.PROJECT-NAME_DESCRIPTION": "Valeur fournie à l'option DESCRIPTION de l'appel le plus récent à la commande project avec le nom de projet <PROJECT-NAME>, le cas échéant.",
	"assets/variables.json.PROJECT-NAME_HOMEPAGE_URL": "Valeur fournie à l'option HOMEPAGE_URL de l'appel le plus récent à la commande project avec le nom de projet <PROJECT-NAME>, le cas échéant.",
	"assets/variables.json.PROJECT-NAME_IS_TOP_LEVEL": "Variable booléenne indiquant si le projet nommé a été appelé dans un fichier de CMakeLists.txt de niveau supérieur.",
	"assets/variables.json.PROJECT-NAME_SOURCE_DIR": "Répertoire source de niveau supérieur pour le projet nommé.",
	"assets/variables.json.PROJECT-NAME_VERSION": "Valeur fournie à l'option VERSION de l'appel le plus récent à la commande project avec le nom de projet <PROJECT-NAME>, le cas échéant.",
	"assets/variables.json.PROJECT-NAME_VERSION_MAJOR": "Premier composant du numéro de version de la variable <PROJECT-NAME>_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT-NAME_VERSION_MINOR": "Second composant du numéro de version de la variable <PROJECT-NAME>_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT-NAME_VERSION_PATCH": "Troisième composant du numéro de version de la variable <PROJECT-NAME>_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT-NAME_VERSION_TWEAK": "Quatrième composant du numéro de version de la variable <PROJECT-NAME>_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT_BINARY_DIR": "Chemin complet du répertoire de build du projet.",
	"assets/variables.json.PROJECT_DESCRIPTION": "Brève description du projet fournie à la commande project.",
	"assets/variables.json.PROJECT_HOMEPAGE_URL": "URL de la page d'accueil du projet.",
	"assets/variables.json.PROJECT_IS_TOP_LEVEL": "Variable booléenne indiquant si la dernière commande de projet appelée dans l’étendue actuelle ou supérieure se trouvait dans le fichier CMakeLists.txt de niveau supérieur.",
	"assets/variables.json.PROJECT_NAME": "Nom du projet fourni à la commande project.",
	"assets/variables.json.PROJECT_SOURCE_DIR": "Il s'agit du répertoire source du dernier appel à la commande project effectué dans l'étendue du répertoire actif ou celle de l'un de ses parents. Notez que cette variable n'est pas affectée par les appels à la commande project effectués dans l'étendue d'un répertoire enfant (c'est-à-dire un appel à add_subdirectory à partir de l'étendue active).",
	"assets/variables.json.PROJECT_VERSION": "Valeur fournie à l'option VERSION de l'appel le plus récent à la commande project, le cas échéant.",
	"assets/variables.json.PROJECT_VERSION_MAJOR": "Premier composant du numéro de version de la variable PROJECT_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT_VERSION_MINOR": "Second composant du numéro de version de la variable PROJECT_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT_VERSION_PATCH": "Troisième composant du numéro de version de la variable PROJECT_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.PROJECT_VERSION_TWEAK": "Quatrième composant du numéro de version de la variable PROJECT_VERSION, telle qu'elle est définie par la commande project.",
	"assets/variables.json.UNIX": "La valeur est True quand le système cible est UNIX ou de type UNIX (par exemple APPLE et CYGWIN). La variable CMAKE_SYSTEM_NAME doit être interrogée si une compréhension plus spécifique du système cible est nécessaire.",
	"assets/variables.json.WIN32": "Affectez la valeur True quand le système cible est Windows, notamment Win64.",
	"assets/variables.json.WINCE": "A la valeur True quand la variable CMAKE_SYSTEM_NAME a la valeur WindowsCE.",
	"assets/variables.json.WINDOWS_PHONE": "A la valeur True quand la variable CMAKE_SYSTEM_NAME a la valeur WindowsPhone.",
	"assets/variables.json.WINDOWS_STORE": "A la valeur True quand la variable CMAKE_SYSTEM_NAME a la valeur WindowsStore.",
	"assets/variables.json.XCODE": "La valeur est True quand le générateur Xcode est utilisé.",
	"assets/variables.json.XCODE_VERSION": "Version de Xcode (générateur Xcode uniquement).",
	"assets/variables.json.ADVANCED": "La valeur est True si l'entrée doit être masquée par défaut dans les GUI.",
	"assets/variables.json.HELPSTRING": "Aide associée à l'entrée dans les GUI.",
	"assets/variables.json.MODIFIED": "Propriété de gestion interne. Ne pas la définir ou l'obtenir.",
	"assets/variables.json.STRINGS": "Énumérez les valeurs d'entrée STRING possibles pour la sélection de GUI.",
	"assets/variables.json.TYPE": "Type de widget d'entrée dans les GUI.",
	"assets/variables.json.VALUE": "Valeur d'une entrée de cache.",
	"assets/variables.json.ADDITIONAL_CLEAN_FILES": "Liste de fichiers ou de répertoires séparés par des points-virgules, qui vont être supprimés dans le cadre de la cible de nettoyage globale. Permet de spécifier les fichiers ou répertoires générés qui sont utilisés par plusieurs cibles ou par CMake, ou qui sont générés d'une manière qui ne peut pas être capturée sous forme de sorties ou de sous-produits de commandes personnalisées.",
	"assets/variables.json.ADDITIONAL_MAKE_CLEAN_FILES": "Fichiers supplémentaires à supprimer durant la phase de nettoyage.",
	"assets/variables.json.BINARY_DIR": "Cette propriété de répertoire en lecture seule indique le chemin absolu du répertoire binaire correspondant à la source sur laquelle elle est lue.",
	"assets/variables.json.BUILDSYSTEM_TARGETS": "Cette propriété de répertoire en lecture seule contient une liste de cibles de système de build séparées par des points-virgules. Ces cibles sont ajoutées au répertoire par des appels aux commandes add_library, add_executable et add_custom_target. La liste n'inclut aucune cible importée ou cible d'alias, mais elle inclut les bibliothèques d'interface. Chaque entrée de la liste est le nom logique d'une cible, qui peut être passé à l'option TARGET de la commande get_property.",
	"assets/variables.json.CACHE_VARIABLES": "Liste des variables de cache disponibles dans le répertoire actif.",
	"assets/variables.json.CLEAN_NO_CUSTOM": "Affectez la valeur true pour indiquer aux générateurs Makefile de ne pas supprimer les sorties des commandes personnalisées pour ce répertoire durant l'opération de nettoyage. Ceci est ignoré sur les autres générateurs, car il n'est pas possible de l'implémenter.",
	"assets/variables.json.CMAKE_CONFIGURE_DEPENDS": "Indiquez à CMake quels sont les fichiers d'entrée supplémentaires du processus de configuration. Si un fichier nommé est modifié, le système de build réexécute CMake pour reconfigurer le fichier et regénérer le système de build.",
	"assets/variables.json.COMPILE_DEFINITIONS": "Définitions de préprocesseur pour la compilation des sources d'un répertoire.",
	"assets/variables.json.COMPILE_DEFINITIONS_CONFIG": "Ignoré. Consultez la stratégie CMake CMP0043.",
	"assets/variables.json.COMPILE_OPTIONS": "Liste d'options à passer au compilateur.",
	"assets/variables.json.DEFINITIONS": "Pour la compatibilité avec CMake 2.4 uniquement. Utilisez COMPILE_DEFINITIONS à la place.",
	"assets/variables.json.EXCLUDE_FROM_ALL": "Affectez à cette propriété de répertoire une valeur true pour un sous-répertoire afin d'exclure ses cibles de la cible \"all\" de ses ancêtres. Si l'exclusion est activée, l'exécution de make par exemple dans le répertoire parent ne permet pas de générer les cibles dans le sous-répertoire par défaut. Cela n'affecte pas la cible \"all\" du sous-répertoire lui-même. L'exécution de make par exemple dans le sous-répertoire permet tout de même de générer ses cibles.",
	"assets/variables.json.IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": "Permet de spécifier les transformations de ligne #include pour les dépendances dans un répertoire.",
	"assets/variables.json.IMPORTED_TARGETS": "Cette propriété de répertoire en lecture seule contient une liste séparée par des points-virgules des cibles importées ajoutées dans le répertoire par des appels aux commandes add_library et add_executable. Chaque entrée de la liste est le nom logique d’une cible, qui convient pour passer à l’option cible de commande get_property lorsqu’elle est appelée dans le même répertoire.",
	"assets/variables.json.INCLUDE_DIRECTORIES": "Liste des répertoires de recherche de fichiers include de préprocesseur.",
	"assets/variables.json.INCLUDE_REGULAR_EXPRESSION": "Expression régulière d'analyse de fichiers include.",
	"assets/variables.json.INTERPROCEDURAL_OPTIMIZATION": "Cette propriété de répertoire n'existe plus.",
	"assets/variables.json.INTERPROCEDURAL_OPTIMIZATION_CONFIG": "Cette propriété de répertoire n'existe plus.",
	"assets/variables.json.LABELS": "Permet de spécifier une liste d'étiquettes de texte associées à un répertoire et tous ses sous-répertoires. Cela équivaut à définir la propriété cible LABELS et la propriété de test LABELS sur toutes les cibles et tous les tests du répertoire et des sous-répertoires actifs. Remarque : Les lanceurs doivent être activés pour propager les étiquettes vers les cibles.",
	"assets/variables.json.LINK_DIRECTORIES": "Liste des répertoires de recherche de l'éditeur de liens.",
	"assets/variables.json.LINK_OPTIONS": "Liste d'options à utiliser pour l'étape d'édition des liens des cibles de bibliothèque partagée, de module et d'exécutable ainsi que pour l'étape d'édition des liens de l'appareil.",
	"assets/variables.json.LISTFILE_STACK": "Pile actuelle des fichiers de liste traités.",
	"assets/variables.json.MACROS": "Liste des commandes de macro disponibles dans le répertoire actif.",
	"assets/variables.json.PARENT_DIRECTORY": "Répertoire source ayant ajouté le sous-répertoire actuel.",
	"assets/variables.json.RULE_LAUNCH_COMPILE": "Spécifiez un lanceur pour les règles de compilation.",
	"assets/variables.json.RULE_LAUNCH_CUSTOM": "Spécifiez un lanceur pour les règles personnalisées.",
	"assets/variables.json.RULE_LAUNCH_LINK": "Spécifiez un lanceur pour les règles d'édition des liens.",
	"assets/variables.json.SOURCE_DIR": "Cette propriété de répertoire en lecture seule signale le chemin absolu du répertoire source dans lequel elle est lue.",
	"assets/variables.json.SUBDIRECTORIES": "Cette propriété de répertoire en lecture seule contient une liste de sous-répertoires séparés par des points-virgules et traités jusqu'à présent par les commandes add_subdirectory ou subdirs. Chaque entrée représente le chemin absolu du répertoire source (qui contient le fichier CMakeLists.txt). Vous pouvez passer ces informations à l'option DIRECTORY de la commande get_property.",
	"assets/variables.json.SYSTEM": "Cette propriété de répertoire est utilisée pour initialiser la propriété cible SYSTEM pour les cibles non importées créées dans ce répertoire. Il est défini sur true par add_subdirectory et FetchContent_Declare lorsque l'option SYSTEM est donnée comme argument à ces commandes.",
	"assets/variables.json.TESTS": "Liste des tests.",
	"assets/variables.json.TEST_INCLUDE_FILE": "Déprécié. Utilisez TEST_INCLUDE_FILES à la place.",
	"assets/variables.json.TEST_INCLUDE_FILES": "Liste de fichiers cmake à inclure durant l'exécution de ctest.",
	"assets/variables.json.VARIABLES": "Liste des variables définies dans le répertoire actif.",
	"assets/variables.json.VS_GLOBAL_SECTION_POST_section": "Spécifiez une section globale postSolution dans Visual Studio.",
	"assets/variables.json.VS_GLOBAL_SECTION_PRE_section": "Spécifiez une section globale preSolution dans Visual Studio.",
	"assets/variables.json.VS_STARTUP_PROJECT": "Spécifiez le projet de démarrage par défaut dans une solution Visual Studio.",
	"assets/variables.json.ALLOW_DUPLICATE_CUSTOM_TARGETS": "Autorisez la création de cibles personnalisées en double.",
	"assets/variables.json.AUTOGEN_SOURCE_GROUP": "Nom du source_group pour les fichiers générés par AUTOMOC, AUTORCC et AUTOUIC.",
	"assets/variables.json.AUTOGEN_TARGETS_FOLDER": "Nom de DOSSIER des cibles *_autogen ajoutées automatiquement par CMake pour les cibles pour lesquelles AUTOMOC est activé.",
	"assets/variables.json.AUTOMOC_SOURCE_GROUP": "Nom du source_group pour les fichiers générés par AUTOMOC.",
	"assets/variables.json.AUTOMOC_TARGETS_FOLDER": "Nom de DOSSIER des cibles *_autogen ajoutées automatiquement par CMake pour les cibles pour lesquelles AUTOMOC est activé.",
	"assets/variables.json.AUTORCC_SOURCE_GROUP": "Nom du source_group pour les fichiers générés par AUTORCC.",
	"assets/variables.json.AUTOUIC_SOURCE_GROUP": "Nom du source_group pour les fichiers générés par AUTOUIC.",
	"assets/variables.json.CMAKE_CUDA_KNOWN_FEATURES": "Liste des fonctionnalités CUDA connues de cette version de CMake.",
	"assets/variables.json.CMAKE_CXX_KNOWN_FEATURES": "Liste des fonctionnalités C++ connues de cette version de CMake.",
	"assets/variables.json.CMAKE_C_KNOWN_FEATURES": "Liste des fonctionnalités C connues de cette version de CMake.",
	"assets/variables.json.CMAKE_HIP_KNOWN_FEATURES": "Liste des fonctionnalités HIP connues de cette version de CMake.",
	"assets/variables.json.CMAKE_ROLE": "Indique le mode dans lequel se trouve le script en cours d'exécution. Il peut s'agir de l'une des valeurs suivantes :",
	"assets/variables.json.DEBUG_CONFIGURATIONS": "Spécifiez les configurations pour le débogage.",
	"assets/variables.json.DISABLED_FEATURES": "Liste des fonctionnalités désactivées durant l'exécution de CMake.",
	"assets/variables.json.ECLIPSE_EXTRA_CPROJECT_CONTENTS": "Contenus supplémentaires à insérer dans le fichier cproject Eclipse généré.",
	"assets/variables.json.ECLIPSE_EXTRA_NATURES": "Liste de natures à ajouter au fichier projet Eclipse généré.",
	"assets/variables.json.ENABLED_FEATURES": "Liste des fonctionnalités activées durant l'exécution de CMake.",
	"assets/variables.json.ENABLED_LANGUAGES": "Propriété en lecture seule contenant la liste des langages activés",
	"assets/variables.json.FIND_LIBRARY_USE_LIB32_PATHS": "Spécifie si la commande find_library doit effectuer automatiquement les recherches dans les répertoires lib32.",
	"assets/variables.json.FIND_LIBRARY_USE_LIB64_PATHS": "Spécifie si find_library doit effectuer automatiquement les recherches dans les répertoires lib64.",
	"assets/variables.json.FIND_LIBRARY_USE_LIBX32_PATHS": "Spécifie si la commande find_library doit effectuer automatiquement les recherches dans les répertoires libx32.",
	"assets/variables.json.FIND_LIBRARY_USE_OPENBSD_VERSIONING": "Spécifie si find_library doit rechercher des bibliothèques partagées OpenBSD.",
	"assets/variables.json.GENERATOR_IS_MULTI_CONFIG": "Propriété en lecture seule dont la valeur est true sur les générateurs multiconfigurations.",
	"assets/variables.json.GLOBAL_DEPENDS_DEBUG_MODE": "Activez le mode débogage du graphe des dépendances des cibles au niveau global.",
	"assets/variables.json.GLOBAL_DEPENDS_NO_CYCLES": "Interdisez les cycles du graphe des dépendances des cibles au niveau global.",
	"assets/variables.json.INSTALL_PARALLEL": "Active l'option d'installation parallèle pour le générateur Ninja.",
	"assets/variables.json.IN_TRY_COMPILE": "Propriété en lecture seule ayant la valeur true durant une configuration try-compile.",
	"assets/variables.json.JOB_POOLS": "Ninja uniquement : liste des pools disponibles.",
	"assets/variables.json.PACKAGES_FOUND": "Liste des packages trouvés durant l'exécution de CMake.",
	"assets/variables.json.PACKAGES_NOT_FOUND": "Liste des packages introuvables durant l'exécution de CMake.",
	"assets/variables.json.PREDEFINED_TARGETS_FOLDER": "Nom de FOLDER pour les cibles ajoutées automatiquement par CMake.",
	"assets/variables.json.PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE": "Lorsque cette propriété globale est définie sur true, la variable CMAKE_PROJECT_TOP_LEVEL_INCLUDES est propagée dans les appels try_compile qui utilisent la signature du projet entier. Les appels à la signature du fichier source ne sont pas affectés par cette propriété. PROPAGATE_TOP_LEVEL_INCLUDES_TO_TRY_COMPILE n'est pas défini par défaut.",
	"assets/variables.json.REPORT_UNDEFINED_PROPERTIES": "Si cette propriété est définie, toutes les propriétés non définies sont signalées dans ce fichier.",
	"assets/variables.json.RULE_MESSAGES": "Spécifie si un message doit être affiché pour chaque règle make.",
	"assets/variables.json.TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": "Permet de définir si les bibliothèques partagées peuvent être nommées comme des archives.",
	"assets/variables.json.TARGET_MESSAGES": "Spécifiez si l'exécution de chaque cible doit être signalée.",
	"assets/variables.json.TARGET_SUPPORTS_SHARED_LIBS": "Spécifiez si la plateforme cible prend en charge les bibliothèques partagées.",
	"assets/variables.json.USE_FOLDERS": "Contrôle s'il faut utiliser la propriété cible FOLDER pour organiser les cibles en dossiers. La valeur de USE_FOLDERS à la fin du fichier CMakeLists.txt de niveau supérieur est ce qui détermine le comportement.",
	"assets/variables.json.XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": "Contrôlez l'émission d'EFFECTIVE_PLATFORM_NAME par le générateur Xcode.",
	"assets/variables.json.CPACK_DESKTOP_SHORTCUTS": "Spécifie une liste de noms de raccourcis à créer sur le Bureau pour ce fichier.",
	"assets/variables.json.CPACK_NEVER_OVERWRITE": "Indiquez que ce fichier ne doit pas être remplacé durant l'installation ou la réinstallation.",
	"assets/variables.json.CPACK_PERMANENT": "Indiquez que ce fichier ne doit pas être supprimé durant la désinstallation.",
	"assets/variables.json.CPACK_STARTUP_SHORTCUTS": "Spécifie une liste de noms de raccourcis à créer dans le dossier Démarrage pour ce fichier.",
	"assets/variables.json.CPACK_START_MENU_SHORTCUTS": "Spécifie une liste de noms de raccourcis à créer dans le menu Démarrer pour ce fichier.",
	"assets/variables.json.CPACK_WIX_ACL": "Spécifie les autorisations d'accès aux fichiers ou aux répertoires installés par un programme d'installation WiX.",
	"assets/variables.json.ABSTRACT": "Est-ce que ce fichier source est une classe abstraite.",
	"assets/variables.json.AUTORCC_OPTIONS": "Options supplémentaires pour rcc quand AUTORCC est utilisé",
	"assets/variables.json.AUTOUIC_OPTIONS": "Options supplémentaires pour uic quand AUTOUIC est utilisé",
	"assets/variables.json.COMPILE_FLAGS": "Indicateurs supplémentaires à ajouter au moment de la compilation de ce fichier source.",
	"assets/variables.json.CXX_SCAN_FOR_MODULES": "CXX_SCAN_FOR_MODULES est un booléen spécifiant si CMake analysera la source pour les dépendances de module C++. Voir également CXX_SCAN_FOR_MODULES pour les paramètres à l'échelle de la cible.",
	"assets/variables.json.EXTERNAL_OBJECT": "Si la valeur est true, il s'agit d'un fichier objet.",
	"assets/variables.json.Fortran_FORMAT": "A la valeur FIXED ou FREE pour indiquer la disposition des fichiers sources Fortran.",
	"assets/variables.json.Fortran_PREPROCESS": "Permet de contrôler si le fichier source Fortran doit être prétraité de manière inconditionnelle.",
	"assets/variables.json.GENERATED": "Spécifie si ce fichier source est généré dans le cadre du processus de build ou CMake.",
	"assets/variables.json.HEADER_FILE_ONLY": "Spécifie si ce fichier source est uniquement un fichier d'en-tête.",
	"assets/variables.json.KEEP_EXTENSION": "Faites en sorte que le fichier de sortie ait la même extension que le fichier source.",
	"assets/variables.json.LANGUAGE": "Permet de spécifier le langage de programmation dans lequel un fichier source est écrit.",
	"assets/variables.json.LOCATION": "Chemin complet d'un fichier source.",
	"assets/variables.json.MACOSX_PACKAGE_LOCATION": "Placez un fichier source dans un bundle d'applications (MACOSX_BUNDLE), un bundle Core Foundation (BUNDLE) ou un bundle Framework (FRAMEWORK). Ceci est applicable à macOS et iOS.",
	"assets/variables.json.OBJECT_DEPENDS": "Fichiers supplémentaires dont dépend un fichier objet compilé.",
	"assets/variables.json.OBJECT_OUTPUTS": "Sorties supplémentaires pour une règle de générateurs Ninja ou Makefile.",
	"assets/variables.json.SKIP_AUTOGEN": "Excluez le fichier source des traitements AUTOMOC, AUTOUIC et AUTORCC (pour les projets Qt).",
	"assets/variables.json.SKIP_AUTOMOC": "Excluez le fichier source du traitement AUTOMOC (pour les projets Qt).",
	"assets/variables.json.SKIP_AUTORCC": "Excluez le fichier source du traitement AUTORCC (pour les projets Qt).",
	"assets/variables.json.SKIP_AUTOUIC": "Excluez le fichier source du traitement AUTOUIC (pour les projets Qt).",
	"assets/variables.json.SKIP_LINTING": "Cette propriété vous permet d’exclure un fichier source spécifique du processus de linting. Le processus de linting implique l’exécution d’outils tels que <LANG>_CPPLINT, <LANG>_CLANG_TIDY, <LANG>_CPPCHECK et <LANG>_INCLUDE_WHAT_YOU_USE sur les fichiers sources, ainsi que la compilation des fichiers d’en-tête dans le cadre de VERIFY_INTERFACE_HEADER_SETS. En définissant SKIP_LINTING sur un fichier source, les outils de linting mentionnés ne sont pas exécutés pour ce fichier particulier.",
	"assets/variables.json.SKIP_PRECOMPILE_HEADERS": "Indique si le fichier source est ignoré par la fonctionnalité de PRECOMPILE_HEADERS.",
	"assets/variables.json.SKIP_UNITY_BUILD_INCLUSION": "L'affectation de la valeur true à cette propriété garantit que le fichier source est ignoré par les builds unity quand la propriété UNITY_BUILD de sa cible associée a la valeur true. Le fichier source est compilé de manière autonome, tout comme cela se produit quand les builds unity sont désactivées.",
	"assets/variables.json.Swift_DEPENDENCIES_FILE": "Cette propriété définit le chemin du fichier de dépendance Swift (swiftdeps) de la source. En l'absence de spécification, la valeur par défaut est <OBJECT>.swiftdeps.",
	"assets/variables.json.Swift_DIAGNOSTICS_FILE": "Cette propriété contrôle l'emplacement de sérialisation des diagnostics Swift.",
	"assets/variables.json.SYMBOLIC": "Spécifie si ceci est juste le nom d'une règle.",
	"assets/variables.json.UNITY_GROUP": "Cette propriété contrôle le compartiment dont la source doit faire partie quand UNITY_BUILD_MODE a la valeur GROUP.",
	"assets/variables.json.VS_COPY_TO_OUT_DIR": "Définit la balise <CopyToOutputDirectory> d'un fichier source dans un fichier projet Visual Studio. Les valeurs valides sont Never, Always et PreserveNewest.",
	"assets/variables.json.VS_CSHARP_tagname": "Configuration spécifique aux fichiers sources CSharp et à Visual Studio.",
	"assets/variables.json.VS_DEPLOYMENT_CONTENT": "Permet de marquer un fichier source en tant que contenu à déployer pour une application Windows Phone ou une application du Windows Store, quand la génération est effectuée via des générateurs Visual Studio <cmake-generators(7)>. La valeur doit être 1 ou 0, et peut utiliser les expressions de générateur <cmake-generator-expressions(7)> pour effectuer le choix en fonction de la configuration de build. L'entrée de fichier .vcxproj du fichier source est marquée avec DeploymentContent ou ExcludedFromBuild pour les valeurs 1 et 0, respectivement.",
	"assets/variables.json.VS_DEPLOYMENT_LOCATION": "Spécifie l'emplacement de déploiement d'un fichier source de contenu pour une application Windows Phone ou une application du Windows Store, quand la génération est effectuée via des générateurs Visual Studio <cmake-generators(7)>. Cette propriété est applicable uniquement quand VS_DEPLOYMENT_CONTENT est utilisé. La valeur représente le chemin relatif du package de l'application et s'applique à toutes les configurations.",
	"assets/variables.json.VS_INCLUDE_IN_VSIX": "Propriété booléenne permettant de spécifier si le fichier doit être inclus dans un package d'extensions VSIX (Visual Studio Integration Extension). Ceci est nécessaire pour le développement d'extensions Visual Studio.",
	"assets/variables.json.VS_RESOURCE_GENERATOR": "Cette propriété permet de spécifier le générateur de ressources à utiliser sur ce fichier. Si elle n'est pas définie, sa valeur par défaut est PublicResXFileCodeGenerator.",
	"assets/variables.json.VS_SETTINGS": "Définissez les métadonnées d’un élément sur un fichier.",
	"assets/variables.json.VS_SHADER_DISABLE_OPTIMIZATIONS": "Désactivez les optimisations du compilateur pour un fichier source .hlsl. Cela entraîne l'ajout de l'indicateur -Od à la ligne de commande de l'outil FxCompiler. Affectez la valeur true à cette propriété pour désactiver les optimisations du compilateur.",
	"assets/variables.json.VS_SHADER_ENABLE_DEBUG": "Activez les informations de débogage pour un fichier source .hlsl. Cela entraîne l'ajout de l'indicateur -Zi à la ligne de commande de l'outil FxCompiler. Affectez la valeur true afin de générer des informations de débogage pour le nuanceur compilé.",
	"assets/variables.json.VS_SHADER_ENTRYPOINT": "Spécifie le nom du point d'entrée pour le nuanceur d'un fichier source .hlsl.",
	"assets/variables.json.VS_SHADER_FLAGS": "Permet de définir les indicateurs de nuanceur Visual Studio supplémentaires d'un fichier source .hlsl.",
	"assets/variables.json.VS_SHADER_MODEL": "Spécifie le modèle de nuanceur d'un fichier source .hlsl. Certains types de nuanceur sont utilisables uniquement avec des modèles de nuanceur récents",
	"assets/variables.json.VS_SHADER_OBJECT_FILE_NAME": "Spécifie un nom de fichier pour le fichier objet de nuanceur compilé d'un fichier source .hlsl. Cela entraîne l'ajout de l'indicateur -Fo à la ligne de commande de l'outil FxCompiler.",
	"assets/variables.json.VS_SHADER_OUTPUT_HEADER_FILE": "Définissez le nom du fichier d'en-tête de sortie contenant le code objet d'un fichier source .hlsl.",
	"assets/variables.json.VS_SHADER_TYPE": "Permet de définir le type de nuanceur Visual Studio d'un fichier source .hlsl.",
	"assets/variables.json.VS_SHADER_VARIABLE_NAME": "Définissez le nom de la variable dans le fichier d'en-tête contenant le code objet d'un fichier source .hlsl.",
	"assets/variables.json.VS_TOOL_OVERRIDE": "Remplacez l'outil Visual Studio par défaut à appliquer au fichier source par un nouvel outil non basé sur l'extension du fichier.",
	"assets/variables.json.VS_XAML_TYPE": "Marquez un fichier source XAML (Extensible Application Markup Language) avec un autre type que celui de la page par défaut. L'utilisation la plus courante consiste à définir le fichier App.xaml par défaut en tant qu'ApplicationDefinition.",
	"assets/variables.json.WRAP_EXCLUDE": "Excluez ce fichier source de toute technique d'enveloppement de code.",
	"assets/variables.json.XCODE_EXPLICIT_FILE_TYPE": "Définissez l'attribut Xcode explicitFileType dans sa référence à un fichier source. CMake calcule une valeur par défaut en fonction de l'extension de fichier mais peut recevoir des informations explicites sur cette propriété.",
	"assets/variables.json.XCODE_FILE_ATTRIBUTES": "Ajoutez des valeurs au paramètre Xcode ATTRIBUTES dans sa référence à un fichier source. Entre autres choses, cela permet de définir le rôle d'un fichier .mig :",
	"assets/variables.json.XCODE_LAST_KNOWN_FILE_TYPE": "Définissez l'attribut Xcode lastKnownFileType dans sa référence à un fichier source. CMake calcule une valeur par défaut en fonction de l'extension de fichier mais peut recevoir des informations explicites sur cette propriété.",
	"assets/variables.json.ATTACHED_FILES": "Joignez une liste de fichiers à une soumission de tableau de bord.",
	"assets/variables.json.ATTACHED_FILES_ON_FAIL": "Joignez une liste de fichiers à une soumission de tableau de bord en cas d'échec du test.",
	"assets/variables.json.COST": "Cette propriété décrit le coût d'un test. Quand les tests parallèles sont activés, les tests du jeu de tests sont exécutés par ordre de coût décroissant. Les projets peuvent définir explicitement le coût d'un test via l'affectation d'une valeur à virgule flottante à cette propriété.",
	"assets/variables.json.DEPENDS": "Spécifie que ce test doit être exécuté uniquement après la liste de tests spécifiée.",
	"assets/variables.json.DISABLED": "Si la valeur est True, le test est ignoré et son état est 'Non exécuté'. Un test DISABLED n'est pas compté dans le nombre total de tests, et son état d'exécution est signalé à CDash comme étant désactivé.",
	"assets/variables.json.ENVIRONMENT": "Spécifiez les variables d'environnement à définir pour l'exécution d'un test.",
	"assets/variables.json.ENVIRONMENT_MODIFICATION": "Spécifiez les variables d’environnement à modifier pour l’exécution d’un test. Notez que les opérations effectuées par cette propriété sont effectuées une fois la propriété ENVIRONMENT déjà appliquée.",
	"assets/variables.json.FAIL_REGULAR_EXPRESSION": "Si la sortie du test (stdout ou stderr) correspond à cette expression régulière, le test échoue, quel que soit le code de sortie du processus. Les tests qui dépassent le délai d’expiration spécifié par TIMEOUT échouent, quelle que soit la FAIL_REGULAR_EXPRESSION. Tout code de retour non nul ou les échecs de test au niveau du système, notamment les erreurs de segmentation, les abandons de signal ou les erreurs de segment de mémoire, échouent au test même si l’expression régulière ne correspond pas.",
	"assets/variables.json.FIXTURES_CLEANUP": "Spécifie une liste de fixtures pour lesquelles le test doit être traité en tant que test de nettoyage. Ces noms de fixtures sont distincts des noms de cas de test. Ils ne doivent pas nécessairement présenter de ressemblances avec les noms de tests associés.",
	"assets/variables.json.FIXTURES_REQUIRED": "Spécifie une liste de fixtures nécessaires au test. Les noms de fixtures respectent la casse et n'ont pas besoin de ressembler aux noms de tests.",
	"assets/variables.json.FIXTURES_SETUP": "Spécifie une liste de fixtures pour lesquelles le test doit être traité en tant que test de configuration. Ces noms de fixtures sont distincts des noms de cas de test. Ils ne doivent pas nécessairement présenter de ressemblances avec les noms de tests associés.",
	"assets/variables.json.GENERATED_RESOURCE_SPEC_FILE": "Chemin du fichier de spécifications de ressource généré dynamiquement <ctest-resource-dynamically-generated-spec-file> généré par ce test.",
	"assets/variables.json.MEASUREMENT": "Spécifiez une mesure et une valeur CDASH à rapporter pour un test.",
	"assets/variables.json.PASS_REGULAR_EXPRESSION": "La sortie de test (stdout ou stderr) doit correspondre à cette expression régulière pour que le test réussisse. Le code de sortie du processus est ignoré. Les tests qui dépassent le délai d’expiration spécifié par TIMEOUT échouent encore, quelle que soit la PASS_REGULAR_EXPRESSION. Les échecs de test au niveau du système, notamment les erreurs de segmentation, les abandons de signal ou les erreurs de segment de mémoire, peuvent entraîner l’échec du test même si PASS_REGULAR_EXPRESSION est mis en correspondance.",
	"assets/variables.json.PROCESSORS": "Permet de spécifier le nombre d'emplacements de processus nécessaires pour ce test. Si rien n'est défini, la valeur par défaut est de 1 processeur.",
	"assets/variables.json.PROCESSOR_AFFINITY": "Affectez la valeur true afin de demander à CTest de lancer le processus de test avec affinité de CPU pour un ensemble fixe de processeurs. S'il est activé et pris en charge pour la plateforme actuelle, CTest choisit un ensemble de processeurs à placer dans le masque d'affinité de CPU durant le lancement du processus de test. Le nombre de processeurs de cet ensemble est déterminé par la propriété de test PROCESSORS ou par le nombre de processeurs disponibles pour CTest, en fonction de la valeur la plus faible. L'ensemble des processeurs choisis est séparé des processeurs affectés aux autres tests en cours d'exécution et pour lesquels la propriété PROCESSOR_AFFINITY est activée.",
	"assets/variables.json.REQUIRED_FILES": "Liste des fichiers nécessaires pour exécuter le test. Les noms de fichiers sont relatifs au WORKING_DIRECTORY de test, sauf si un chemin absolu est spécifié.",
	"assets/variables.json.RESOURCE_GROUPS": "Permet de spécifier les ressources nécessaires à un test, en les regroupant de manière significative. Consultez les détails relatifs à l'allocation des ressources (<ctest-resource-allocation>) pour plus d'informations sur la façon dont cette propriété s'intègre à la fonctionnalité d'allocation des ressources CTest.",
	"assets/variables.json.RESOURCE_LOCK": "Spécifiez la liste des ressources verrouillées par ce test.",
	"assets/variables.json.RUN_SERIAL": "N'exécutez pas ce test en parallèle avec d'autres tests.",
	"assets/variables.json.SKIP_REGULAR_EXPRESSION": "Si la sortie du test (stderr ou stdout) correspond à cette expression régulière, le test sera considéré comme ignoré, quel que soit le code de sortie du processus. Les tests qui dépassent le délai d’expiration spécifié par TIMEOUT échouent encore, quelle que soit la SKIP_REGULAR_EXPRESSION. Les échecs des tests au niveau du système, y compris les erreurs de segmentation, les abandons de signaux ou les erreurs de tas, peuvent faire échouer le test même si l’expression rationnelle correspond.",
	"assets/variables.json.SKIP_RETURN_CODE": "Code de retour pour marquer un test comme étant ignoré.",
	"assets/variables.json.TIMEOUT": "Nombre de secondes allouées à ce test.",
	"assets/variables.json.TIMEOUT_AFTER_MATCH": "Changez le délai d'expiration d'un test après avoir trouvé la ligne correspondante dans sa sortie.",
	"assets/variables.json.TIMEOUT_SIGNAL_GRACE_PERIOD": "Si la propriété de test TIMEOUT_SIGNAL_NAME est définie, cette propriété spécifie le nombre de secondes à attendre pour qu’un processus de test se termine après l’envoi du signal personnalisé. Sinon, cette propriété n’a aucune signification.",
	"assets/variables.json.TIMEOUT_SIGNAL_NAME": "Spécifiez un signal personnalisé à envoyer à un processus de test lorsque son délai d’expiration est atteint. Disponible uniquement sur les plateformes qui prennent en charge les signaux POSIX. Il n’est pas disponible sur Windows.",
	"assets/variables.json.WILL_FAIL": "Si la valeur est true, inverse les critères de test de réussite/échec. Les tests pour lesquels WILL_FAIL a la valeur true échouent avec le code de retour 0 et réussissent avec un code de retour différent de zéro. Les tests qui dépassent le délai spécifié par TIMEOUT échouent toujours, indépendamment de WILL_FAIL. Les échecs des tests au niveau du système, y compris les erreurs de segmentation, les abandons de signaux ou les erreurs de tas, peuvent faire échouer le test même si WILL_FAIL est vrai.",
	"assets/variables.json.WORKING_DIRECTORY": "Répertoire à partir duquel l'exécutable de test est appelé.",
	"assets/variables.json.AIX_EXPORT_ALL_SYMBOLS": "Sur AIX, CMake exporte automatiquement tous les symboles des bibliothèques partagées et des exécutables quand la propriété cible ENABLE_EXPORTS est définie. Désactivez explicitement cette propriété booléenne pour supprimer le comportement et n'exporter aucun symbole par défaut. Dans ce cas, le projet doit utiliser d'autres moyens pour exporter certains symboles.",
	"assets/variables.json.ALIASED_TARGET": "Nom de la cible dont l'alias est défini par cette cible.",
	"assets/variables.json.ALIAS_GLOBAL": "Propriété en lecture seule indiquant si une cible ALIAS est visible de manière globale.",
	"assets/variables.json.ANDROID_ANT_ADDITIONAL_OPTIONS": "Définissez les options supplémentaires pour le système de build Android Ant. Il s'agit d'une valeur de chaîne contenant toutes les options de ligne de commande pour la build Ant. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_API": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, cette propriété définit la version d'API cible Android (15, par exemple). Le numéro de version doit être un entier décimal positif. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_API si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_API_MIN": "Définissez la version d'API MIN Android (9, par exemple). Le numéro de version doit être un entier décimal positif. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_API_MIN si elle est définie au moment de la création d'une cible. Le code natif est généré à l'aide de cette version d'API.",
	"assets/variables.json.ANDROID_ARCH": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, cette propriété définit l'architecture cible Android.",
	"assets/variables.json.ANDROID_ASSETS_DIRECTORIES": "Définissez les répertoires de composants Android à copier dans le dossier de composants principal avant la génération. Il s'agit d'une propriété de type chaîne qui contient les chemins de répertoires séparés par un point-virgule. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_ASSETS_DIRECTORIES si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_GUI": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, cette propriété spécifie si un fichier exécutable doit être généré en tant que paquet d'application sur Android.",
	"assets/variables.json.ANDROID_JAR_DEPENDENCIES": "Définissez la propriété Android qui spécifie les dépendances JAR. Il s'agit d'une propriété dont la valeur est de type chaîne. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_JAR_DEPENDENCIES si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_JAR_DIRECTORIES": "Définissez la propriété Android qui spécifie les répertoires dans lesquels rechercher les bibliothèques JAR.",
	"assets/variables.json.ANDROID_JAVA_SOURCE_DIR": "Définissez la propriété Android qui spécifie les répertoires racines du code source Java. Il s'agit d'une propriété de type chaîne qui contient les chemins de répertoires séparés par un point-virgule. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_JAVA_SOURCE_DIR si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_NATIVE_LIB_DEPENDENCIES": "Définissez la propriété Android qui spécifie les dépendances .so. Il s'agit d'une propriété de type chaîne.",
	"assets/variables.json.ANDROID_NATIVE_LIB_DIRECTORIES": "Définissez la propriété Android qui spécifie les répertoires dans lesquels rechercher les bibliothèques .so.",
	"assets/variables.json.ANDROID_PROCESS_MAX": "Définissez la propriété Android qui spécifie le nombre maximal de processus de compilateur Android NDK parallèles (4, par exemple). Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_PROCESS_MAX si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_PROGUARD": "Quand cette propriété a la valeur true, cela permet à l'outil ProGuard de réduire, d'optimiser et d'obfusquer le code en supprimant le code inutilisé et en renommant les classes, les champs ainsi que les méthodes portant des noms sémantiquement obscurs. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_PROGUARD si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_PROGUARD_CONFIG_PATH": "Définissez la propriété Android qui spécifie l'emplacement du fichier config ProGuard. Pour utiliser la valeur par défaut, n'indiquez rien. Il s'agit d'une propriété de type chaîne qui contient le chemin du fichier config ProGuard. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_PROGUARD_CONFIG_PATH si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_SECURE_PROPS_PATH": "Définissez la propriété Android qui indique l'emplacement du fichier de propriétés sécurisé. Il s'agit d'une propriété de type chaîne qui contient le chemin du fichier. Cette propriété est initialisée par la valeur de la variable CMAKE_ANDROID_SECURE_PROPS_PATH si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_SKIP_ANT_STEP": "Définissez la propriété Android qui spécifie si l'étape de build Ant doit être ignorée ou non. Il s'agit d'une propriété booléenne initialisée par la valeur de la variable CMAKE_ANDROID_SKIP_ANT_STEP si elle est définie au moment de la création d'une cible.",
	"assets/variables.json.ANDROID_STL_TYPE": "Quand vous effectuez une compilation croisée pour Android avec NVIDIA Nsight Tegra Visual Studio Edition, cette propriété spécifie le type de prise en charge STL du projet. Il s'agit d'une propriété de type chaîne qui peut avoir l'une des valeurs suivantes :",
	"assets/variables.json.ARCHIVE_OUTPUT_DIRECTORY": "Répertoire de sortie dans lequel générer les fichiers cibles XXX.",
	"assets/variables.json.ARCHIVE_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration pour les fichiers cibles ARCHIVE.",
	"assets/variables.json.ARCHIVE_OUTPUT_NAME": "Nom de sortie des fichiers cibles XXX.",
	"assets/variables.json.ARCHIVE_OUTPUT_NAME_CONFIG": "Nom de sortie par configuration pour les fichiers cibles ARCHIVE.",
	"assets/variables.json.AUTOGEN_BETTER_GRAPH_MULTI_CONFIG": "AUTOGEN_BETTER_GRAPH_MULTI_CONFIG est une propriété booléenne qui peut être définie sur une cible pour avoir un meilleur graphe de dépendance pour les générateurs multi-configuration. Lorsque cette propriété est activée, CMake génère plus de cibles par configuration. Par conséquent, le graphique des dépendances sera plus précis pour les générateurs multi-configurations et certaines recompilations seront évités.",
	"assets/variables.json.AUTOGEN_BUILD_DIR": "Répertoire dans lequel AUTOMOC, AUTOUIC et AUTORCC génèrent des fichiers pour la cible.",
	"assets/variables.json.AUTOGEN_COMMAND_LINE_LENGTH_MAX": "Limite de longueur de ligne de commande pour les cibles autogen, c’est-à-dire moc ou uic, qui déclenche l’utilisation de fichiers réponse sur Windows au lieu de passer tous les arguments à la ligne de commande.",
	"assets/variables.json.AUTOGEN_ORIGIN_DEPENDS": "Commutateur permettant de transmettre les dépendances de la cible d’origine à la cible <ORIGIN>_autogène correspondante.",
	"assets/variables.json.AUTOGEN_PARALLEL": "Nombre de processus moc ou uic parallèles à démarrer avec AUTOMOC et AUTOUIC.",
	"assets/variables.json.AUTOGEN_TARGET_DEPENDS": "Dépendances supplémentaires de la cible <ORIGIN>_autogen correspondante.",
	"assets/variables.json.AUTOGEN_USE_SYSTEM_INCLUDE": "AUTOGEN_USE_SYSTEM_INCLUDE est une propriété booléenne qui peut être définie sur une cible pour indiquer que le répertoire Include cible autogen doit être ajouté en tant que répertoire include système ou répertoire Include normal à la cible.",
	"assets/variables.json.AUTOMOC": "Indique si la cible doit être traitée avec auto-moc (pour les projets Qt).",
	"assets/variables.json.AUTOMOC_COMPILER_PREDEFINES": "Valeur booléenne utilisée par AUTOMOC pour déterminer si le fichier de prédéfinitions du compilateur, moc_predefs.h, doit être généré.",
	"assets/variables.json.AUTOMOC_DEPEND_FILTERS": "Filtrez les définitions utilisées par AUTOMOC pour extraire les noms de fichiers d'un fichier source, et qui sont inscrites en tant que dépendances supplémentaires pour le fichier moc du fichier source.",
	"assets/variables.json.AUTOMOC_EXECUTABLE": "AUTOMOC_EXECUTABLE est un chemin de fichier qui pointe vers l'exécutable moc à utiliser pour les fichiers AUTOMOC. La définition de cette propriété oblige CMake à ignorer la détection automatique du fichier binaire moc ainsi que les tests d'intégrité normalement exécutés pour vérifier que le fichier binaire est disponible et qu'il fonctionne comme prévu.",
	"assets/variables.json.AUTOMOC_MACRO_NAMES": "Liste de noms de macros séparés par des points-virgules et utilisés par AUTOMOC pour déterminer si un fichier C++ doit être traité par moc.",
	"assets/variables.json.AUTOMOC_MOC_OPTIONS": "Options supplémentaires pour moc quand AUTOMOC est utilisé",
	"assets/variables.json.AUTOMOC_PATH_PREFIX": "Quand cette propriété a la valeur ON, CMake génère l'option de préfixe de chemin -p pour moc sur les cibles Qt AUTOMOC.",
	"assets/variables.json.AUTORCC": "Indique si la cible doit être traitée avec auto-rcc (pour les projets Qt).",
	"assets/variables.json.AUTORCC_EXECUTABLE": "AUTORCC_EXECUTABLE est un chemin de fichier qui pointe vers l'exécutable rcc à utiliser pour les fichiers AUTORCC. La définition de cette propriété oblige CMake à ignorer la détection automatique du fichier binaire rcc ainsi que les tests d'intégrité normalement exécutés pour vérifier que le fichier binaire est disponible et qu'il fonctionne comme prévu.",
	"assets/variables.json.AUTOUIC": "Indique si la cible doit être traitée avec auto-uic (pour les projets Qt).",
	"assets/variables.json.AUTOUIC_EXECUTABLE": "AUTOUIC_EXECUTABLE est un chemin de fichier qui pointe vers l'exécutable uic à utiliser pour les fichiers AUTOUIC. La définition de cette propriété oblige CMake à ignorer la détection automatique du fichier binaire uic ainsi que les tests d'intégrité normalement exécutés pour vérifier que le fichier binaire est disponible et qu'il fonctionne comme prévu.",
	"assets/variables.json.AUTOUIC_SEARCH_PATHS": "Liste de chemins de recherche utilisée par AUTOUIC pour trouver les fichiers .ui inclus.",
	"assets/variables.json.BUILD_RPATH": "Une liste séparée par des points-virgules spécifiant les entrées de chemin d'exécution (RPATH) à ajouter aux fichiers binaires liés dans l'arborescence de construction (pour les plates-formes qui le prennent en charge). Par défaut, CMake définit le chemin d'exécution des fichiers binaires dans l'arborescence de construction pour contenir les chemins de recherche dont il sait qu'ils sont nécessaires pour trouver les bibliothèques partagées qu'ils lient. Les projets peuvent définir BUILD_RPATH pour spécifier des chemins de recherche supplémentaires.",
	"assets/variables.json.BUILD_RPATH_USE_ORIGIN": "Indique s'il est nécessaire d'utiliser des chemins relatifs pour le RPATH de la build.",
	"assets/variables.json.BUILD_WITH_INSTALL_NAME_DIR": "BUILD_WITH_INSTALL_NAME est une valeur booléenne qui spécifie si l'install_name macOS d'une cible dans l'arborescence de build utilise le répertoire indiqué par INSTALL_NAME_DIR. Ce paramètre s'applique uniquement aux cibles sur macOS.",
	"assets/variables.json.BUILD_WITH_INSTALL_RPATH": "BUILD_WITH_INSTALL_RPATH est une valeur booléenne qui spécifie si la cible située dans l'arborescence de build doit être liée à INSTALL_RPATH. Cette valeur est prioritaire sur SKIP_BUILD_RPATH et évite la nécessité de réexécuter une édition des liens avant l'installation.",
	"assets/variables.json.BUNDLE": "Cette cible est un CFBundle sur macOS.",
	"assets/variables.json.BUNDLE_EXTENSION": "Extension de fichier utilisée pour nommer une cible BUNDLE, FRAMEWORK ou MACOSX_BUNDLE sur macOS et iOS.",
	"assets/variables.json.COMMON_LANGUAGE_RUNTIME": "Si vous définissez cette propriété cible, la cible est configurée pour être générée avec une prise en charge de C++/CLI.",
	"assets/variables.json.COMPATIBLE_INTERFACE_BOOL": "Propriétés qui doivent être compatibles avec leur interface de liaison",
	"assets/variables.json.COMPATIBLE_INTERFACE_NUMBER_MAX": "Propriétés dont la valeur maximale de l'interface de lien est utilisée.",
	"assets/variables.json.COMPATIBLE_INTERFACE_NUMBER_MIN": "Propriétés dont la valeur minimale de l'interface de liaison sera utilisée.",
	"assets/variables.json.COMPATIBLE_INTERFACE_STRING": "Propriétés qui doivent être compatibles au niveau des chaînes avec leur interface de liaison",
	"assets/variables.json.COMPILE_FEATURES": "Fonctionnalités de compilateur activées pour cette cible.",
	"assets/variables.json.COMPILE_PDB_NAME": "Nom de sortie du fichier .pdb de symboles de débogage Microsoft généré par le compilateur durant la génération des fichiers sources.",
	"assets/variables.json.COMPILE_PDB_NAME_CONFIG": "Nom de sortie par configuration du fichier .pdb de symboles de débogage Microsoft généré par le compilateur durant la génération des fichiers sources.",
	"assets/variables.json.COMPILE_PDB_OUTPUT_DIRECTORY": "Répertoire de sortie du fichier .pdb de symboles de débogage Microsoft généré par le compilateur durant la génération des fichiers sources.",
	"assets/variables.json.COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration du fichier .pdb de symboles de débogage Microsoft généré par le compilateur durant la génération des fichiers sources.",
	"assets/variables.json.COMPILE_WARNING_AS_ERROR": "Spécifiez s'il faut traiter les avertissements lors de la compilation comme des erreurs. Si activé, ajoute un indicateur pour traiter les avertissements lors de la compilation comme des erreurs. Si l'option cmake --compile-no-warning-as-error est donnée sur la ligne de commande cmake, cette propriété est ignorée.",
	"assets/variables.json.CONFIG_OUTPUT_NAME": "Ancien nom de base du fichier cible par configuration. Utilisez OUTPUT_NAME_ à la place.",
	"assets/variables.json.CONFIG_POSTFIX": "Suffixe à ajouter au nom du fichier cible pour la configuration <CONFIG>.",
	"assets/variables.json.CROSSCOMPILING_EMULATOR": "Utilisez l'émulateur donné pour exécuter les exécutables créés durant la compilation croisée. Cette commande va être ajoutée en tant que préfixe aux commandes add_test, add_custom_command et add_custom_target pour les exécutables de système cible générés.",
	"assets/variables.json.CUDA_ARCHITECTURES": "Liste des architectures pour lesquelles du code d'appareil doit être généré.",
	"assets/variables.json.CUDA_CUBIN_COMPILATION": "Compilez les sources CUDA dans des fichiers .cubin au lieu de fichiers .obj dans les bibliothèques d’objets.",
	"assets/variables.json.CUDA_EXTENSIONS": "Valeur booléenne spécifiant si des extensions spécifiques au compilateur sont demandées.",
	"assets/variables.json.CUDA_FATBIN_COMPILATION": "Compilez les sources CUDA dans des fichiers .fatbin au lieu de fichiers .obj dans les bibliothèques d’objets.",
	"assets/variables.json.CUDA_OPTIX_COMPILATION": "Compiler les sources CUDA dans des fichiers .optixir au lieu de fichiers .obj dans les bibliothèques d’objets.",
	"assets/variables.json.CUDA_PTX_COMPILATION": "Compilez les sources CUDA en fichiers .ptx au lieu de fichiers .obj dans les bibliothèques d'objets.",
	"assets/variables.json.CUDA_RESOLVE_DEVICE_SYMBOLS": "CUDA uniquement : active la liaison d'appareil pour la bibliothèque cible spécifique, le cas échéant.",
	"assets/variables.json.CUDA_RUNTIME_LIBRARY": "Permet de sélectionner la bibliothèque runtime CUDA à utiliser par les compilateurs ciblant le langage CUDA.",
	"assets/variables.json.CUDA_SEPARABLE_COMPILATION": "CUDA uniquement : active la compilation distincte du code d'un appareil",
	"assets/variables.json.CUDA_STANDARD": "Norme CUDA/C++ dont les fonctionnalités sont demandées pour la génération de cette cible.",
	"assets/variables.json.CUDA_STANDARD_REQUIRED": "Valeur booléenne indiquant si la valeur de CUDA_STANDARD est obligatoire.",
	"assets/variables.json.CXX_EXTENSIONS": "Valeur booléenne spécifiant si des extensions spécifiques au compilateur sont demandées.",
	"assets/variables.json.CXX_MODULE_DIRS": "Liste séparée par des points-virgules des répertoires de base de l'ensemble de modules C++ par défaut de la cible (c'est-à-dire l'ensemble de fichiers avec le nom et le type CXX_MODULES). La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_DIRS_NAME": "Liste séparée par des points-virgules des répertoires de base de l'ensemble de modules C++ <NAME> de la cible, qui a le type d'ensemble CXX_MODULES. La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_SET": "Liste de fichiers séparés par des points-virgules dans l'ensemble de modules C++ par défaut de la cible (c'est-à-dire l'ensemble de fichiers avec le nom et le type CXX_MODULES). Si l'un des chemins est relatif, il est calculé par rapport au répertoire source de la cible. La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_SETS": "Liste en lecture seule des ensembles de modules PRIVATE et PUBLIC C++ de la cible (c'est-à-dire tous les ensembles de fichiers avec le type CXX_MODULES). Les fichiers répertoriés dans ces ensembles de fichiers sont traités comme des fichiers source aux fins de l'intégration à l'IDE.",
	"assets/variables.json.CXX_MODULE_SET_NAME": "Liste de fichiers séparés par des points-virgules dans l'ensemble de modules C++ <NAME> de la cible, qui a le type d'ensemble CXX_MODULES. Si l'un des chemins est relatif, il est calculé par rapport au répertoire source de la cible. La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.CXX_MODULE_STD": "CXX_MODULE_STD est un booléen spécifiant si la cible peut utiliser import std; ses sources C++ ou non.",
	"assets/variables.json.CXX_STANDARD": "Norme C++ dont les fonctionnalités sont demandées pour la génération de cette cible.",
	"assets/variables.json.CXX_STANDARD_REQUIRED": "Valeur booléenne indiquant si la valeur de CXX_STANDARD est obligatoire.",
	"assets/variables.json.C_EXTENSIONS": "Valeur booléenne spécifiant si des extensions spécifiques au compilateur sont demandées.",
	"assets/variables.json.C_STANDARD": "Norme C dont les fonctionnalités sont demandées pour la génération de cette cible.",
	"assets/variables.json.C_STANDARD_REQUIRED": "Valeur booléenne indiquant si la valeur de C_STANDARD est obligatoire.",
	"assets/variables.json.DEBUG_POSTFIX": "Consultez la propriété cible <CONFIG>_POSTFIX.",
	"assets/variables.json.DEFINE_SYMBOL": "Définissez un symbole durant la compilation des sources de cette cible.",
	"assets/variables.json.DEPLOYMENT_ADDITIONAL_FILES": "Définissez les fichiers AdditionalFiles du projet WinCE dans DeploymentTool dans les fichiers .vcproj générés par les générateurs Visual Studio. Ceci est utile lorsque vous souhaitez déboguer sur un périphérique WinCE distant. Spécifiez les fichiers supplémentaires qui seront copiés sur l'appareil. Par exemple :",
	"assets/variables.json.DEPLOYMENT_REMOTE_DIRECTORY": "Définissez le projet WinCE RemoteDirectory dans DeploymentTool et RemoteExecutable dans DebuggerTool dans les fichiers .vcproj générés par les générateurs Visual Studio. Ceci est utile lorsque vous souhaitez déboguer sur un périphérique WinCE distant. Par exemple :",
	"assets/variables.json.DEPRECATION": "Message de dépréciation de la part du développeur de la cible importée.",
	"assets/variables.json.DISABLE_PRECOMPILE_HEADERS": "Désactive la précompilation des fichiers d'en-tête spécifiés par la propriété PRECOMPILE_HEADERS.",
	"assets/variables.json.DLL_NAME_WITH_SOVERSION": "Cette propriété contrôle si la propriété cible SOVERSION est ajoutée au nom de fichier des noms de fichiers DLL générés pour la plateforme Windows, qui est sélectionnée lorsque la variable WIN32 est définie.",
	"assets/variables.json.DOTNET_SDK": "Spécifiez le SDK .NET pour les projets C#. Par exemple : Microsoft .NET.Sdk.",
	"assets/variables.json.DOTNET_TARGET_FRAMEWORK": "Permet de spécifier le framework cible .NET.",
	"assets/variables.json.DOTNET_TARGET_FRAMEWORK_VERSION": "Spécifie la version cible du .NET Framework.",
	"assets/variables.json.EchoString": "Message à afficher au moment de la génération de la cible.",
	"assets/variables.json.ENABLE_EXPORTS": "Spécifiez si un fichier exécutable ou une bibliothèque partagée exporte des symboles.",
	"assets/variables.json.EXCLUDE_FROM_DEFAULT_BUILD": "Permet d'exclure la cible de la génération de la solution.",
	"assets/variables.json.EXCLUDE_FROM_DEFAULT_BUILD_CONFIG": "Version par configuration de l'exclusion de la cible de la génération de la solution.",
	"assets/variables.json.EXPORT_COMPILE_COMMANDS": "Active/désactive la sortie des commandes de compilation durant la génération pour une cible.",
	"assets/variables.json.EXPORT_FIND_PACKAGE_NAME": "Contrôlez le nom de package associé à une cible de dépendance lors de l’exportation d’un appel find_dependency lors de l’installation ou de l’exportation. Cela permet d’affecter un nom de package à un package généré par CMake et exporté, ou de remplacer le package dans l’appel de find_package qui a créé la cible.",
	"assets/variables.json.EXPORT_NAME": "Nom exporté des fichiers cibles.",
	"assets/variables.json.EXPORT_NO_SYSTEM": "Cette propriété affecte le comportement des commandes d’installation et d’exportation lorsqu’elles installent ou exportent respectivement la cible. Lorsque EXPORT_NO_SYSTEM a la valeur true, ces commandes génèrent une cible importée avec la propriété SYSTEM définie sur false.",
	"assets/variables.json.EXPORT_PROPERTIES": "Liste les propriétés supplémentaires à exporter pour une cible.",
	"assets/variables.json.FOLDER": "Pour les IDE qui présentent des cibles à l'aide d'une hiérarchie de dossiers, cette propriété spécifie le nom du dossier sous lequel placer la cible. Pour imbriquer des dossiers, utilisez des valeurs FOLDER telles que GUI/Dialogs avec des caractères / séparant les niveaux de dossier. Les cibles sans propriété FOLDER apparaîtront comme des entités de niveau supérieur. Les cibles avec la même valeur de propriété FOLDER apparaîtront dans le même dossier que les frères et sœurs.",
	"assets/variables.json.Fortran_BUILDING_INSTRINSIC_MODULES": "Indique au préprocesseur CMake Fortran que la cible génère des intrinsèques Fortran pour la génération d’un compilateur Fortran.",
	"assets/variables.json.Fortran_MODULE_DIRECTORY": "Spécifiez le répertoire de sortie des modules Fortran fournis par la cible.",
	"assets/variables.json.FRAMEWORK": "Générez la bibliothèque SHARED ou STATIC en tant que bundle de framework sur macOS et iOS.",
	"assets/variables.json.FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG": "Suffixe à ajouter au nom de fichier de framework pour la configuration <CONFIG>, en cas d'utilisation d'un générateur multiconfiguration (par exemple Xcode et Ninja).",
	"assets/variables.json.FRAMEWORK_VERSION": "Version d'un framework créée à l'aide de la propriété cible FRAMEWORK (exemple : A).",
	"assets/variables.json.GENERATOR_FILE_NAME": "Fichier du générateur pour cette cible.",
	"assets/variables.json.GHS_INTEGRITY_APP": "Valeur booléenne ON/OFF, qui permet de déterminer si une cible exécutable doit être traitée en tant qu'application d'intégrité.",
	"assets/variables.json.GHS_NO_SOURCE_GROUP_FILE": "Valeur booléenne ON/OFF, qui permet de contrôler si le fichier projet d'une cible doit correspondre à un seul fichier ou plusieurs fichiers.",
	"assets/variables.json.GNUtoMS": "Convertissez la bibliothèque d'importation GNU (.dll.a) au format MS (.lib).",
	"assets/variables.json.HAS_CXX": "Effectuez une édition des liens de la cible à l'aide de l'outil éditeur de liens C++ (obsolète).",
	"assets/variables.json.HEADER_DIRS": "Liste, séparée par des points-virgules, des répertoires de base du jeu d'en-têtes par défaut de la cible (c'est-à-dire le jeu de fichiers portant le nom et le type HEADERS). La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.HEADER_DIRS_NAME": "Liste de répertoires de base séparés par des points-virgules du jeu d’en-têtes <NAME> de la cible, qui a le type HEADERS défini. La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.HEADER_SET": "Liste de fichiers séparés par des points-virgules dans le jeu d'en-têtes par défaut de la cible, (c'est-à-dire le jeu de fichiers avec le nom et le type HEADERS). Si l'un des chemins est relatif, il est calculé par rapport au répertoire source de la cible. La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.HEADER_SETS": "Liste en lecture seule des jeux d’en-têtes PRIVATE et PUBLIC de la cible (c’est-à-dire tous les jeux de fichiers avec le type HEADERS). Les fichiers répertoriés dans ces jeux de fichiers sont traités comme des fichiers sources pour l’intégration de l’IDE. La propriété HEADER_FILE_ONLY des fichiers a également la valeur TRUE.",
	"assets/variables.json.HEADER_SET_NAME": "Liste de fichiers séparés par des points-virgules dans le jeu d’en-têtes <NAME> de la cible, qui a le type HEADERS défini. Si l’un des chemins d’accès est relatif, il est calculé par rapport au répertoire source de la cible. La propriété prend en charge les expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.HIP_ARCHITECTURES": "Liste des architectures de GPU pour lesquelles générer le code de l'appareil. Les noms d’architecture sont interprétés en fonction de CMAKE_HIP_PLATFORM.",
	"assets/variables.json.HIP_EXTENSIONS": "Valeur booléenne spécifiant si des extensions spécifiques au compilateur sont demandées.",
	"assets/variables.json.HIP_STANDARD": "Norme HIP/C++ demandée pour générer cette cible.",
	"assets/variables.json.HIP_STANDARD_REQUIRED": "Valeur booléenne indiquant si la valeur de HIP_STANDARD est obligatoire.",
	"assets/variables.json.IMPORTED": "Indication en lecture seule spécifiant si une cible est IMPORTED.",
	"assets/variables.json.IMPORTED_COMMON_LANGUAGE_RUNTIME": "Propriété permettant de définir si la cible utilise C++/CLI.",
	"assets/variables.json.IMPORTED_CONFIGURATIONS": "Configurations fournies pour une cible importée.",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_DEFINITIONS": "Définitions de préprocesseur pour la compilation des sources de module C++ d’une cible IMPORTÉE.",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_FEATURES": "Fonctionnalités du compilateur activées pour les modules C++ de cette cible IMPORTED.",
	"assets/variables.json.IMPORTED_CXX_MODULES_COMPILE_OPTIONS": "Liste des options à passer au compilateur pour les modules C++ de cette cible IMPORTÉE.",
	"assets/variables.json.IMPORTED_CXX_MODULES_INCLUDE_DIRECTORIES": "Liste des répertoires de recherche des fichiers d’inclusion du préprocesseur lors de la compilation de modules C++ pour les cibles IMPORTED.",
	"assets/variables.json.IMPORTED_CXX_MODULES_LINK_LIBRARIES": "Liste des dépendances directes à utiliser pour les exigences d’utilisation des modules C++ dans les modules C++ de la cible.",
	"assets/variables.json.IMPORTED_GLOBAL": "Indication spécifiant si une cible IMPORTED est visible de manière globale.",
	"assets/variables.json.IMPORTED_IMPLIB": "Chemin complet de la bibliothèque d'importation pour une cible IMPORTED.",
	"assets/variables.json.IMPORTED_IMPLIB_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_IMPLIB.",
	"assets/variables.json.IMPORTED_LIBNAME": "Spécifiez le nom de la bibliothèque de liens pour une bibliothèque d'interface importée.",
	"assets/variables.json.IMPORTED_LIBNAME_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_LIBNAME.",
	"assets/variables.json.IMPORTED_LINK_DEPENDENT_LIBRARIES": "Bibliothèques partagées dépendantes d'une bibliothèque partagée importée.",
	"assets/variables.json.IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_LINK_DEPENDENT_LIBRARIES.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LANGUAGES": "Langages compilés dans une bibliothèque statique IMPORTED.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_LINK_INTERFACE_LANGUAGES.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LIBRARIES": "Interface d'édition des liens transitive d'une cible IMPORTED.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_LINK_INTERFACE_LIBRARIES.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_MULTIPLICITY": "Nombre de répétitions pour les cycles de bibliothèques statiques IMPORTED.",
	"assets/variables.json.IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_LINK_INTERFACE_MULTIPLICITY.",
	"assets/variables.json.IMPORTED_LOCATION": "Chemin complet du fichier principal sur disque pour une cible IMPORTED.",
	"assets/variables.json.IMPORTED_LOCATION_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_LOCATION.",
	"assets/variables.json.IMPORTED_NO_SONAME": "Spécifie qu'une cible de bibliothèque partagée IMPORTED n'a aucun soname.",
	"assets/variables.json.IMPORTED_NO_SONAME_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_NO_SONAME.",
	"assets/variables.json.IMPORTED_NO_SYSTEM": "La définition de IMPORTED_NO_SYSTEM sur true sur une cible importée spécifie qu’il ne s’agit pas d’une cible système. Cela a les effets suivants :",
	"assets/variables.json.IMPORTED_OBJECTS": "Liste de chemins absolus séparés par des points-virgules, qui correspondent aux fichiers objets sur disque pour une bibliothèque d'objets importée.",
	"assets/variables.json.IMPORTED_OBJECTS_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_OBJECTS.",
	"assets/variables.json.IMPORTED_SONAME": "Correspond au soname d'une cible IMPORTED de type bibliothèque partagée.",
	"assets/variables.json.IMPORTED_SONAME_CONFIG": "Version spécifique à <CONFIG> de la propriété IMPORTED_SONAME.",
	"assets/variables.json.IMPORT_PREFIX": "Ce qui précède le nom de la bibliothèque d'importation.",
	"assets/variables.json.IMPORT_SUFFIX": "Ce qui suit le nom de la bibliothèque d'importation.",
	"assets/variables.json.INSTALL_NAME_DIR": "Nom du répertoire pour les cibles installées sur les plateformes Apple.",
	"assets/variables.json.INSTALL_REMOVE_ENVIRONMENT_RPATH": "Contrôle si les rpath définis par la chaîne d'outils doivent être supprimés durant l'installation.",
	"assets/variables.json.INSTALL_RPATH": "Rpath à utiliser pour les cibles installées.",
	"assets/variables.json.INSTALL_RPATH_USE_LINK_PATH": "Ajoute des chemins à la recherche de l'éditeur de liens et au rpath installé.",
	"assets/variables.json.INTERFACE_AUTOMOC_MACRO_NAMES": "Liste de noms de macro séparés par des points-virgules pour la propagation d’AUTOMOC aux consommateurs.",
	"assets/variables.json.INTERFACE_AUTOUIC_OPTIONS": "Liste des options d'interface à passer à uic.",
	"assets/variables.json.INTERFACE_COMPILE_DEFINITIONS": "Liste des exigences d'un property_name public pour une bibliothèque.",
	"assets/variables.json.INTERFACE_COMPILE_FEATURES": "Liste des exigences d'un property_name public pour une bibliothèque.",
	"assets/variables.json.INTERFACE_COMPILE_OPTIONS": "Liste des exigences d'un property_name public pour une bibliothèque.",
	"assets/variables.json.INTERFACE_CXX_MODULE_SETS": "Liste en lecture seule des ensembles de modules PUBLIC C++ de la cible (c'est-à-dire tous les ensembles de fichiers avec le type CXX_MODULES). Les fichiers répertoriés dans ces ensembles de modules C++ peuvent être installés avec install et exportés avec install et export.",
	"assets/variables.json.INTERFACE_HEADER_SETS": "Liste en lecture seule des jeux d’en-têtes INTERFACE et PUBLIC de la cible (c’est-à-dire tous les jeux de fichiers avec le type HEADERS). Les fichiers répertoriés dans ces jeux d’en-têtes peuvent être installés avec l’installation et l’exportation avec l’installation et l’exportation.",
	"assets/variables.json.INTERFACE_HEADER_SETS_TO_VERIFY": "Permet de spécifier les jeux d’en-tête PUBLIC et INTERFACE d’une cible à vérifier.",
	"assets/variables.json.INTERFACE_INCLUDE_DIRECTORIES": "Liste des exigences d'un property_name public pour une bibliothèque.",
	"assets/variables.json.INTERFACE_LINK_DEPENDS": "Fichiers d'interface publique supplémentaires dont dépend un fichier binaire cible pour l'édition des liens.",
	"assets/variables.json.INTERFACE_LINK_DIRECTORIES": "Liste des exigences d'un property_name public pour une bibliothèque.",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES": "Listez les bibliothèques d'interface publique d'une bibliothèque.",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES_DIRECT": "Liste des bibliothèques que les consommateurs de cette bibliothèque doivent traiter comme des dépendances de lien direct.",
	"assets/variables.json.INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE": "Liste des bibliothèques que les consommateurs de cette bibliothèque ne doivent pas traiter comme des dépendances de lien direct.",
	"assets/variables.json.INTERFACE_LINK_OPTIONS": "Liste des exigences d'un property_name public pour une bibliothèque.",
	"assets/variables.json.INTERFACE_POSITION_INDEPENDENT_CODE": "Spécifie si les consommateurs doivent créer une cible indépendante de la position",
	"assets/variables.json.INTERFACE_PRECOMPILE_HEADERS": "Liste des fichiers d'en-tête d'interface à précompiler en cibles de consommation.",
	"assets/variables.json.INTERFACE_SOURCES": "Liste des sources d'interface à compiler en cibles de consommation.",
	"assets/variables.json.INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": "Liste des répertoires include système publics d'une bibliothèque.",
	"assets/variables.json.IOS_INSTALL_COMBINED": "Générez une cible combinée (appareil et simulateur) au moment de l'installation.",
	"assets/variables.json.ISPC_HEADER_DIRECTORY": "Permet de spécifier le répertoire de sortie relatif pour les en-têtes ISPC fournis par la cible.",
	"assets/variables.json.ISPC_HEADER_SUFFIX": "Permet de spécifier le suffixe de sortie à utiliser pour les en-têtes générés par ISPC et fournis par la cible.",
	"assets/variables.json.ISPC_INSTRUCTION_SETS": "Liste des architectures de jeux d'instructions pour lesquelles générer du code.",
	"assets/variables.json.JOB_POOL_COMPILE": "Ninja uniquement : pool utilisé pour la compilation.",
	"assets/variables.json.JOB_POOL_LINK": "Ninja uniquement : pool utilisé pour l'édition des liens.",
	"assets/variables.json.JOB_POOL_PRECOMPILE_HEADER": "Ninja uniquement : pool utilisé pour générer des en-têtes précompilés.",
	"assets/variables.json.LANG_CLANG_TIDY": "Cette propriété est implémentée uniquement quand <LANG> a la valeur C, CXX, OBJC ou OBJCXX.",
	"assets/variables.json.LANG_CLANG_TIDY_EXPORT_FIXES_DIR": "Cette propriété est implémentée uniquement lorsque <LANG> est C, CXX, OBJC ou OBJCXX, et n'a d'effet que lorsque <LANG>_CLANG_TIDY est défini.",
	"assets/variables.json.LANG_COMPILER_LAUNCHER": "Cette propriété est implémentée uniquement quand <LANG> a la valeur C, CXX, Fortran, HIP, ISPC, OBJC, OBJCXX ou CUDA.",
	"assets/variables.json.LANG_CPPCHECK": "Cette propriété est prise en charge uniquement quand <LANG> a la valeur C ou CXX.",
	"assets/variables.json.LANG_CPPLINT": "Cette propriété est prise en charge uniquement quand <LANG> a la valeur C ou CXX.",
	"assets/variables.json.LANG_EXTENSIONS": "Les variantes sont :",
	"assets/variables.json.LANG_INCLUDE_WHAT_YOU_USE": "Cette propriété est implémentée uniquement quand <LANG> a la valeur C ou CXX.",
	"assets/variables.json.LANG_LINKER_LAUNCHER": "Cette propriété est implémentée uniquement quand <LANG> a la valeur C, CXX, OBJC ou OBJCXX.",
	"assets/variables.json.LANG_STANDARD": "Les variantes sont :",
	"assets/variables.json.LANG_STANDARD_REQUIRED": "Les variantes sont :",
	"assets/variables.json.LANG_VISIBILITY_PRESET": "Valeur des indicateurs de compilation pour la visibilité des symboles",
	"assets/variables.json.LIBRARY_OUTPUT_DIRECTORY": "Répertoire de sortie dans lequel générer les fichiers cibles XXX.",
	"assets/variables.json.LIBRARY_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration pour les fichiers cibles LIBRARY.",
	"assets/variables.json.LIBRARY_OUTPUT_NAME": "Nom de sortie des fichiers cibles XXX.",
	"assets/variables.json.LIBRARY_OUTPUT_NAME_CONFIG": "Nom de sortie par configuration pour les fichiers cibles LIBRARY.",
	"assets/variables.json.LINKER_LANGUAGE": "Spécifie le langage dont le compilateur appelle l'éditeur de liens.",
	"assets/variables.json.LINKER_TYPE": "Spécifiez l’éditeur de liens à utiliser pour l’étape de liaison. La valeur de propriété peut utiliser des expressions de générateur <cmake-generator-expressions(7)>.",
	"assets/variables.json.LINK_DEPENDS": "Fichiers supplémentaires dont dépend un fichier binaire cible pour l'édition des liens.",
	"assets/variables.json.LINK_DEPENDS_NO_SHARED": "Spécifie la dépendance ou non des fichiers de bibliothèque partagée ayant fait l'objet d'une édition des liens.",
	"assets/variables.json.LINK_FLAGS": "Indicateurs supplémentaires à utiliser durant l'édition des liens de cette cible, s'il s'agit d'une bibliothèque partagée, d'une bibliothèque de modules ou d'un exécutable. Les bibliothèques statiques doivent utiliser les propriétés STATIC_LIBRARY_OPTIONS ou STATIC_LIBRARY_FLAGS.",
	"assets/variables.json.LINK_FLAGS_CONFIG": "Indicateurs d'éditeur de liens par configuration pour une cible de bibliothèque SHARED, une cible MODULE ou une cible EXECUTABLE.",
	"assets/variables.json.LINK_INTERFACE_LIBRARIES": "Liste les bibliothèques d'interface publique d'une bibliothèque partagée ou d'un exécutable.",
	"assets/variables.json.LINK_INTERFACE_LIBRARIES_CONFIG": "Liste par configuration des bibliothèques d'interface publique d'une cible.",
	"assets/variables.json.LINK_INTERFACE_MULTIPLICITY": "Nombre de répétitions pour les bibliothèques STATIC ayant des dépendances cycliques.",
	"assets/variables.json.LINK_INTERFACE_MULTIPLICITY_CONFIG": "Nombre de répétitions par configuration pour les cycles de bibliothèques STATIC.",
	"assets/variables.json.LINK_LIBRARIES": "Liste de dépendances utilisées pour l'édition des liens de manière directe.",
	"assets/variables.json.LINK_LIBRARIES_ONLY_TARGETS": "Appliquez que les éléments de lien qui peuvent être des noms cibles sont des cibles existantes.",
	"assets/variables.json.LINK_LIBRARY_OVERRIDE": "Remplacez les fonctionnalités de bibliothèque associées aux bibliothèques des expressions de générateur LINK_LIBRARY. Peut être utilisé pour résoudre les fonctionnalités de bibliothèque incompatibles résultant de la spécification de fonctionnalités différentes pour la même bibliothèque dans différentes expressions de générateur LINK_LIBRARY.",
	"assets/variables.json.LINK_LIBRARY_OVERRIDE_LIBRARY": "Remplacez la fonctionnalité de bibliothèque associée aux <LIBRARY> des expressions de générateur LINK_LIBRARY. Peut être utilisé pour résoudre les fonctionnalités de bibliothèque incompatibles résultant de la spécification de fonctionnalités différentes pour <LIBRARY> dans différentes expressions de générateur LINK_LIBRARY.",
	"assets/variables.json.LINK_SEARCH_END_STATIC": "Finit une ligne de lien pour permettre l'utilisation des bibliothèques système statiques.",
	"assets/variables.json.LINK_SEARCH_START_STATIC": "Suppose que l'éditeur de liens recherche les bibliothèques statiques par défaut.",
	"assets/variables.json.LINK_WHAT_YOU_USE": "Il s'agit d'une option booléenne qui, une fois qu'elle a la valeur TRUE, permet d'exécuter automatiquement le contenu de la variable CMAKE_LINK_WHAT_YOU_USE_CHECK sur la cible une fois qu’elle est liée. En outre, l’indicateur d’éditeur de liens spécifié par la variable CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG est passé à la cible avec la commande link pour permettre l'édition des liens dans la cible de toutes les bibliothèques spécifiées sur la ligne de commande. Ainsi, l'édition des liens produit une liste de bibliothèques qui ne fournissent aucun symbole utilisé par cette cible, mais qui sont liées à cette dernière.",
	"assets/variables.json.LOCATION_CONFIG": "Propriété en lecture seule fournissant un emplacement cible sur disque.",
	"assets/variables.json.MACHO_COMPATIBILITY_VERSION": "Permet de spécifier le numéro de version de compatibilité de la cible pour les fichiers binaires Mach-O.",
	"assets/variables.json.MACHO_CURRENT_VERSION": "Permet de spécifier le numéro de version actuelle de la cible pour les fichiers binaires Mach-O.",
	"assets/variables.json.MACOSX_BUNDLE": "Générez un fichier exécutable en tant que bundle d'applications sur macOS ou iOS.",
	"assets/variables.json.MACOSX_BUNDLE_INFO_PLIST": "Spécifiez un modèle Info.plist personnalisé pour un bundle d'applications macOS et iOS.",
	"assets/variables.json.MACOSX_FRAMEWORK_INFO_PLIST": "Spécifiez un modèle Info.plist personnalisé pour un framework macOS et iOS.",
	"assets/variables.json.MACOSX_RPATH": "Spécifie si cette cible sur macOS ou iOS est localisée au moment de l'exécution à l'aide de rpath.",
	"assets/variables.json.MANUALLY_ADDED_DEPENDENCIES": "Obtenez les dépendances vers d'autres cibles de niveau supérieur, qui ont été ajoutées manuellement.",
	"assets/variables.json.MAP_IMPORTED_CONFIG_CONFIG": "Mappez une configuration de projet à la configuration de la cible importée.",
	"assets/variables.json.MSVC_DEBUG_INFORMATION_FORMAT": "Sélectionnez le format des informations de débogage lorsque vous ciblez l'ABI MSVC.",
	"assets/variables.json.MSVC_RUNTIME_LIBRARY": "Permet de sélectionner la bibliothèque runtime MSVC à utiliser par les compilateurs ciblant l'ABI MSVC.",
	"assets/variables.json.NAME": "Nom logique de la cible.",
	"assets/variables.json.NO_SONAME": "Indique si soname doit être défini ou non au moment de l'édition des liens d'une bibliothèque partagée.",
	"assets/variables.json.NO_SYSTEM_FROM_IMPORTED": "Spécifie que les répertoires incluent des interfaces des cibles importées consommées ne doivent pas être traités en tant que répertoires de système.",
	"assets/variables.json.OBJCXX_EXTENSIONS": "Valeur booléenne spécifiant si des extensions spécifiques au compilateur sont demandées.",
	"assets/variables.json.OBJCXX_STANDARD": "Norme ObjC++ dont les fonctionnalités sont nécessaires pour la génération de cette cible.",
	"assets/variables.json.OBJCXX_STANDARD_REQUIRED": "Valeur booléenne indiquant si la valeur de OBJCXX_STANDARD est obligatoire.",
	"assets/variables.json.OBJC_EXTENSIONS": "Valeur booléenne spécifiant si des extensions spécifiques au compilateur sont demandées.",
	"assets/variables.json.OBJC_STANDARD": "Norme OBJC dont les fonctionnalités sont nécessaires pour la génération de cette cible.",
	"assets/variables.json.OBJC_STANDARD_REQUIRED": "Valeur booléenne indiquant si la valeur de OBJC_STANDARD est obligatoire.",
	"assets/variables.json.OPTIMIZE_DEPENDENCIES": "Active l'optimisation des dépendances pour les bibliothèques statiques et les bibliothèque d'objets.",
	"assets/variables.json.OSX_ARCHITECTURES": "Ciblez des architectures spécifiques pour macOS.",
	"assets/variables.json.OSX_ARCHITECTURES_CONFIG": "Architectures binaires macOS et iOS par configuration d'une cible.",
	"assets/variables.json.OUTPUT_NAME": "Nom de sortie des fichiers cibles.",
	"assets/variables.json.OUTPUT_NAME_CONFIG": "Nom de base du fichier cible par configuration.",
	"assets/variables.json.PCH_INSTANTIATE_TEMPLATES": "Quand cette propriété a la valeur true, les options de compilateur d'en-tête précompilé contiennent un indicateur qui permet d'instancier les modèles durant la génération du PCH, si cela est pris en charge. Cela peut améliorer le temps de compilation de manière très importante. Pris en charge par Clang depuis la version 11.",
	"assets/variables.json.PCH_WARN_INVALID": "Quand cette propriété a la valeur true, les options de compilateur d'en-tête précompilé contiennent un indicateur de compilateur qui doit signaler les en-têtes précompilés non valides, par exemple -Winvalid-pch pour le compilateur GNU.",
	"assets/variables.json.PDB_NAME": "Nom de sortie du fichier .pdb de symboles de débogage Microsoft généré par l'éditeur de liens pour une cible d'exécutable ou de bibliothèque partagée.",
	"assets/variables.json.PDB_NAME_CONFIG": "Nom de sortie par configuration du fichier .pdb de symboles de débogage Microsoft généré par l'éditeur de liens pour une cible d'exécutable ou de bibliothèque partagée.",
	"assets/variables.json.PDB_OUTPUT_DIRECTORY": "Répertoire de sortie du fichier .pdb de symboles de débogage Microsoft généré par l'éditeur de liens pour une cible d'exécutable ou de bibliothèque partagée.",
	"assets/variables.json.PDB_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration du fichier .pdb de symboles de débogage Microsoft généré par l'éditeur de liens pour une cible d'exécutable ou de bibliothèque partagée.",
	"assets/variables.json.POSITION_INDEPENDENT_CODE": "Spécifie la création ou non d'une cible indépendante de la position",
	"assets/variables.json.POST_INSTALL_SCRIPT": "Prise en charge de l'installation dépréciée.",
	"assets/variables.json.PRECOMPILE_HEADERS": "Liste des fichiers d'en-tête à précompiler.",
	"assets/variables.json.PRECOMPILE_HEADERS_REUSE_FROM": "Cible à partir de laquelle réutiliser l'artefact de build des en-têtes précompilés.",
	"assets/variables.json.PREFIX": "Ce qui précède le nom de la bibliothèque.",
	"assets/variables.json.PRE_INSTALL_SCRIPT": "Prise en charge de l'installation dépréciée.",
	"assets/variables.json.PRIVATE_HEADER": "Spécifiez des fichiers d'en-tête privés dans une cible de bibliothèque partagée de FRAMEWORK.",
	"assets/variables.json.PROJECT_LABEL": "Changez le nom d'une cible dans un IDE.",
	"assets/variables.json.PUBLIC_HEADER": "Spécifiez des fichiers d'en-tête publics dans une cible de bibliothèque partagée de FRAMEWORK.",
	"assets/variables.json.RESOURCE": "Spécifiez les fichiers de ressources dans un FRAMEWORK ou BUNDLE.",
	"assets/variables.json.RUNTIME_OUTPUT_DIRECTORY": "Répertoire de sortie dans lequel générer les fichiers cibles XXX.",
	"assets/variables.json.RUNTIME_OUTPUT_DIRECTORY_CONFIG": "Répertoire de sortie par configuration pour les fichiers cibles RUNTIME.",
	"assets/variables.json.RUNTIME_OUTPUT_NAME": "Nom de sortie des fichiers cibles XXX.",
	"assets/variables.json.RUNTIME_OUTPUT_NAME_CONFIG": "Nom de sortie par configuration pour les fichiers cibles RUNTIME.",
	"assets/variables.json.SKIP_BUILD_RPATH": "Spécifie si les rpath doivent être utilisés pour l'arborescence de build.",
	"assets/variables.json.SOURCES": "Ceci spécifie la liste des chemins d’accès aux fichiers sources pour la cible. Les commandes suivantes sont toutes définies ou ajoutées à la propriété cible SOURCES et sont la façon habituelle de la manipuler :",
	"assets/variables.json.SOVERSION": "Numéro de version ABI d’une cible de bibliothèque partagée.",
	"assets/variables.json.STATIC_LIBRARY_FLAGS": "Indicateurs de l'archiviste (ou du bibliothécaire MSVC) pour une cible de bibliothèque statique. Les cibles qui sont des bibliothèques partagées, des modules ou des exécutables doivent utiliser les propriétés cibles LINK_OPTIONS ou LINK_FLAGS.",
	"assets/variables.json.STATIC_LIBRARY_FLAGS_CONFIG": "Indicateurs de l'archiviste (ou du bibliothécaire MSVC) par configuration pour une cible de bibliothèque statique.",
	"assets/variables.json.STATIC_LIBRARY_OPTIONS": "Indicateurs de l'archiviste (ou du bibliothécaire MSVC) pour une cible de bibliothèque statique. Les cibles qui sont des bibliothèques partagées, des modules ou des exécutables doivent utiliser la propriété cible LINK_OPTIONS.",
	"assets/variables.json.SUFFIX": "Ce qui suit le nom de la cible.",
	"assets/variables.json.Swift_COMPILATION_MODE": "Spécifiez comment Swift compile une cible.",
	"assets/variables.json.Swift_LANGUAGE_VERSION": "Cette propriété définit la version linguistique des sources Swift dans la cible. Si aucune valeur n'est spécifiée, la valeur par défaut sera CMAKE_Swift_LANGUAGE_VERSION si elle est spécifiée, sinon il s'agira de la dernière version prise en charge par le compilateur.",
	"assets/variables.json.Swift_MODULE_DIRECTORY": "Permet de spécifier le répertoire de sortie des modules Swift fournis par la cible.",
	"assets/variables.json.Swift_MODULE_NAME": "Cette propriété spécifie le nom du module Swift. Sa valeur par défaut correspond au nom de la cible.",
	"assets/variables.json.TEST_LAUNCHER": "Utilisez le lanceur donné pour exécuter des exécutables. Cette commande sera ajoutée en tant que préfixe pour add_test commandes pour les exécutables du système cible de build et doit être exécutée sur l’ordinateur hôte.",
	"assets/variables.json.TRANSITIVE_COMPILE_PROPERTIES": "Propriétés que l'expression du générateur TARGET_PROPERTY, sur la cible et ses dépendants, évalue comme l'union des valeurs collectées à partir de la fermeture transitive des dépendances de lien, à l'exclusion des entrées protégées par LINK_ONLY.",
	"assets/variables.json.TRANSITIVE_LINK_PROPERTIES": "Propriétés que l'expression du générateur TARGET_PROPERTY, sur la cible et ses dépendants, évalue comme l'union des valeurs collectées à partir de la fermeture transitive des dépendances de lien, y compris les entrées protégées par LINK_ONLY.",
	"assets/variables.json.UNITY_BUILD": "Quand cette propriété a la valeur true, les fichiers sources cibles sont combinés en lots pour une compilation plus rapide. Pour ce faire, un (ensemble) de sources unity qui inclut (#include) les sources d'origine est créé. Ces sources unity sont ensuite compilées à la place des originaux. On appelle ce résultat une build Unity ou Jumbo.",
	"assets/variables.json.UNITY_BUILD_BATCH_SIZE": "Spécifie le nombre maximal de fichiers sources qui peuvent être combinés dans un fichier source unity quand les builds unity sont activées par la propriété cible UNITY_BUILD. Les fichiers sources d'origine sont distribués sur autant de fichiers sources unity que nécessaire pour que cette limite soit respectée.",
	"assets/variables.json.UNITY_BUILD_CODE_AFTER_INCLUDE": "Extrait de code inclus verbatim par la fonctionnalité UNITY_BUILD juste après chaque instruction #include dans les fichiers sources unity générés. Exemple :",
	"assets/variables.json.UNITY_BUILD_CODE_BEFORE_INCLUDE": "Extrait de code inclus verbatim par la fonctionnalité UNITY_BUILD juste avant chaque instruction #include dans les fichiers sources unity générés. Exemple :",
	"assets/variables.json.UNITY_BUILD_MODE": "CMake fournit différents algorithmes permettant de sélectionner les sources regroupées dans un compartiment. La sélection est décidée par cette propriété, qui a les valeurs acceptables suivantes :",
	"assets/variables.json.UNITY_BUILD_UNIQUE_ID": "Nom d'un identificateur C valide auquel a été affectée une valeur unique pour chaque fichier durant les builds Unity.",
	"assets/variables.json.VERIFY_INTERFACE_HEADER_SETS": "Permet de vérifier que tous les en-têtes des jeux d’en-tête PUBLIC et INTERFACE d’une cible peuvent être inclus seuls.",
	"assets/variables.json.VERSION": "Numéro de version d’une cible de bibliothèque partagée.",
	"assets/variables.json.VISIBILITY_INLINES_HIDDEN": "Spécifie l'ajout ou non d'un indicateur de compilation pour masquer les symboles des fonctions inline",
	"assets/variables.json.VS_CONFIGURATION_TYPE": "Type de configuration de projet Visual Studio.",
	"assets/variables.json.VS_DEBUGGER_COMMAND": "Définit la commande du débogueur local pour les cibles Visual Studio C++. La valeur de propriété peut utiliser des expressions de générateur <cmake-generator-expressions(7)>. Cela est défini dans <LocalDebuggerCommand> dans le fichier projet Visual Studio. Cette propriété est initialisée par la valeur de la variable CMAKE_VS_DEBUGGER_COMMAND si elle est définie lors de la création d’une cible.",
	"assets/variables.json.VS_DEBUGGER_COMMAND_ARGUMENTS": "Définit les arguments de la ligne de commande du débogueur local pour les cibles Visual Studio C++. La valeur de propriété peut utiliser des expressions de générateur <cmake-generator-expressions(7)>. Cela est défini dans <LocalDebuggerCommandArguments> dans le fichier projet Visual Studio. Cette propriété est initialisée par la valeur de la variable CMAKE_VS_DEBUGGER_COMMAND_ARGUMENTS si elle est définie lors de la création d’une cible.",
	"assets/variables.json.VS_DEBUGGER_ENVIRONMENT": "Définit l'environnement de débogage local pour les cibles Visual Studio C++. La valeur de propriété peut utiliser des expressions de générateur <cmake-generator-expressions(7)>. Cela est défini dans <LocalDebuggerEnvironment> dans le fichier projet Visual Studio. Cette propriété est initialisée par la valeur de la variable CMAKE_VS_DEBUGGER_ENVIRONMENT si elle est définie lors de la création d’une cible.",
	"assets/variables.json.VS_DEBUGGER_WORKING_DIRECTORY": "Définit le répertoire de travail du débogueur local pour les cibles Visual Studio C++. La valeur de propriété peut utiliser des expressions de générateur <cmake-generator-expressions(7)>. Cela est défini dans <LocalDebuggerWorkingDirectory> dans le fichier projet Visual Studio. Cette propriété est initialisée par la valeur de la variable CMAKE_VS_DEBUGGER_WORKING_DIRECTORY si elle est définie lors de la création d’une cible.",
	"assets/variables.json.VS_DESKTOP_EXTENSIONS_VERSION": "Version des extensions Visual Studio Windows 10 Desktop",
	"assets/variables.json.VS_DOTNET_DOCUMENTATION_FILE": "Sortie de documentation .NET de projet managé Visual Studio",
	"assets/variables.json.VS_DOTNET_REFERENCEPROP_refname_TAG_tagname": "Définit une propriété XML <tagname> pour une référence .NET <refname>.",
	"assets/variables.json.VS_DOTNET_REFERENCES": "Références .NET du projet managé Visual Studio",
	"assets/variables.json.VS_DOTNET_REFERENCES_COPY_LOCAL": "Définit la propriété de copie locale pour toutes les références de fichier hint .NET dans la cible",
	"assets/variables.json.VS_DOTNET_REFERENCE_refname": "Référence .NET du projet managé Visual Studio avec le nom <refname> et le chemin de fichier hint.",
	"assets/variables.json.VS_DOTNET_STARTUP_OBJECT": "Définit la propriété de l’objet de démarrage dans Visual Studio .NET cibles. La valeur de propriété définit un nom de classe qualifié complet (y compris le nom du package), par exemple : MyCompany.Package.MyStarterClass.",
	"assets/variables.json.VS_DOTNET_TARGET_FRAMEWORK_VERSION": "Spécifie la version cible du .NET Framework.",
	"assets/variables.json.VS_DPI_AWARE": "Définissez Outil Manifeste -> Entrée et sortie -> Prise en charge DPI dans les propriétés du projet cible Visual Studio.",
	"assets/variables.json.VS_FILTER_PROPS": "Définit le fichier d’accessoires de filtre à inclure dans le fichier de filtre du projet Visual Studio C++.",
	"assets/variables.json.VS_GLOBAL_KEYWORD": "Mot-clé du projet Visual Studio.",
	"assets/variables.json.VS_GLOBAL_PROJECT_TYPES": "Type(s) de projet Visual Studio.",
	"assets/variables.json.VS_GLOBAL_ROOTNAMESPACE": "Espace de noms racine du projet Visual Studio.",
	"assets/variables.json.VS_GLOBAL_variable": "Variable globale spécifique au projet Visual Studio.",
	"assets/variables.json.VS_IOT_EXTENSIONS_VERSION": "Version des extensions Visual Studio Windows 10 IoT",
	"assets/variables.json.VS_IOT_STARTUP_TASK": "Tâche en arrière-plan continue Visual Studio Windows 10 IoT",
	"assets/variables.json.VS_JUST_MY_CODE_DEBUGGING": "Activez Uniquement mon code avec le débogueur Visual Studio.",
	"assets/variables.json.VS_KEYWORD": "Supprimé Celui-ci spécifiait autrefois le mot-clé du projet Visual Studio pour le générateur Visual Studio 9 2008 et les versions antérieures, mais tous ces générateurs ont été supprimés.",
	"assets/variables.json.VS_MOBILE_EXTENSIONS_VERSION": "Version des extensions mobiles de Windows 10 sur Visual Studio",
	"assets/variables.json.VS_NO_COMPILE_BATCHING": "Désactivez le traitement par lot de compilation pour la cible. Généralement, MSBuild appelle le compilateur avec plusieurs fichiers c/cpp et le compilateur démarre des sous-processus pour chaque fichier afin de rendre la build parallèle. Si vous voulez que le compilateur soit appelé avec un fichier à la fois défini VS_NO_COMPILE_BATCHING à ON. Si cet indicateur est défini, MSBuild appelle le compilateur avec un fichier c/cpp à la fois. Utile lorsque vous voulez utiliser un outil qui remplace le compilateur, par exemple un outil de mise en cache de build.",
	"assets/variables.json.VS_NO_SOLUTION_DEPLOY": "Permet de spécifier que la cible ne doit pas être marquée pour être déployée sur un appareil Windows CE ou Windows Phone dans la solution Visual Studio générée.",
	"assets/variables.json.VS_PACKAGE_REFERENCES": "Références de package Visual Studio pour NuGet.",
	"assets/variables.json.VS_PLATFORM_TOOLSET": "Remplace l'ensemble d'outils de plateforme utilisé pour générer une cible.",
	"assets/variables.json.VS_PROJECT_IMPORT": "Importations de projet managé Visual Studio",
	"assets/variables.json.VS_SCC_AUXPATH": "Chemin auxiliaire de contrôle de code source Visual Studio.",
	"assets/variables.json.VS_SCC_LOCALPATH": "Chemin local de contrôle de code source Visual Studio.",
	"assets/variables.json.VS_SCC_PROJECTNAME": "Projet de contrôle de code source Visual Studio.",
	"assets/variables.json.VS_SCC_PROVIDER": "Fournisseur de contrôle de code source Visual Studio.",
	"assets/variables.json.VS_SDK_REFERENCES": "Références de kit SDK d'un projet Visual Studio. Spécifiez une liste de références de kit SDK séparées par des points-virgules, à ajouter à un projet Visual Studio généré, par exemple Microsoft.AdMediatorWindows81, Version=1.0.",
	"assets/variables.json.VS_SOLUTION_DEPLOY": "Permet de spécifier que la cible doit être marquée pour être déployée quand elle ne cible pas Windows CE, Windows Phone ou une application du Windows Store.",
	"assets/variables.json.VS_SOURCE_SETTINGS_tool": "Permet de définir les métadonnées d'élément sur tous les fichiers non générés qui utilisent <tool>.",
	"assets/variables.json.VS_USER_PROPS": "Définissez le fichier de propriétés utilisateur à inclure dans le fichier projet Visual Studio C++. Le chemin standard est $(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props, qui est dans la plupart des cas identique à %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props ou %LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props.",
	"assets/variables.json.VS_USE_DEBUG_LIBRARIES": "Indiquez aux générateurs Visual Studio quelles configurations sont considérées comme des configurations de débogage. Ceci contrôle le paramètre UseDebugLibraries dans chaque configuration d'un fichier .vcxproj.",
	"assets/variables.json.VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": "Version minimale de plateforme cible Windows de Visual Studio",
	"assets/variables.json.VS_WINRT_COMPONENT": "Marquez une cible en tant que composant Windows Runtime pour le générateur Visual Studio. Compilez la cible avec les extensions de langage C++/CX pour Windows Runtime. Pour les bibliothèques SHARED et MODULE, cela permet également de définir la macro de préprocesseur _WINRT_DLL.",
	"assets/variables.json.VS_WINRT_EXTENSIONS": "Déprécié. Utilisez VS_WINRT_COMPONENT à la place. Cette propriété est une implémentation partielle expérimentale de celle-ci.",
	"assets/variables.json.VS_WINRT_REFERENCES": "Références de métadonnées Windows Runtime de projet Visual Studio",
	"assets/variables.json.WATCOM_RUNTIME_LIBRARY": "Permet de sélectionner la bibliothèque runtime Watcom à utiliser par les compilateurs ciblant l'ABI Watcom.",
	"assets/variables.json.WIN32_EXECUTABLE": "Générez un exécutable avec un point d'entrée WinMain sur Windows.",
	"assets/variables.json.WINDOWS_EXPORT_ALL_SYMBOLS": "Cette propriété est implémentée uniquement pour les outils compatibles Microsoft sur Windows.",
	"assets/variables.json.XCODE_ATTRIBUTE_an-attribute": "Définit directement les attributs de cible Xcode.",
	"assets/variables.json.XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY": "Permet d'indiquer au générateur Xcode d'effectuer la signature de code pour l'ensemble des frameworks et bibliothèques incorporés à l'aide de la propriété XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>.",
	"assets/variables.json.XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY": "Permet d'indiquer au générateur Xcode de supprimer les en-têtes dans l'ensemble des frameworks incorporés à l'aide de la propriété XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>.",
	"assets/variables.json.XCODE_EMBED_type": "Indiquez au générateur Xcode d’incorporer la liste d’éléments spécifiée dans le bundle cible. <type>spécifie la phase de génération incorporée à utiliser. Consultez la documentation Xcode pour connaître l’emplacement de base de chaque <type>.",
	"assets/variables.json.XCODE_EMBED_type_CODE_SIGN_ON_COPY": "Propriété booléenne utilisée uniquement par le générateur Xcode. Il spécifie s’il faut effectuer la signature de code pour les éléments incorporés à l’aide de la propriété XCODE_EMBED_.",
	"assets/variables.json.XCODE_EMBED_type_PATH": "Cette propriété est utilisée uniquement par le générateur Xcode. Lorsqu’elle est définie, elle spécifie le chemin d’accès relatif à utiliser lors de l’incorporation des éléments spécifiés par XCODE_EMBED_. Le chemin d’accès est relatif à l’emplacement de base de la phase de génération Incorporer XXX associée à <type>. Consultez la documentation Xcode pour connaître l’emplacement de base de chaque <type>.",
	"assets/variables.json.XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY": "Propriété booléenne utilisée uniquement par le générateur Xcode. Il spécifie s’il faut supprimer des en-têtes de tous les frameworks incorporés à l’aide de la propriété XCODE_EMBED_.",
	"assets/variables.json.XCODE_GENERATE_SCHEME": "En cas d'activation, le générateur Xcode génère des fichiers de schéma. Ceux-ci permettent d'appeler des actions d'analyse, d'archivage, de génération à des fins de test et de test à partir de la ligne de commande.",
	"assets/variables.json.XCODE_LINK_BUILD_PHASE_MODE": "Quand vous utilisez le générateur Xcode, les bibliothèques à lier sont spécifiées dans le fichier projet Xcode à l'aide de la phase de build \"Link Binary With Libraries\", ou directement en tant qu'indicateurs de l'éditeur de liens. Dans le premier cas de figure, Xcode gère les chemins de build, ce qui peut s'avérer nécessaire au moment de la création d'archives Xcode, car d'autres chemins de build peuvent être utilisés pour une build classique.",
	"assets/variables.json.XCODE_PRODUCT_TYPE": "Définissez l'attribut Xcode productType dans sa référence à une cible. CMake calcule une valeur par défaut en fonction du type de cible mais peut recevoir des informations explicites sur cette propriété.",
	"assets/variables.json.XCODE_SCHEME_ADDRESS_SANITIZER": "Indique si Address Sanitizer doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": "Indique si la détection de l'utilisation de la pile après un retour doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_ARGUMENTS": "Spécifiez les arguments de ligne de commande à ajouter à la section Arguments du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_DEBUG_AS_ROOT": "Indique si la cible doit être déboguée en tant que 'root'.",
	"assets/variables.json.XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": "Indique si le débogage doit être autorisé avec l'Explorateur de versions de documents dans la section Options du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": "Indique si Main Thread Checker doit être désactivé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": "Indique si les chargements de bibliothèques dynamiques doivent être activés dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": "Indique si l'utilisation de l'API d'éditeur de liens dynamique doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_API_VALIDATION": "Valeur de propriété pour Metal : Validation de l'API dans la section Options du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE": "Valeur de propriété pour la capture de cadre GPU dans la section Options du schéma de Xcode généré. Les exemples de valeurs sont Metal et Disabled.",
	"assets/variables.json.XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION": "Valeur de propriété pour Metal : Shader Validation dans la section Options du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_ENVIRONMENT": "Spécifiez les variables d'environnement à ajouter à la section Arguments du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_EXECUTABLE": "Spécifiez le chemin de l'exécutable dans la section Info du schéma Xcode généré. Si rien n'est défini, le générateur de schéma sélectionne la cible actuelle si elle est réellement exécutable.",
	"assets/variables.json.XCODE_SCHEME_GUARD_MALLOC": "Indique si Guard Malloc doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_LAUNCH_CONFIGURATION": "Définissez la configuration de génération pour exécuter la cible.",
	"assets/variables.json.XCODE_SCHEME_LAUNCH_MODE": "Valeur de propriété pour Launch dans la section Info du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": "Indique si l'option Pause en cas de problème de Main Thread Checker doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_MALLOC_GUARD_EDGES": "Indique si Malloc Guard Edges doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_MALLOC_SCRIBBLE": "Indique si Malloc Scribble doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_MALLOC_STACK": "Indique si Malloc Stack doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_THREAD_SANITIZER": "Indique si Thread Sanitizer doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_THREAD_SANITIZER_STOP": "Indique si l'option d'interruption en cas de problème de Thread Sanitizer doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": "Indique si Undefined Behavior Sanitizer doit être activé dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": "Indique si l'option d'interruption en cas de problème d'Undefined Behavior Sanitizer doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_SCHEME_WORKING_DIRECTORY": "Permet de spécifier le répertoire de travail des actions Run et Profile dans le schéma Xcode généré. Si la valeur contient des expressions de générateur, celles-ci sont évaluées.",
	"assets/variables.json.XCODE_SCHEME_ZOMBIE_OBJECTS": "Indique si l'option relative aux objets Zombie doit être activée dans la section Diagnostics du schéma Xcode généré.",
	"assets/variables.json.XCODE_XCCONFIG": "Si cette option est définie, le générateur Xcode inscrit le fichier spécifié en tant que fichier XCConfig de niveau . Pour les fichiers XCConfig au niveau cible, consultez la variable CMAKE_XCODE_XCCONFIG .",
	"assets/variables.json.XCTEST": "Cette cible est un CFBundle XCTest sur Mac."
}