/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"assets/modules.json.AddFileDependencies": "将依赖项添加到源文件。",
	"assets/modules.json.AndroidTestUtilities": "创建可自动将指定数据加载到 Android 设备上的测试。",
	"assets/modules.json.BundleUtilities": "用于帮助汇编独立捆绑包应用程序的函数。",
	"assets/modules.json.CheckCCompilerFlag": "检查 C 编译器是否支持给定标志。",
	"assets/modules.json.CheckCompilerFlag": "检查编译器是否支持给定标志。",
	"assets/modules.json.CheckCSourceCompiles": "检查给定的 C 源是否编译并链接到可执行文件中。",
	"assets/modules.json.CheckCSourceRuns": "检查给定的 C 源是否编译并链接到可执行文件中，以及随后是否可以运行。",
	"assets/modules.json.CheckCXXCompilerFlag": "检查 CXX 编译器是否支持给定的标志。",
	"assets/modules.json.CheckCXXSourceCompiles": "检查给定的 C++ 源是否编译并链接到可执行文件中。",
	"assets/modules.json.CheckCXXSourceRuns": "检查给定的 C++ 源是否编译并链接到可执行文件中，以及随后是否可以运行。",
	"assets/modules.json.CheckCXXSymbolExists": "检查符号是否作为 C++ 中的函数、变量或宏而存在。",
	"assets/modules.json.CheckFortranCompilerFlag": "检查 Fortran 编译器是否支持给定标志。",
	"assets/modules.json.CheckFortranFunctionExists": "检查 Fortran 函数是否存在。",
	"assets/modules.json.CheckFortranSourceCompiles": "检查给定的 Fortran 源是否编译并链接到可执行文件中。",
	"assets/modules.json.CheckFortranSourceRuns": "检查给定的 Fortran 源是否编译并链接到可执行文件中，以及随后是否可以运行。",
	"assets/modules.json.CheckFunctionExists": "检查是否可以链接 C 函数",
	"assets/modules.json.CheckIncludeFile": "提供一个宏，用于检查头文件是否可以包含在 C 中。",
	"assets/modules.json.CheckIncludeFileCXX": "提供用于检查标头文件是否可以包含在 CXX 中的宏。",
	"assets/modules.json.CheckIncludeFiles": "提供一个宏，用于检查是否可以将一个或多个头文件的列表包含在一起。",
	"assets/modules.json.CheckIPOSupported": "检查编译程序是否支持过程间优化(GP/LTO)。在启用 INTERPROCEDURAL_OPTIMIZATION 目标属性之前，请使用此属性。",
	"assets/modules.json.CheckLanguage": "检查是否可以通过 enable_language 或项目命令启用语言:",
	"assets/modules.json.CheckLibraryExists": "检查函数是否存在。",
	"assets/modules.json.CheckLinkerFlag": "检查编译器是否支持给定的链接标志。",
	"assets/modules.json.CheckOBJCCompilerFlag": "检查 Objective-C 编译器是否支持给定标志。",
	"assets/modules.json.CheckOBJCSourceCompiles": "检查给定的 Objective-C 源是否编译并链接到可执行文件中。",
	"assets/modules.json.CheckOBJCSourceRuns": "检查给定的 Objective-C 源是否编译并链接到可执行文件中，以及随后是否可以运行。",
	"assets/modules.json.CheckOBJCXXCompilerFlag": "检查 Objective-C++ 编译器是否支持给定标志。",
	"assets/modules.json.CheckOBJCXXSourceCompiles": "检查给定的 Objective-C++ 源是否编译并链接到可执行文件中。",
	"assets/modules.json.CheckOBJCXXSourceRuns": "检查给定的 Objective-C++ 源是否编译并链接到可执行文件中，以及随后是否可以运行。",
	"assets/modules.json.CheckPIESupported": "检查链接器是否支持可执行文件的位置独立代码(PIE)或无位置独立代码(NO_PIE)。使用此项以确保在链接时遵循可执行文件的 POSITION_INDEPENDENT_CODE 目标属性。",
	"assets/modules.json.CheckPrototypeDefinition": "检查预期的原型是否正确。",
	"assets/modules.json.CheckSourceCompiles": "检查给定的源是否编译并链接到可执行文件中。",
	"assets/modules.json.CheckSourceRuns": "检查给定的源是否编译并链接到可执行文件中，以及随后是否可以运行。",
	"assets/modules.json.CheckStructHasMember": "检查给定的结构或类是否具有指定的成员变量",
	"assets/modules.json.CheckSymbolExists": "提供一个宏，用于检查一个符号是否作为 C 中的函数、变量或宏而存在。",
	"assets/modules.json.CheckTypeSize": "检查类型的大小",
	"assets/modules.json.CheckVariableExists": "检查该变量是否存在。",
	"assets/modules.json.CMakeAddFortranSubdirectory": "添加仅限 fortran 的子目录，查找 fortran 编译器并生成。",
	"assets/modules.json.CMakeBackwardCompatibilityCXX": "定义一组向后兼容变量",
	"assets/modules.json.CMakeDependentOption": "用于提供依赖于其他选项的选项的宏。",
	"assets/modules.json.CMakeDetermineVSServicePack": "此模块的功能已被包含编译器版本号的 CMAKE_<LANG>_COMPILER_VERSION 变量所取代。",
	"assets/modules.json.CMakeExpandImportedTargets": "此模块曾经需要用于将导入的目标扩展到它们在磁盘上引用的基础库，以便与 try_compile 和 try_run 命令一起使用。现在，这些命令在其 LINK_LIBRARIES 选项中支持导入的库(自 CMake 2.8.11 起支持 try_compile，自 CMake 3.2 起支持 try_run)。",
	"assets/modules.json.CMakeFindDependencyMacro": "``find_dependency()`` 宏可包装对包依赖项的 :command:`find_package` 调用。",
	"assets/modules.json.CMakeFindFrameworks": "用于查找 OSX 框架的帮助程序模块",
	"assets/modules.json.CMakeFindPackageMode": "在使用 --find-package <Find-Package Tool Mode> 调用时，cmake 将执行此文件。它要求使用 -D 设置以下变量:",
	"assets/modules.json.CMakeForceCompiler": "当 CMake 无法自动检测编译器标识时，此模块提供的宏曾经用于交叉编译工具链文件。自引入此模块引入，CMake 的编译器标识功能已得到改进，现在可以通过学习来识别任何编译器。此外，CMake 通过编译器检测到的信息套件现在非常广泛，已无法由使用这些宏的工具链文件提供。",
	"assets/modules.json.CMakeGraphVizOptions": "CMake 的内置 Graphviz 支持。",
	"assets/modules.json.CMakePackageConfigHelpers": "帮助程序函数，用于创建可由其他项目包含以查找和使用包的配置文件。",
	"assets/modules.json.CMakeParseArguments": "此模块曾经实现了现在由 CMake 本机实现的 cmake_parse_arguments 命令。它现在是一个空占位符，用于与包含它的项目兼容，以从 CMake 3.4 及更低版本获取命令。",
	"assets/modules.json.CMakePrintHelpers": "用于打印属性和变量的便捷功能，例如可用于调试。",
	"assets/modules.json.CMakePrintSystemInformation": "打印系统信息。",
	"assets/modules.json.CMakePushCheckState": "此模块定义了三个宏: CMAKE_PUSH_CHECK_STATE()、CMAKE_POP_CHECK_STATE() 和 CMAKE_RESET_CHECK_STATE()。这些宏可用于保存、还原和重置(即清除内容)由 CMake 附带的各种 Check-files (如 check_function_exists() 等)所使用的变量的状态 CMAKE_REQUIRED_FLAGS、CMAKE_REQUIRED_DEFINITIONS、CMAKE_REQUIRED_LINK_OPTIONS、CMAKE_REQUIRED_LIBRARIES、CMAKE_REQUIRED_INCLUDES 和CMAKE_EXTRA_INCLUDE_FILES。变量内容会推送到堆栈上，并且支持多次推送。这在 Find-module 中执行此类测试等情况下非常有用，这时必须对它们进行设置，但在执行 Find-module 之后，它们应具有与之前相同的值。",
	"assets/modules.json.CMakeVerifyManifest": "CMakeVerifyManifest.cmake",
	"assets/modules.json.CPack": "为二进制安装程序和源包配置生成器。",
	"assets/modules.json.CPackArchive": "CPack 存档生成器的文档已移动到此处: CPack 存档生成器",
	"assets/modules.json.CPackBundle": "CPack 捆绑包生成器的文档已移动到此处: CPack 捆绑包生成器",
	"assets/modules.json.CPackComponent": "为二进制安装程序和源包配置组件。",
	"assets/modules.json.CPackCygwin": "CPack Cygwin 生成器的文档已移动到此处: CPack Cygwin 生成器",
	"assets/modules.json.CPackDeb": "CPack DEB 生成器的文档已移动到此处: CPack DEB 生成器",
	"assets/modules.json.CPackDMG": "CPack DragNDrop 生成器的文档已移动到此处: CPack DragNDrop 生成器",
	"assets/modules.json.CPackFreeBSD": "CPack FreeBSD 生成器的文档已移动到此处: CPack FreeBSD 生成器",
	"assets/modules.json.CPackIFW": "此模块可查找 Qt 安装程序框架(QtIFW)提供的命令行实用工具的位置。",
	"assets/modules.json.CPackIFWConfigureFile": "该模块可定义类似 configure_file 的命令，用于配置以 QtIFW/SDK/Creator 样式制作的文件模板。",
	"assets/modules.json.CPackNSIS": "CPack NSIS 生成器的文档已移动到此处: CPack NSIS 生成器",
	"assets/modules.json.CPackNuGet": "CPack NuGet 生成器的文档已移动到此处: CPack NuGet 生成器",
	"assets/modules.json.CPackProductBuild": "CPack productbuild 生成器的文档已移动到此处: CPack productbuild 生成器",
	"assets/modules.json.CPackRPM": "CPack RPM 生成器的文档已移动到此处: CPack RPM 生成器",
	"assets/modules.json.CPackWIX": "CPack WIX 生成器的文档已移动到此处: CPack WIX 生成器",
	"assets/modules.json.CSharpUtilities": "用于简化 CSharp/.NET 目标配置的函数。",
	"assets/modules.json.CTest": "配置项目以使用 CTest/CDash 进行测试",
	"assets/modules.json.CTestCoverageCollectGCOV": "此模块提供了 ctest_coverage_collect_gcov 函数。",
	"assets/modules.json.CTestScriptMode": "此文件在脚本模式(-S)中由 ctest 读取",
	"assets/modules.json.CTestUseLaunchers": "在 CTEST_USE_LAUNCHERS 处于打开状态时设置 RULE_LAUNCH_* 全局属性。",
	"assets/modules.json.Dart": "配置项目以使用 CTest 或旧的 Dart Tcl 客户端进行测试",
	"assets/modules.json.DeployQt4": "用于帮助汇编独立 Qt4 可执行文件的函数。",
	"assets/modules.json.Documentation": "此模块提供了对 VTK 文档框架的支持。它依赖于多个工具(Doxygen、Perl 等)。",
	"assets/modules.json.ExternalData": "管理存储在源树外部的数据文件",
	"assets/modules.json.ExternalProject": "ExternalProject_Add() 函数可创建自定义目标，用于驱动外部项目的下载、更新/修补、配置、生成、安装和测试步骤",
	"assets/modules.json.FeatureSummary": "用于生成已启用/已禁用功能摘要的函数。",
	"assets/modules.json.FetchContent": "使用此模块，可以通过 ExternalProject 模块支持的任何方法在配置时填充内容。与 ExternalProject_Add() 在生成时下载不同，FetchContent 模块会立即提供内容，从而允许配置步骤使用 add_subdirectory()、include() 或 file() 操作等命令中的内容。",
	"assets/modules.json.FindALSA": "查找高级 Linux 声音体系结构(ALSA)",
	"assets/modules.json.FindArmadillo": "查找 Armad C++ 库。Armad 是用于线性代数和科学计算的库。",
	"assets/modules.json.FindASPELL": "尝试查找 ASPELL",
	"assets/modules.json.FindAVIFile": "定位 AVIFILE 库并包含路径",
	"assets/modules.json.FindBacktrace": "查找 backtrace(3)的提供程序。",
	"assets/modules.json.FindBISON": "查找 bison 可执行文件并提供宏以生成自定义生成规则。",
	"assets/modules.json.FindBLAS": "查找基本线性代数子程序(BLAS)库",
	"assets/modules.json.FindBoost": "查找 Boost 包括目录和库",
	"assets/modules.json.FindBullet": "尝试查找 Bullet 物理引擎",
	"assets/modules.json.FindBZip2": "尝试查找 BZip2",
	"assets/modules.json.FindCABLE": "查找 CABLE",
	"assets/modules.json.FindCoin3D": "查找 Coin3D (Open Inventor)",
	"assets/modules.json.FindCUDA": "编译 CUDA 代码已不再必须使用此模块或调用 find_package(CUDA)。而是在对项目命令的顶级调用中命名的语言中列出 CUDA，或使用 CUDA 调用 enable_language 命令。然后，可以直接将 CUDA (.cu)源添加到类似于其他语言的目标。",
	"assets/modules.json.FindCUDAToolkit": "此脚本可定位 NVIDIA CUDA 工具包和关联的库，但无需为给定项目启用 CUDA 语言。此模块不会搜索 NVIDIA CUDA 示例。",
	"assets/modules.json.FindCups": "查找通用 UNIX 打印系统(CUPS)。",
	"assets/modules.json.FindCURL": "查找本机 CURL 标头和库。",
	"assets/modules.json.FindCurses": "查找游标或 ncurses 包含文件和库。",
	"assets/modules.json.FindCVS": "查找并发版本系统(CVS)。",
	"assets/modules.json.FindCxxTest": "查找 CxxTest 单元测试框架。",
	"assets/modules.json.FindCygwin": "查找 Cygwin (一个与 POSIX 兼容且在 Microsoft Windows 上本机运行的环境)",
	"assets/modules.json.FindDart": "查找 DART",
	"assets/modules.json.FindDCMTK": "查找 DICOM 工具包(DCMTK)库和应用程序",
	"assets/modules.json.FindDevIL": "此模块可定位开发人员的映像库。https://openil.sourceforge.net/",
	"assets/modules.json.FindDoxygen": "Doxygen 是一个文档生成工具(请参阅 https://www.doxygen.nl)。此模块可查找 Doxygen 及其支持的一些可选工具:",
	"assets/modules.json.FindEnvModules": "定位环境模块实现，并提供命令以便 CMake 脚本使用它们。这与基于 Lua 的 Lmod 和基于 TCL 的 EnvironmentModules 兼容。",
	"assets/modules.json.FindEXPAT": "查找本机 Expat 标头和库。Expat 是一个使用 C 编写的面向流的 XML 分析程序库。",
	"assets/modules.json.FindFLEX": "查找快速词法分析器(Flex)可执行文件，并提供宏以生成自定义生成规则",
	"assets/modules.json.FindFLTK": "查找快速轻量工具包(FLTK)库",
	"assets/modules.json.FindFLTK2": "查找本机 FLTK 2.0 包含项和库",
	"assets/modules.json.FindFontconfig": "查找 Fontconfig 标头和库。",
	"assets/modules.json.FindFreetype": "查找 FreeType 字体呈现器包含项和库。",
	"assets/modules.json.FindGCCXML": "查找 GCC-XML 前端可执行文件。",
	"assets/modules.json.FindGDAL": "查找地理空间数据抽象库(GDAL)。",
	"assets/modules.json.FindGettext": "查找 GNU gettext 工具",
	"assets/modules.json.FindGIF": "此操作将查找图形交换格式(GIF)库(giflib)",
	"assets/modules.json.FindGit": "该模块定义了以下变量:",
	"assets/modules.json.FindGLEW": "查找 OpenGL 扩展管理库(GLEW)",
	"assets/modules.json.FindGLUT": "查找 OpenGL 实用工具包(GLUT)库和包含文件。",
	"assets/modules.json.FindGnuplot": "此模块可查找 gnuplot",
	"assets/modules.json.FindGnuTLS": "查找 GNU 传输层安全库(gnutls)",
	"assets/modules.json.FindGSL": "查找本机 GNU 科学库(GSL)包含项和库。",
	"assets/modules.json.FindGTest": "定位 Google C++ 测试框架。",
	"assets/modules.json.FindGTK": "查找 GTK、glib 和 GTKGLArea",
	"assets/modules.json.FindGTK2": "查找 GTK2 小组件库以及它的其他几个可选组件，如 gtkmm、glade 和 glademm。",
	"assets/modules.json.FindHDF5": "查找分层数据格式(HDF5)，它是用于读取和写入自描述数组数据的库。",
	"assets/modules.json.FindHg": "从 mercurial 工作副本中提取信息。",
	"assets/modules.json.FindHSPELL": "尝试查找希伯来语拼写检查器(Hspell)和形态学引擎。",
	"assets/modules.json.FindHTMLHelp": "此模块查找 Microsoft HTML 帮助编译器",
	"assets/modules.json.FindIce": "查找 ZeroC Internet 通信引擎(ICE)程序、库和数据文件。",
	"assets/modules.json.FindIconv": "此模块可查找系统上的 iconv() POSIX.1 函数。这些函数可能会在常规 C 库中提供，也可能以其他库的形式在外部提供。",
	"assets/modules.json.FindIcotool": "查找 icotool",
	"assets/modules.json.FindICU": "查找国际 Unicode 组件(ICU)库和程序。",
	"assets/modules.json.FindImageMagick": "查找 ImageMagick，它是用于显示、转换和操作光栅图像的软件套件。",
	"assets/modules.json.FindIntl": "查找 Gettext libintl 标头和库。",
	"assets/modules.json.FindITK": "此模块已不再存在。",
	"assets/modules.json.FindJasper": "查找 Jasper JPEG2000 库。",
	"assets/modules.json.FindJava": "查找 Java",
	"assets/modules.json.FindJNI": "查找 Java 本机接口(JNI)标头和库。",
	"assets/modules.json.FindJPEG": "查找联合照片专家小组(JPEG)库(libjpeg)",
	"assets/modules.json.FindKDE3": "查找 KDE3 包含项和库目录、KDE 预处理器并定义一些宏",
	"assets/modules.json.FindKDE4": "查找 KDE4 并提供为其编译软件所需的所有变量和宏。它按给定的顺序在以下目录中查找 KDE 4:",
	"assets/modules.json.FindLAPACK": "查找线性代数 PACKage (LAPACK)库",
	"assets/modules.json.FindLATEX": "查找 LaTeX",
	"assets/modules.json.FindLibArchive": "查找 libarchive 库和标头。Libarchive 是多格式存档和压缩库。",
	"assets/modules.json.FindLibinput": "查找 libinput 标头和库。",
	"assets/modules.json.FindLibLZMA": "查找 LZMA 压缩算法标头和库。",
	"assets/modules.json.FindLibXml2": "查找 XML 处理库(libxml2)。",
	"assets/modules.json.FindLibXslt": "查找 XSL 转换、可扩展样式表语言转换(XSLT)库(LibXslt)",
	"assets/modules.json.FindLTTngUST": "查找下一代 Linux 跟踪工具包(LTTng-UST)库。",
	"assets/modules.json.FindLua": "定位 Lua 库。",
	"assets/modules.json.FindLua50": "定位 Lua 库。",
	"assets/modules.json.FindLua51": "定位 Lua 库。此模块定义:",
	"assets/modules.json.FindMatlab": "查找 Matlab 或 Matlab 编译器运行时(MCR)，并向 CMake 提供 Matlab 工具、库和编译器。",
	"assets/modules.json.FindMFC": "在 Windows 上查找 Microsoft 基础类库(MFC)",
	"assets/modules.json.FindMotif": "尝试查找 Motif (或 lesstif)",
	"assets/modules.json.FindMPEG": "查找本机 MPEG 包含项和库",
	"assets/modules.json.FindMPEG2": "查找本机 MPEG2 包含项和库",
	"assets/modules.json.FindMPI": "查找消息传递接口(MPI)实现。",
	"assets/modules.json.FindMsys": "查找 MSYS，它是与 POSIX 兼容且在 Microsoft Windows 上本机运行的环境",
	"assets/modules.json.FindODBC": "查找开放式数据库连接(ODBC)包含目录和库。",
	"assets/modules.json.FindOpenACC": "检测编译器提供的 OpenACC 支持。",
	"assets/modules.json.FindOpenAL": "查找开放音频库(OpenAL)。",
	"assets/modules.json.FindOpenCL": "查找开放计算语言(OpenCL)",
	"assets/modules.json.FindOpenGL": "适用于 OpenGL 和 OpenGL 实用工具库(GLU)的 FindModule。",
	"assets/modules.json.FindOpenMP": "查找开放多处理(OpenMP)支持。",
	"assets/modules.json.FindOpenSceneGraph": "查找 OpenSceneGraph (3D 图形应用程序编程接口)",
	"assets/modules.json.FindOpenSP": "尝试查找 OpenSP 库。",
	"assets/modules.json.FindOpenSSL": "查找 OpenSSL 加密库。",
	"assets/modules.json.FindOpenThreads": "OpenThreads 是基于 C++ 的线程库。其最大的用户群似乎为 OpenSceneGraph，因此你可能会注意到我接受 OSGDIR 作为环境路径。我认为这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。",
	"assets/modules.json.Findosg": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgAnimation": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgDB": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgFX": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgGA": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgIntrospection": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgManipulator": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgParticle": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgPresentation": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgProducer": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgQt": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgShadow": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgSim": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgTerrain": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgText": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgUtil": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgViewer": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgVolume": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.FindosgWidget": "这是用于查找 OpenSceneGraph 组件的 Findosg* 套件的一部分。每个组件都是单独的，你必须选择加入每个模块。还必须选择使用 OpenGL 和 OpenThreads (如果需要，还需要选择 Producer)，因为这些模块不会为你执行此操作。此操作的目的是支持你逐步控制自己的系统，以防需要选择退出特定组件或更改特定模块的查找行为(例如，可能因为默认 FindOpenGL 模块不适用于系统)。如果要使用包含所有内容的更方便的模块，请使用 FindOpenSceneGraph 而不是 Findosg*.cmake 模块。",
	"assets/modules.json.Findosg_functions": "此 CMake 文件包含两个宏，可帮助搜索 OSG 库和节点包。有关完整文档，请参阅 FindOpenSceneGraph。",
	"assets/modules.json.FindPackageHandleStandardArgs": "此模块提供的函数旨在用于实现 find_package(<PackageName>) 调用的 Find 模块。",
	"assets/modules.json.FindPackageMessage": "此函数旨在用于 FindXXX.cmake 模块文件。它将为每个唯一查找结果打印一次消息。这对于告知用户找到包的位置非常有用。第一个参数了指定包的名称(XXX)。第二个参数指定要显示的消息。第三个参数列出了有关查找结果的详细信息，以便如果更改结果，将会再次显示该消息。该宏还遵循 find_package 命令的 QUIET 参数。",
	"assets/modules.json.FindPatch": "该模块定义了以下变量:",
	"assets/modules.json.FindPerl": "查找 Perl 解释器。",
	"assets/modules.json.FindPerlLibs": "查找 Perl 库",
	"assets/modules.json.FindPHP4": "查找 PHP4",
	"assets/modules.json.FindPhysFS": "定位 PhysFS 库，此模块定义:",
	"assets/modules.json.FindPike": "查找 Pike",
	"assets/modules.json.FindPkgConfig": "CMake 的 pkg-config 模块。",
	"assets/modules.json.FindPNG": "查找 PNG 图像格式的官方参考库 libpng。",
	"assets/modules.json.FindPostgreSQL": "查找 PostgreSQL 安装。",
	"assets/modules.json.FindProducer": "虽然 Producer 不是 OpenSceneGraph 的直接组成部分，但其主要使用者是 OSG，因此我认为此部分 Findosg* 套件可用于查找 OpenSceneGraph 组件。你会注意到我接受 OSGDIR 作为环境路径。",
	"assets/modules.json.FindProtobuf": "定位并配置 Google 协议缓冲区库。",
	"assets/modules.json.FindPython": "查找 Python 解释器、编译器和开发环境(包括目录和库)。",
	"assets/modules.json.FindPython2": "查找 Python 2 解释器、编译器和开发环境(包括目录和库)。",
	"assets/modules.json.FindPython3": "查找 Python 3 解释器、编译器和开发环境(包括目录和库)。",
	"assets/modules.json.FindPythonInterp": "查找 Python 解释器",
	"assets/modules.json.FindPythonLibs": "查找 python 库",
	"assets/modules.json.FindQt": "搜索所有已安装的 Qt3 或 Qt4 版本。",
	"assets/modules.json.FindQt3": "定位 Qt 包含路径和库",
	"assets/modules.json.FindQt4": "此模块可用于查找 Qt4。最重要的问题是 Qt4 qmake 是通过系统路径提供的。然后，此 qmake 用于检测几乎其他所有内容。此模块定义了许多导入的目标、宏和变量。",
	"assets/modules.json.FindQuickTime": "定位 QuickTime，此模块定义了:",
	"assets/modules.json.FindRTI": "尝试查找 M&S HLA RTI 库",
	"assets/modules.json.FindRuby": "查找 Ruby",
	"assets/modules.json.FindSDL": "定位 SDL 库",
	"assets/modules.json.FindSDL_gfx": "定位 SDL_gfx 库",
	"assets/modules.json.FindSDL_image": "定位 SDL_image 库",
	"assets/modules.json.FindSDL_mixer": "定位 SDL_mixer 库",
	"assets/modules.json.FindSDL_net": "定位 SDL_net 库",
	"assets/modules.json.FindSDL_sound": "定位 SDL_sound 库",
	"assets/modules.json.FindSDL_ttf": "定位 SDL_ttf 库",
	"assets/modules.json.FindSelfPackers": "查找 upx",
	"assets/modules.json.FindSQLite3": "查找 SQLite 库 v3",
	"assets/modules.json.FindSquish": "-- 典型用法",
	"assets/modules.json.FindSubversion": "从子版本工作副本中提取信息",
	"assets/modules.json.FindSWIG": "查找简化包装器和接口生成器(SNO)可执行文件。",
	"assets/modules.json.FindTCL": "已移除 TK_INTERNAL_PATH。",
	"assets/modules.json.FindTclsh": "查找 tclsh",
	"assets/modules.json.FindTclStub": "已移除 TCL_STUB_LIBRARY_DEBUG 和 TK_STUB_LIBRARY_DEBUG。",
	"assets/modules.json.FindThreads": "此模块确定系统的线程库。",
	"assets/modules.json.FindTIFF": "查找 TIFF 库(libtiff、https://libtiff.gitlab.io/libtiff/)。",
	"assets/modules.json.FindUnixCommands": "查找 Unix 命令，包括 Cygwin 中的命令",
	"assets/modules.json.FindVTK": "此模块已不再存在。",
	"assets/modules.json.FindVulkan": "查找 Vulkan，它是一种低开销的跨平台 3D 图形和计算 API。",
	"assets/modules.json.FindWget": "查找 wget",
	"assets/modules.json.FindWish": "查找 wish 安装",
	"assets/modules.json.FindwxWidgets": "查找 wxWidgets (也称为 wxWindows)安装。",
	"assets/modules.json.FindwxWindows": "查找 wxWindows (wxWidgets)安装",
	"assets/modules.json.FindX11": "查找 X11 安装",
	"assets/modules.json.FindXalanC": "查找 Apache Xalan-C++ XSL 转换处理器标头和库。",
	"assets/modules.json.FindXCTest": "帮助创建和执行 XCTest 捆绑包的函数。",
	"assets/modules.json.FindXercesC": "查找验证 XML 分析程序标头和库的 Apache Xcerces-C++。",
	"assets/modules.json.FindXMLRPC": "查找 xmlrpc",
	"assets/modules.json.FindZLIB": "查找本机 ZLIB 包含项和库。",
	"assets/modules.json.FortranCInterface": "Fortran/C 接口检测",
	"assets/modules.json.GenerateExportHeader": "用于生成库的导出宏的函数",
	"assets/modules.json.GetPrerequisites": "用于分析和列出可执行文件先决条件的函数。",
	"assets/modules.json.GNUInstallDirs": "定义 GNU 标准安装目录",
	"assets/modules.json.GoogleTest": "此模块定义了用于帮助使用 Google Test 基础结构的函数。提供了两种用于添加测试的机制。gtest_add_tests 最初通过 find_package(GTest)已存在一段时间。gtest_discover_tests 则是在 CMake 3.10 中引入的。",
	"assets/modules.json.InstallRequiredSystemLibraries": "包括此模块以搜索编译器提供的系统运行时库并为其添加安装规则。在包括模块以调整行为之前，可以设置一些可选变量:",
	"assets/modules.json.MacroAddFileDependencies": "不要在新代码中使用此命令。它只是以下内容的包装器:",
	"assets/modules.json.ProcessorCount": "ProcessorCount(var)",
	"assets/modules.json.SelectLibraryConfigurations": "此宏采用库基名称作为参数，并将为变量选择合适的值",
	"assets/modules.json.SquishTestScript": "此脚本使用 Squish 启动 GUI 测试。不应直接调用脚本；而应通过在 FindSquish.cmake 中定义的 SQUISH_ADD_TEST 宏来访问它。",
	"assets/modules.json.TestBigEndian": "检查目标体系结构是 big endian 还是little endian。",
	"assets/modules.json.TestCXXAcceptsFlag": "检查 CXX 编译器是否接受标志。",
	"assets/modules.json.TestForANSIForScope": "检查 ANSI 以了解支持范围",
	"assets/modules.json.TestForANSIStreamHeaders": "测试 ANSI 流标头 iostream 等的编译器支持。",
	"assets/modules.json.TestForSSTREAM": "测试 ANSI sstream 标头的编译器支持",
	"assets/modules.json.TestForSTDNamespace": "测试 std:: 命名空间支持",
	"assets/modules.json.UseEcos": "此模块定义了生成 eCos 应用程序所需的变量和宏。",
	"assets/modules.json.UseJava": "此文件提供对 Java 的支持。它假定已加载 FindJava。有关如何将 Java 加载到 CMake 项目中的信息，请参阅 FindJava。",
	"assets/modules.json.UseJavaClassFilelist": "此模块以前是错误记录的，并且本意从来不是由项目代码直接包含。请参阅 :module:`UseJava` 模块。",
	"assets/modules.json.UseJavaSymlinks": "此模块以前是错误记录的，并且本意从来不是由项目代码直接包含。请参阅 :module:`UseJava` 模块。",
	"assets/modules.json.UsePkgConfig": "CMake 的 pkg-config 模块已过时，请改用 FindPkgConfig。",
	"assets/modules.json.UseSWIG": "此文件提供对 SWIG 的支持。假定已加载 FindSWIG 模块。",
	"assets/modules.json.UsewxWidgets": "便利性包含，用于使用 wxWidgets 库。",
	"assets/modules.json.Use_wxWindows": "此便利性包含可查找是否安装了 wxWindows 并设置适当的库、incdir、标志等。作者 Jan Woetzel <jw -at- mip.informatik.uni-kiel.de> (07/2003)",
	"assets/modules.json.WriteBasicConfigVersionFile": "自版本 3.0 起弃用:使用模块 CMakePackageConfigHelpers 中的相同命令 write_basic_package_version_file()。",
	"assets/modules.json.WriteCompilerDetectionHeader": "此模块提供函数 write_compiler_detection_header()。"
}