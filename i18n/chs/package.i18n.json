/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"cmake-tools.command.cmake.openCMakePresets.title": "打开 CMakePresets.json",
	"cmake-tools.command.cmake.addConfigurePreset.title": "添加配置预设",
	"cmake-tools.command.cmake.addBuildPreset.title": "添加生成预设",
	"cmake-tools.command.cmake.addTestPreset.title": "添加测试预设",
	"cmake-tools.command.cmake.addPackagePreset.title": "添加包预设",
	"cmake-tools.command.cmake.addWorkflowPreset.title": "添加工作流预设",
	"cmake-tools.command.cmake.selectConfigurePreset.title": "选择配置预设",
	"cmake-tools.command.cmake.viewConfigureSettings.title": "查看替代配置预设的设置",
	"cmake-tools.command.cmake.selectBuildPreset.title": "选择生成预设",
	"cmake-tools.command.cmake.viewBuildSettings.title": "查看替代生成预设的设置",
	"cmake-tools.command.cmake.selectTestPreset.title": "选择测试预设",
	"cmake-tools.command.cmake.viewTestSettings.title": "查看替代测试预设的设置",
	"cmake-tools.command.cmake.viewPackageSettings.title": "查看替代包预设的设置",
	"cmake-tools.command.cmake.selectPackagePreset.title": "选择包预设",
	"cmake-tools.command.cmake.selectWorkflowPreset.title": "选择工作流预设",
	"cmake-tools.command.cmake.viewLog.title": "打开 CMake Tools 日志文件",
	"cmake-tools.command.cmake.logDiagnostics.title": "日志诊断",
	"cmake-tools.command.cmake.editKits.title": "编辑用户本地 CMake 工具包",
	"cmake-tools.command.cmake.scanForKits.title": "扫描工具包",
	"cmake-tools.command.cmake.scanForCompilers.title": "扫描编译器",
	"cmake-tools.command.cmake.selectKit.title": "选择工具包",
	"cmake-tools.command.cmake.setVariant.title": "选择变量",
	"cmake-tools.command.cmake.setVariantAll.title": "为所有项目选择变量",
	"cmake-tools.command.cmake.configure.title": "配置",
	"cmake-tools.command.cmake.configureWithDebugger.title": "使用 CMake 调试器进行配置",
	"cmake-tools.command.cmake.configureAll.title": "配置所有项目",
	"cmake-tools.command.cmake.configureAllWithDebugger.title": "使用 CMake 调试器配置所有项目",
	"cmake-tools.command.cmake.showConfigureCommand.title": "显示配置命令",
	"cmake-tools.command.cmake.build.title": "生成",
	"cmake-tools.command.cmake.buildAll.title": "生成所有项目",
	"cmake-tools.command.cmake.showBuildCommand.title": "显示生成命令",
	"cmake-tools.command.cmake.compileFile.title": "编译活动文件",
	"cmake-tools.command.cmake.outline.compileFile.title": "编译文件",
	"cmake-tools.command.cmake.install.title": "安装",
	"cmake-tools.command.cmake.installAll.title": "安装所有项目",
	"cmake-tools.command.cmake.buildWithTarget.title": "生成目标",
	"cmake-tools.command.cmake.setDefaultTarget.title": "设置生成目标",
	"cmake-tools.command.cmake.cleanConfigure.title": "删除缓存并重新配置",
	"cmake-tools.command.cmake.cleanConfigureWithDebugger.title": "删除缓存并使用 CMake 调试器重新配置",
	"cmake-tools.command.cmake.cleanConfigureAll.title": "删除缓存并重新配置所有项目",
	"cmake-tools.command.cmake.cleanConfigureAllWithDebugger.title": "删除缓存并使用 CMake 调试器重新配置所有项目",
	"cmake-tools.command.cmake.editCacheUI.title": "编辑 CMake 缓存(UI)",
	"cmake-tools.command.cmake.outline.cleanConfigure.title": "清理重新配置",
	"cmake-tools.command.cmake.outline.cleanConfigureWithDebugger.title": "使用 CMake 调试器清理重新配置",
	"cmake-tools.command.cmake.outline.cleanConfigureAll.title": "清理所有项目并重新配置",
	"cmake-tools.command.cmake.outline.cleanConfigureAllWithDebugger.title": "使用 CMake 调试器清理重新配置所有项目",
	"cmake-tools.command.cmake.clean.title": "清理",
	"cmake-tools.command.cmake.cleanAll.title": "清理所有项目",
	"cmake-tools.command.cmake.cleanRebuild.title": "清理重新生成",
	"cmake-tools.command.cmake.cleanRebuildAll.title": "清理所有项目并重新生成",
	"cmake-tools.command.cmake.ctest.title": "运行测试",
	"cmake-tools.command.cmake.ctestAll.title": "为所有项目运行测试",
	"cmake-tools.command.cmake.cpack.title": "运行 CPack",
	"cmake-tools.command.cmake.cpackAll.title": "对所有项目运行 CPack",
	"cmake-tools.command.cmake.workflow.title": "运行工作流",
	"cmake-tools.command.cmake.workflowAll.title": "为所有项目运行工作流",
	"cmake-tools.command.cmake.revealTestExplorer.title": "显示测试资源管理器",
	"cmake-tools.command.cmake.refreshTests.title": "刷新测试",
	"cmake-tools.command.cmake.refreshTestsAll.title": "刷新所有项目的测试",
	"cmake-tools.command.cmake.editCache.title": "编辑 CMake 缓存",
	"cmake-tools.command.cmake.quickStart.title": "快速入门",
	"cmake-tools.command.cmake.debugTarget.title": "调试",
	"cmake-tools.command.cmake.debugTargetAll.title": "调试所有项目",
	"cmake-tools.command.cmake.launchTarget.title": "运行但不调试",
	"cmake-tools.command.cmake.launchTargetAll.title": "运行所有项目但不调试",
	"cmake-tools.command.cmake.selectLaunchTarget.title": "设置调试目标",
	"cmake-tools.command.cmake.stop.title": "取消生成",
	"cmake-tools.command.cmake.stopAll.title": "取消所有项目的生成",
	"cmake-tools.command.cmake.resetState.title": "重置 CMake Tools 扩展状态(用于故障排除)",
	"cmake-tools.command.cmake.openSettings.title": "打开 CMake 工具扩展设置",
	"cmake-tools.command.cmake.selectActiveFolder.title": "选择活动文件夹",
	"cmake-tools.command.cmake.outline.runUtilityTarget.title": "运行实用工具",
	"cmake-tools.command.cmake.outline.debugTarget.title": "调试",
	"cmake-tools.command.cmake.outline.launchTarget.title": "在终端中运行",
	"cmake-tools.command.cmake.outline.setDefaultTarget.title": "设置为生成目标",
	"cmake-tools.command.cmake.outline.setLaunchTarget.title": "设置为启动/调试目标",
	"cmake-tools.command.cmake.outline.revealInCMakeLists.title": "打开 CMakeLists.txt",
	"cmake-tools.command.cmake.folders.setActiveFolder.title": "设置活动文件夹",
	"cmake-tools.configuration.title": "CMake 工具配置",
	"cmake-tools.configuration.cmake.cmakePath.description": "要使用的 CMake 可执行文件的名称/路径。",
	"cmake-tools.configuration.cmake.buildDirectory.description": "CMake 生成文件将转到其中的目录。",
	"cmake-tools.configuration.cmake.installPrefix.description": "CMake 安装文件将转到其中的目录。",
	"cmake-tools.configuration.cmake.sourceDirectory.description": "指向 CMakeLists.txt 根目录/目录的路径或路径数组。",
	"cmake-tools.configuration.cmake.saveBeforeBuild.description": "在生成前保存打开的文件。",
	"cmake-tools.configuration.cmake.buildBeforeRun.description": "请先生成目标然后再运行目标。",
	"cmake-tools.configuration.cmake.clearOutputBeforeBuild.description": "在每次生成前清除生成输出。",
	"cmake-tools.configuration.cmake.configureSettings.description": "要在命令行上设置的 CMake 变量。此设置特定于工具包，不会用于 CMake 预设。",
	"cmake-tools.configuration.cmake.cacheInit.string.description": "缓存初始化 CMake 文件的路径。",
	"cmake-tools.configuration.cmake.cacheInit.array.description": "缓存初始值设定项文件的列表。",
	"cmake-tools.configuration.cmake.cacheInit.array.string.description": "缓存初始化 CMake 文件。",
	"cmake-tools.configuration.cmake.cacheInit.overall.description": "提供缓存初始化 CMake 文件。",
	"cmake-tools.configuration.cmake.preferredGenerators.description": "要在配置时使用的首选 CMake 生成器(按列表中的顺序尝试)。",
	"cmake-tools.configuration.cmake.generator.description": "要使用的 CMake 生成器。",
	"cmake-tools.configuration.cmake.toolset.description": "要在配置时使用的 CMake 工具集。",
	"cmake-tools.configuration.cmake.platform.description": "要在配置时使用的 CMake 平台。",
	"cmake-tools.configuration.cmake.configureArgs.description": "要在配置时传递给 CMake 的其他参数。使用 CMake 预设时，这些参数会临时追加到活动配置预设提供的参数中。",
	"cmake-tools.configuration.cmake.buildArgs.description": "要在生成时传递给 CMake 的其他参数。使用 CMake 预设时，这些参数会临时追加到活动生成预设提供的参数中。",
	"cmake-tools.configuration.cmake.buildToolArgs.description": "要在生成时传递给基础生成工具的其他参数。使用 CMake 预设时，这些参数会临时追加到活动生成预设提供的参数，以调用生成工具。",
	"cmake-tools.configuration.cmake.parallelJobs.description": "并行生成作业的数目。使用 0 以自动检测 CPU 数。将此值设置为 1 将省略底层构建命令中的并行性标志 (-j)，这会对构建并行性产生生成器依赖影响。",
	"cmake-tools.configuration.cmake.ctestPath.description": "CTest 可执行文件的路径。如果为 null，则从 cmake.cmakePath 推理(建议保留为 null)。",
	"cmake-tools.configuration.cmake.cpackPath.description": "CPack 可执行文件的路径。如果为 null，则将根据 cmake.cmakePath 推断(建议保留为 null)。当使用工具包而不是预设时，将会忽略。",
	"cmake-tools.configuration.cmake.ctest.parallelJobs.markdownDescription": "并行测试作业的数量。使用零可以使用 `#cmake.parallelJobs#` 的值。这仅适用于 `#cmake.ctest.allowParallelJobs#` 设置为 `true` 的情况。",
	"cmake-tools.configuration.cmake.ctest.allowParallelJobs.description": "允许并行运行 ctest，但结果输出可能会因此而乱码，并且测试资源管理器可能无法准确地反映测试进度。",
	"cmake-tools.configuration.cmake.ctest.testExplorerIntegrationEnabled.description": "是否启用与测试资源管理器的集成。如果希望使用其他扩展进行测试集成，这有助于禁用。",
	"cmake-tools.configuration.cmake.parseBuildDiagnostics.description": "分析编译器输出以查找警告和错误。",
	"cmake-tools.configuration.cmake.enabledOutputParsers.description": "要使用的输出分析程序。支持的分析程序 `cmake`、`gcc`、`gnuld`(适用于 GNULD 样式的 inker 输出)、`msvc`(适用于 Microsoft Visual C++)、`ghs`(适用于 Green Hills 编译器，具有 --no_wrap_diagnostics --brief_diagnostics)，以及 `diab`(适用于 Wind River Diab 编译器)。",
	"cmake-tools.configuration.cmake.debugConfig.description": "要在调试目标时使用的调试配置。",
	"cmake-tools.configuration.cmake.debugConfig.symbolSearchPath.description": "Visual Studio 调试程序符号搜索路径。",
	"cmake-tools.configuration.cmake.debugConfig.additionalSOLibSearchPath.description": "用于搜索 .so 文件的 GDB 或 LLDB 的路径。",
	"cmake-tools.configuration.cmake.debugConfig.externalConsole.description": "启动程序的外部控制台。",
	"cmake-tools.configuration.cmake.debugConfig.console.description": "启动调试目标的位置。如果未定义，则默认为 `internalConsole`。",
	"cmake-tools.configuration.cmake.debugConfig.console.internalConsole.description": "输出到 VS Code 调试控制台。这不支持读取控制台输入(例如:`std::cin` 或 `scanf`)。",
	"cmake-tools.configuration.cmake.debugConfig.console.integratedTerminal.description": "VS Code 的集成终端。",
	"cmake-tools.configuration.cmake.debugConfig.console.externalTerminal.description": "控制台应用程序将在外部终端窗口中启动。该窗口将在重新启动方案中重复使用，并且在应用程序退出时不会自动消失。",
	"cmake-tools.configuration.cmake.debugConfig.console.newExternalWindow.description": "控制台应用程序将在自身的外部控制台窗口中启动，该窗口将在应用程序停止时结束。非控制台应用程序将在没有终端的情况下运行，并且 stdout/stderr 将被忽略。",
	"cmake-tools.configuration.cmake.debugConfig.logging.description": "告知应将哪些类型的消息记录到控制台。",
	"cmake-tools.configuration.cmake.debugConfig.visualizerFile.description": "调试时要使用的 .natvis 文件。",
	"cmake-tools.configuration.cmake.debugConfig.args.description": "要传递给程序命令行的参数。",
	"cmake-tools.configuration.cmake.debugConfig.cwd.description": "设置程序的工作目录。",
	"cmake-tools.configuration.cmake.debugConfig.environment.name.description": "环境变量的名称。",
	"cmake-tools.configuration.cmake.debugConfig.environment.value.description": "环境变量的值。",
	"cmake-tools.configuration.cmake.debugConfig.miDebuggerPath.description": "gdb 或 lldb 调试程序的路径。",
	"cmake-tools.configuration.cmake.debugConfig.stopAtEntry.description": "在目标的入口点处停止",
	"cmake-tools.configuration.cmake.debugConfig.setupCommands.description": "用于设置 gdb 或 lldb 的命令。",
	"cmake-tools.configuration.cmake.debugConfig.setupCommands.text.description": "要运行的命令。",
	"cmake-tools.configuration.cmake.debugConfig.setupCommands.description.description": "命令的说明。",
	"cmake-tools.configuration.cmake.defaultVariants.overall.description": "配置默认变量设置。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.description": "生成类型。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.debug.long": "禁用优化 - 包括调试信息。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.release.long": "进行优化，提高速度 - 排除调试信息。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.minsize.long": "优化最小二进制大小 - 排除调试信息。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.reldeb.long": "进行优化，提高速度 - 包括调试信息。",
	"cmake-tools.configuration.cmake.ctestArgs.description": "要传递给 CTest 的其他参数。使用 CMake 预设时，这些参数会临时添加到活动测试预设提供的参数中。",
	"cmake-tools.configuration.cmake.ctestDefaultArgs.description": "默认情况下传递给 CTest 的参数。",
	"cmake-tools.configuration.cmake.environment.description": "要在运行 CMake 命令时设置的环境变量。使用 CMake 预设时，这些内容会临时添加到用于 CMake 命令的环境中。",
	"cmake-tools.configuration.cmake.environment.additionalProperties.description": "环境变量的值。",
	"cmake-tools.configuration.cmake.configureEnvironment.description": "要在配置过程中传递给 CMake 的环境变量。使用 CMake 预设时，这些内容会临时添加到活动配置预设提供的环境中。",
	"cmake-tools.configuration.cmake.buildEnvironment.description": "要在生成过程中传递给 CMake 的环境变量。使用 CMake 预设时，这些内容会临时添加到活动生成预设提供的环境中。",
	"cmake-tools.configuration.cmake.testEnvironment.description": "要传递给 CTest 的环境变量。使用 CMake 预设时，这些内容会临时添加到活动测试预设提供的环境中。",
	"cmake-tools.configuration.cmake.cpackArgs.description": "要传递给 CPack 的其他参数 (仅当使用预设时，工具包不支持)。这些参数会临时添加到活动包预设提供的参数中。",
	"cmake-tools.configuration.cmake.cpackEnvironment.description": "使用 CPack 进行打包时要设置的环境变量 (仅当使用预设时，工具包不支持)。这些临时添加到用于 CPack 运行的环境中。",
	"cmake-tools.configuration.cmake.mingwSearchDirs.description": "可在其中安装 MinGW 的目录。",
	"cmake-tools.configuration.cmake.additionalCompilerSearchDirs.description": "用于搜索编译器的其他目录。",
	"cmake-tools.configuration.cmake.searchDirs.items.description": "目录路径。",
	"cmake-tools.configuration.cmake.emscriptenSearchDirs.description": "可在其中安装 Emscripten 的目录。",
	"cmake-tools.configuration.cmake.mergedCompileCommands.description": "以递归方式收集和合并在 cmake.buildDirectory 中找到的所有compile_commands.json。",
	"cmake-tools.configuration.cmake.copyCompileCommands.description": "成功配置后将 compile_commands.json 复制到此位置。",
	"cmake-tools.configuration.cmake.configureOnOpen.description": "在 CMake 项目目录打开时自动对其进行配置。",
	"cmake-tools.configuration.cmake.configureOnEdit.description": "保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，自动配置 CMake 项目目录。",
	"cmake-tools.configuration.cmake.setBuildTypeOnMultiConfig.description": "在多配置生成器上也设置 CMAKE_BUILD_TYPE。",
	"cmake-tools.configuration.cmake.skipConfigureIfCachePresent.description": "如果存在缓存，则跳过配置进程。",
	"cmake-tools.configuration.cmake.cmakeCommunicationMode": "用于在扩展和 CMake 之间进行通信的协议。",
	"cmake-tools.configuration.cmake.showSystemKits.description": "在工具包选择中包括系统工具包。",
	"cmake-tools.configuration.cmake.ignoreKitEnv.description": "运行 CMake 命令时，请勿使用工具包环境变量。",
	"cmake-tools.configuration.cmake.buildTask.description": "使用 tasks.json 生成，而非使用内部进程。",
	"cmake-tools.configuration.cmake.outputLogEncoding.description": "来自外部命令的输出的编码(例如 cmake -- build)。",
	"cmake-tools.configuration.cmake.enableTraceLogging.description": "对文件和控制台启用跟踪日志记录(噪音很大)。",
	"cmake-tools.configuration.cmake.autoSelectActiveFolder.description": "自动选择活动文件夹。",
	"cmake-tools.configuration.cmake.touchbar.advanced.description": "配置扩展如何在 MacBook 触摸栏上显示按钮的高级设置。",
	"cmake-tools.configuration.cmake.touchbar.visibility.description": "配置扩展在 MacBook 触控栏上显示按钮的方式。",
	"cmake-tools.configuration.cmake.touchbar.visibility.default.description": "在支持的系统上显示触控栏按钮。",
	"cmake-tools.configuration.cmake.touchbar.visibility.hidden.description": "不显示触控栏按钮。",
	"cmake-tools.configuration.cmake.showOptionsMovedNotification": "启用有关移动到项目状态视图的状态栏选项的通知，以便在扩展启动时显示。",
	"cmake-tools.configuration.cmake.showConfigureWithDebuggerNotification": "启用弹出窗口，询问用户在配置失败时是否要使用 CMake 调试器进行配置。",
	"cmake-tools.configuration.cmake.showNotAllDocumentsSavedQuestion": "启用弹出窗口，以询问用户是否要在一些文件可能未保存的情况下继续生成。如果未启用，则将继续生成。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.visible.description": "以完整大小显示状态栏选项。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.icon.description": "仅显示状态栏选项的图标。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.compact.markdownDescription": "显示状态栏选项，其中文本截断为 `#cmake.status.advanced.statusBarLength#` 中指定的长度(默认为 20)。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.variant.compact.description": "显示状态栏选项，其中移除了状态消息。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.hidden.description": "隐藏状态栏选项。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.inherit.markdownDescription": "如果更常规的 `#cmake.options.statusBarVisibility#` 设置设为 `hidden`，则此设置默认为 `#cmake.options.advanced.inheritDefault#` 设置中设置的内容，否则将继承 `#cmake.options.statusBarVisibility#` 设置。",
	"cmake-tools.configuration.cmake.options.advanced.inheritDefault.markdownDescription": "如果 `#cmake.options.advanced.statusBarVisibility#` 设置为 `hidden`，则配置 `#cmake.options.advanced.statusBarVisibility#` 设置的 `inherit` 选项的默认值。这与 `#cmake.options.advanced.statusBarVisibility#` 设置具有相同的选项，只是去掉了 `inherit` 选项。",
	"cmake-tools.configuration.cmake.options.statusBarVisibility.markdownDescription": "配置扩展在状态栏中显示选项的方式。更具体的 `#cmake.options.advanced.statusBarVisibility#` 设置可能会覆盖这些设置。[详细信息](https://aka.ms/cmaketoolsoptionsconfiguration)。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarVisibility.markdownDescription": "配置各个状态栏选项的设置。这些设置将覆盖更常规的 `#cmake.options.statusBarVisibility#` 设置。",
	"cmake-tools.configuration.cmake.options.advanced.projectStatusVisibility.visible.description": "在项目状态视图中显示节点。",
	"cmake-tools.configuration.cmake.options.advanced.projectStatusVisibility.hidden.description": "在项目状态视图中隐藏节点及其子级。",
	"cmake-tools.configuration.cmake.options.advanced.markdownDescription": "配置单个项目状态视图和状态栏选项的设置。这些设置可能会覆盖更通用的 `#cmake.options.statusBarVisibility#` 设置。[详细信息](https://aka.ms/cmaketoolsoptionsconfiguration)。",
	"cmake-tools.configuration.cmake.options.advanced.projectStatusVisibility.description": "配置扩展如何显示此选项的项目状态视图。",
	"cmake-tools.configuration.cmake.options.advanced.ctest.color.description": "根据测试结果启用此选项的颜色更改。",
	"cmake-tools.configuration.cmake.options.advanced.cpack.color.description": "根据 cpack 结果启用此选项的颜色更改。",
	"cmake-tools.configuration.cmake.options.advanced.workflow.color.description": "根据工作流运行结果启用此选项的颜色更改。",
	"cmake-tools.configuration.cmake.options.advanced.statusBarLength.markdownDescription": "当设置为 `compact` 模式时，配置状态栏中可见文本的最大长度。",
	"cmake-tools.configuration.views.cmake.folders.description": "文件夹",
	"cmake-tools.configuration.views.cmake.projectStatus.description": "项目状态",
	"cmake-tools.configuration.views.cmake.pinnedCommandsWelcome.description": "尚未固定任何 CMake 命令。\n[添加命令](command:cmake.pinnedCommands.add)",
	"cmake-tools.configuration.views.cmake.outline.description": "项目大纲",
	"cmake-tools.configuration.views.cmake.pinnedCommands.description": "固定的命令",
	"cmake-tools.configuration.cmake.additionalKits.description": "自定义工具包文件的路径数组。",
	"cmake-tools.configuration.cmake.revealLog.description": "配置用于显示日志并聚焦于输出通道的设置。",
	"cmake-tools.configuration.cmake.revealLog.focus.description": "将显示日志，并且输出通道会占用光标焦点。",
	"cmake-tools.configuration.cmake.revealLog.always.description": "将显示日志，但输出通道不会占用光标焦点。",
	"cmake-tools.configuration.cmake.revealLog.never.description": "日志既不显示也不占据焦点。",
	"cmake-tools.configuration.cmake.exportCompileCommandsFile.description": "支持导出 compile_commands.json。仅在工具包场景中使用。在预设场景中，请使用 CMakePresets.json 设置它",
	"cmake-tools.configuration.cmake.useCMakePresets.description": "使用 CMakePresets.json 配置驱动器 CMake 配置、生成和测试。使用 CMakePresets.json 时，将忽略工具包、变量和 settings.json 中的某些设置。",
	"cmake-tools.configuration.cmake.allowCommentsInPresetsFile.description": "允许使用 JSON 扩展，如 CMakePresets.json 中的注释。请注意，如果使用非标准 JSON，则其他 IDE 或命令行可能认为 CMakePresets.json 文件无效。",
	"cmake-tools.configuration.cmake.allowUnsupportedPresetsVersions.description": "支持使用预设文件，这些文件使用的是 CMake Tools 扩展当前不支持的版本中的功能。将忽略未知属性和宏。",
	"cmake-tools.configuration.cmake.ignoreCMakeListsMissing.description": "如果为 `true`，则当在工作区中找到 CMakeLists.txt 文件，但未在根文件夹中找到时，扩展将不会要求用户选择 CMakeLists.txt 文件以进行配置。",
	"cmake-tools.configuration.cmake.launchBehavior.description": "控制启动目标时启动终端将执行的操作。",
	"cmake-tools.configuration.cmake.automaticReconfigure.description": "当工具包或配置预设发生更改时，将自动配置 CMake 项目目录。",
	"cmake-tools.configuration.cmake.pinnedCommands.description": "要固定的 CMake 命令的列表。",
	"cmake-tools.configuration.cmake.enableAutomaticKitScan.description": "未选择工具包时启用工具包的自动扫描。这只会在未使用 CMake 预设时生效。",
	"cmake-tools.debugger.pipeName.description": "用于调试器通信的管道(在 Windows 上)或域套接字(在 Unix 上)的名称。",
	"cmake-tools.debugger.clean.description": "在配置之前清理。",
	"cmake-tools.debugger.configureAll.description": "为所有项目配置。",
	"cmake-tools.debugger.dapLog.description": "应记录调试器 DAP 日志的位置。",
	"cmake-tools.debugger.scriptPath.description": "要调试的脚本的路径。",
	"cmake-tools.debugger.scriptArgs.description": "要调试的脚本的参数。",
	"cmake-tools.debugger.scriptEnv.description": "要使用的脚本的环境。",
	"cmake-tools.debugger.name": "名称",
	"cmake-tools.debugger.value": "值",
	"cmake-tools.debugger.debugType.description": "CMake 调试会话的类型。可用选项为:“configure”、“external”、“script”。",
	"cmake-tools.debugger.configure.snippet.label": "CMake: 配置",
	"cmake-tools.debugger.configure.snippet.description": "调试 CMake 项目配置",
	"cmake-tools.debugger.configure.snippet.body.name": "CMake: 配置项目",
	"cmake-tools.debugger.script.snippet.label": "CMake: 脚本",
	"cmake-tools.debugger.script.snippet.description": "调试 CMake 脚本",
	"cmake-tools.debugger.script.snippet.body.name": "CMake: 脚本调试",
	"cmake-tools.debugger.external.snippet.label": "CMake: 外部",
	"cmake-tools.debugger.external.snippet.description": "连接到外部启动的 CMake 调用",
	"cmake-tools.debugger.external.snippet.body.name": "CMake: 外部启动",
	"cmake-tools.taskDefinitions.properties.label.description": "任务的名称",
	"cmake-tools.taskDefinitions.properties.command.description": "CMake 命令",
	"cmake-tools.taskDefinitions.properties.targets.description": "CMake 生成目标",
	"cmake-tools.taskDefinitions.properties.preset.description": "CMake 预设名称。这是基于 CMake 命令的配置、生成或测试预设",
	"cmake-tools.taskDefinitions.properties.options.description": "其他命令选项",
	"cmake-tools.taskDefinitions.properties.options.cwd.description": "已执行程序或脚本的当前工作目录。如果省略，则使用代码的当前工作区根。",
	"cmake-tools.taskDefinitions.properties.options.environment.markdownDescription": "格式为 “name” 的环境变量: “value”。",
	"cmake-tools.taskDefinitions.properties.details.description": "任务类型的其他详细信息",
	"cmake-tools.configuration.cmake.launchBehavior.reuseTerminal.markdownDescriptions": "已重用启动终端实例，并且目标将在终端空闲时立即启动。",
	"cmake-tools.configuration.cmake.launchBehavior.breakAndReuseTerminal.markdownDescriptions": "已重用启动终端实例，并且将在启动目标之前发送 `break` 命令以终止任何活动的前台进程。",
	"cmake-tools.configuration.cmake.launchBehavior.newTerminal.markdownDescriptions": "已创建新的终端实例，并且已在其中启动目标。系统不会自动清理现有终端。",
	"cmake-tools.configuration.cmake.loadCompileCommands.description": "控制扩展是否读取 compile_commands.json 以启用单个文件编译。",
	"cmake-tools.command.cmake.projectStatus.update.title": "刷新项目状态",
	"cmake-tools.command.cmake.pinnedCommands.add.title": "添加要固定的 CMake 命令",
	"cmake-tools.command.cmake.pinnedCommands.remove.title": "取消固定命令",
	"cmake-tools.command.cmake.pinnedCommands.run.title": "运行命令",
	"cmake-tools.command.cmake.projectStatus.cleanConfigure.title": "删除缓存并重新配置",
	"cmake-tools.command.cmake.projectStatus.selectTestPreset.title": "设置测试目标",
	"cmake-tools.command.cmake.projectStatus.openVisibilitySettings.title": "打开可见性设置",
	"cmake-tools.debugger.label": "CMake 调试程序",
	"cmake-tools.command.cmake.appendBuildDirectoryToWorkspace.title": "将生成目录追加到当前工作区",
	"cmake-tools.command.workbench.action.tasks.configureTaskRunner.title": "配置任务",
	"cmake-tools.command.workbench.action.tasks.runTask.title": "运行任务"
}