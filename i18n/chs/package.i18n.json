/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"cmake-tools.command.cmake.viewLog.title": "打开 CMake Tools 日志文件",
	"cmake-tools.command.cmake.editKits.title": "编辑用户本地 CMake 工具包",
	"cmake-tools.command.cmake.scanForKits.title": "扫描工具包",
	"cmake-tools.command.cmake.selectKit.title": "选择工具包",
	"cmake-tools.command.cmake.setVariant.title": "选择变量",
	"cmake-tools.command.cmake.setVariantAll.title": "为所有项目选择变量",
	"cmake-tools.command.cmake.configure.title": "配置",
	"cmake-tools.command.cmake.configureAll.title": "配置所有项目",
	"cmake-tools.command.cmake.build.title": "生成",
	"cmake-tools.command.cmake.buildAll.title": "生成所有项目",
	"cmake-tools.command.cmake.buildNamedTarget.title": "(内部)按名称生成目标",
	"cmake-tools.command.cmake.compileFile.title": "编译活动文件",
	"cmake-tools.command.cmake.outline.compileFile.title": "编译文件",
	"cmake-tools.command.cmake.install.title": "安装",
	"cmake-tools.command.cmake.installAll.title": "安装所有项目",
	"cmake-tools.command.cmake.buildWithTarget.title": "生成目标",
	"cmake-tools.command.cmake.setDefaultTarget.title": "设置生成目标",
	"cmake-tools.command.cmake.cleanConfigure.title": "删除缓存并重新配置",
	"cmake-tools.command.cmake.cleanConfigureAll.title": "删除缓存并重新配置所有项目",
	"cmake-tools.command.cmake.openConfiguration.title": "编辑 CMake 缓存(UI)",
	"cmake-tools.command.cmake.outline.cleanConfigure.title": "清理重新配置",
	"cmake-tools.command.cmake.outline.cleanConfigureAll.title": "清理所有项目的重新配置",
	"cmake-tools.command.cmake.clean.title": "清理",
	"cmake-tools.command.cmake.cleanAll.title": "清理所有项目",
	"cmake-tools.command.cmake.cleanRebuild.title": "清理重新生成",
	"cmake-tools.command.cmake.cleanRebuildAll.title": "清理所有项目的重新生成",
	"cmake-tools.command.cmake.ctest.title": "运行测试",
	"cmake-tools.command.cmake.ctestAll.title": "为所有项目运行测试",
	"cmake-tools.command.cmake.editCache.title": "编辑 CMake 缓存",
	"cmake-tools.command.cmake.quickStart.title": "快速入门",
	"cmake-tools.command.cmake.debugTarget.title": "调试",
	"cmake-tools.command.cmake.debugTargetAll.title": "调试所有项目",
	"cmake-tools.command.cmake.launchTarget.title": "运行但不调试",
	"cmake-tools.command.cmake.launchTargetAll.title": "运行所有项目但不调试",
	"cmake-tools.command.cmake.selectLaunchTarget.title": "设置调试目标",
	"cmake-tools.command.cmake.stop.title": "取消生成",
	"cmake-tools.command.cmake.stopAll.title": "取消所有项目的生成",
	"cmake-tools.command.cmake.resetState.title": "重置 CMake Tools 扩展状态(用于故障排除)",
	"cmake-tools.command.cmake.selectActiveFolder.title": "选择活动文件夹",
	"cmake-tools.command.cmake.outline.runUtilityTarget.title": "运行实用工具",
	"cmake-tools.command.cmake.outline.debugTarget.title": "调试",
	"cmake-tools.command.cmake.outline.launchTarget.title": "在终端中运行",
	"cmake-tools.command.cmake.outline.setDefaultTarget.title": "设置为生成目标",
	"cmake-tools.command.cmake.outline.setLaunchTarget.title": "设置为启动/调试目标",
	"cmake-tools.command.cmake.outline.revealInCMakeLists.title": "打开 CMakeLists.txt",
	"cmake-tools.command.cmake.folders.setActiveFolder.title": "设置活动文件夹",
	"cmake-tools.configuration.title": "CMake 工具配置",
	"cmake-tools.configuration.cmake.cmakePath.description": "要使用的 CMake 可执行文件的名称/路径。",
	"cmake-tools.configuration.cmake.buildDirectory.description": "CMake 生成文件将转到其中的目录。",
	"cmake-tools.configuration.cmake.installPrefix.description": "CMake 安装文件将转到其中的目录。",
	"cmake-tools.configuration.cmake.sourceDirectory.description": "根文件 CMakeLists.txt 的目录。",
	"cmake-tools.configuration.cmake.saveBeforeBuild.description": "在生成前保存打开的文件。",
	"cmake-tools.configuration.cmake.buildBeforeRun.description": "请先生成目标然后再运行目标。",
	"cmake-tools.configuration.cmake.clearOutputBeforeBuild.description": "在每次生成前清除生成输出。",
	"cmake-tools.configuration.cmake.configureSettings.description": "要在命令行上设置的 CMake 变量。",
	"cmake-tools.configuration.cmake.cacheInit.string.description": "缓存初始化 CMake 文件的路径。",
	"cmake-tools.configuration.cmake.cacheInit.array.description": "缓存初始值设定项文件的列表。",
	"cmake-tools.configuration.cmake.cacheInit.array.string.description": "缓存初始化 CMake 文件。",
	"cmake-tools.configuration.cmake.preferredGenerators.description": "要在配置时使用的首选 CMake 生成器(按列表中的顺序尝试)。",
	"cmake-tools.configuration.cmake.generator.description": "要使用的 CMake 生成器。",
	"cmake-tools.configuration.cmake.toolset.description": "要在配置时使用的 CMake 工具集。",
	"cmake-tools.configuration.cmake.platform.description": "要在配置时使用的 CMake 平台。",
	"cmake-tools.configuration.cmake.configureArgs.description": "要在配置时传递给 CMake 的其他参数。",
	"cmake-tools.configuration.cmake.buildArgs.description": "要在生成时传递给 CMake 的其他参数。",
	"cmake-tools.configuration.cmake.buildToolArgs.description": "要在生成时传递给基础生成工具的其他参数。",
	"cmake-tools.configuration.cmake.parallelJobs.description": "并行生成作业的数量。使用零，以自动检测 CPU 的数量。",
	"cmake-tools.configuration.cmake.ctestPath.description": "CTest 可执行文件的路径。如果为 null，则从 cmake.cmakePath 推理(建议保留为 null)。",
	"cmake-tools.configuration.cmake.ctest.parallelJobs.description": "并行测试作业的数量。使用零即可利用 cmake.parallelJobs 的值。",
	"cmake-tools.configuration.cmake.parseBuildDiagnostics.description": "分析编译器输出以查找警告和错误。",
	"cmake-tools.configuration.cmake.enabledOutputParsers.description": "要使用的输出分析程序。支持的分析程序 \"cmake\"、\"gcc\"、\"gnuld\"(适用于 GNULD 样式的 inker 输出)、\"msvc\"(适用于 Microsoft Visual C++)、\"ghs\"(适用于 Green Hills 编译器，具有 --no_wrap_diagnostics --brief_diagnostics)，以及 \"diab\" (适用于 Wind River Diab 编译器)。",
	"cmake-tools.configuration.cmake.debugConfig.description": "要在调试目标时使用的调试配置。",
	"cmake-tools.configuration.cmake.debugConfig.symbolSearchPath.description": "Visual Studio 调试程序符号搜索路径。",
	"cmake-tools.configuration.cmake.debugConfig.additionalSOLibSearchPath.description": "用于搜索 .so 文件的 GDB 或 LLDB 的路径。",
	"cmake-tools.configuration.cmake.debugConfig.externalConsole.description": "启动程序的外部控制台。",
	"cmake-tools.configuration.cmake.debugConfig.logging.description": "告知应将哪些类型的消息记录到控制台。",
	"cmake-tools.configuration.cmake.debugConfig.visualizerFile.description": "调试时要使用的 .natvis 文件。",
	"cmake-tools.configuration.cmake.debugConfig.args.description": "要传递给程序命令行的参数。",
	"cmake-tools.configuration.cmake.debugConfig.cwd.description": "设置程序的工作目录。",
	"cmake-tools.configuration.cmake.debugConfig.environment.name.description": "环境变量的名称。",
	"cmake-tools.configuration.cmake.debugConfig.environment.value.description": "环境变量的值。",
	"cmake-tools.configuration.cmake.debugConfig.miDebuggerPath.description": "gdb 或 lldb 调试程序的路径。",
	"cmake-tools.configuration.cmake.debugConfig.stopAtEntry.description": "在目标的入口点处停止",
	"cmake-tools.configuration.cmake.debugConfig.setupCommands.description": "用于设置 gdb 或 lldb 的命令。",
	"cmake-tools.configuration.cmake.debugConfig.setupCommands.text.description": "要运行的命令。",
	"cmake-tools.configuration.cmake.debugConfig.setupCommands.description.description": "命令的说明。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.description": "生成类型。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.debug.long": "禁用优化 - 包括调试信息。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.release.long": "进行优化，提高速度 - 排除调试信息。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.minsize.long": "优化最小二进制大小 - 排除调试信息。",
	"cmake-tools.configuration.cmake.defaultVariants.buildType.reldeb.long": "进行优化，提高速度 - 包括调试信息。",
	"cmake-tools.configuration.cmake.ctestArgs.description": "要传递给 CTest 的参数。",
	"cmake-tools.configuration.cmake.environment.description": "要在运行 CMake 命令时设置的环境变量。",
	"cmake-tools.configuration.cmake.environment.additionalProperties.description": "环境变量的值。",
	"cmake-tools.configuration.cmake.configureEnvironment.description": "要在配置过程中传递给 CMake 的环境变量。",
	"cmake-tools.configuration.cmake.buildEnvironment.description": "要在生成过程中传递给 CMake 的环境变量。",
	"cmake-tools.configuration.cmake.testEnvironment.description": "要传递给 CTest 的环境变量。",
	"cmake-tools.configuration.cmake.mingwSearchDirs.description": "可在其中安装 MinGW 的目录。",
	"cmake-tools.configuration.cmake.searchDirs.items.description": "目录路径。",
	"cmake-tools.configuration.cmake.emscriptenSearchDirs.description": "可在其中安装 Emscripten 的目录。",
	"cmake-tools.configuration.cmake.copyCompileCommands.description": "成功配置后将 compile_commands.json 复制到此位置。",
	"cmake-tools.configuration.cmake.configureOnOpen.description": "在 CMake 项目目录打开时自动对其进行配置。",
	"cmake-tools.configuration.cmake.configureOnEdit.description": "保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，自动配置 CMake 项目目录。",
	"cmake-tools.configuration.cmake.setBuildTypeOnMultiConfig.description": "在多配置生成器上也设置 CMAKE_BUILD_TYPE",
	"cmake-tools.configuration.cmake.skipConfigureIfCachePresent.description": "如果存在缓存，则跳过配置进程。",
	"cmake-tools.configuration.cmake.cmakeCommunicationMode": "用于在扩展和 CMake 之间进行通信的协议",
	"cmake-tools.configuration.cmake.ignoreKitEnv.description": "运行 CMake 命令时，请勿使用工具包环境变量。",
	"cmake-tools.configuration.cmake.buildTask.description": "使用 tasks.json 生成，而非使用内部进程。",
	"cmake-tools.configuration.cmake.outputLogEncoding.description": "来自外部命令的输出的编码(例如 cmake -- build)。",
	"cmake-tools.configuration.cmake.enableTraceLogging.description": "对文件和控制台启用跟踪日志记录(噪音很大)。",
	"cmake-tools.configuration.cmake.autoSelectActiveFolder.description": "自动选择活动文件夹。",
	"cmake-tools.configuration.cmake.touchbar.visibility.description": "配置扩展在 MacBook 触控栏上显示按钮的方式",
	"cmake-tools.configuration.cmake.touchbar.visibility.default.description": "在支持的系统上显示触控栏按钮。",
	"cmake-tools.configuration.cmake.touchbar.visibility.hidden.description": "不显示触控栏按钮。",
	"cmake-tools.configuration.cmake.statusbar.visibility.description": "配置扩展在状态栏中显示按钮的方式。",
	"cmake-tools.configuration.cmake.statusbar.advanced.description": "配置各个状态栏按钮的设置。这些设置将覆盖更常规的 \"cmake.statusbar.visibility\" 设置。",
	"cmake-tools.configuration.cmake.statusbar.advanced.visibility.description": "配置扩展在状态栏中显示此按钮的方式。",
	"cmake-tools.configuration.cmake.statusbar.advanced.ctest.color.description": "根据测试结果启用此按钮的颜色更改。",
	"cmake-tools.configuration.cmake.statusbar.advanced.length.description": "配置可见文本在在“紧凑”模式下的最大长度。",
	"cmake-tools.configuration.views.cmake.folders.description": "文件夹",
	"cmake-tools.configuration.views.cmake.outline.description": "项目大纲",
	"cmake-tools.configuration.cmake.exportCompileCommandsFile.description": "启用导出 compile_commands.json。"
}